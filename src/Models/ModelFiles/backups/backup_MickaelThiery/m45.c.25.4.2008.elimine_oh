/* Cinetique 1 Dankwerts, Cinetique 2 en log
Portlandite spherique, 
Diffusion gaz MT,
Transferts avec diffusion ionique
Electroneutralite
Carbo CSH (macro)
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "../defs.h"
#include "../lib.h"

#define TITLE "Carbonatation du beton (M. Thiery)"

/* Macros */
#define NEQ     (5)
#define NVE     (24)
#define NVI     (23)

#define E_C     (0)
#define E_O     (1)
#define E_H     (2)
#define E_Ca    (3)
#define E_k     (4)

#define I_CO2   (0)
#define I_P_l   (2)
#define I_CaCO3 (3)
#define I_HCO3  (4)
#define I_psi   (1)

/* les valences */
#define z_ca    (2.)
#define z_h     (1.)
#define z_oh    (-1.)
#define z_hco3  (-1.)
#define z_co3   (-2.)

/* volumes molaires solides */
#define v_caco3csh  v_caco3

/* Masses molaires (kg/moles) */
#define M_Ca      (40.1e-3)
#define M_H2CO3   (62.e-3)
#define M_HCO3    (61.e-3)
#define M_CO3     (60.e-3)
#define M_OH      (17.e-3)
#define M_H       (1.e-3)
#define M_H2O     (18.e-3)

/* constantes physiques */
#define FARADAY   (9.64846e4) /* Faraday (C/mole) */
#define RT        (2436.)     /* produit de R=8.3143 et T=293 (J/mole) */

/* Fonctions */
static int    pm(char *s) ;
static double concentration_oh(double,double,double,double) ;
static double dconcentration_oh(double,double,double,double) ;
/* Parametres */
static double phii,k_int,mu_l,a_1,k_1,a_2,k_2,c_2,n_caoh20,n_csh0,T_csh ;
static double k_e,k_h,k_ca,k_co3 ;
static double d_co2,d_ca,d_oh,d_h,d_h2co3,d_hco3,d_co3 ;
static double v_ca,v_h2o,v_hco3,v_h,v_oh,v_h2co3,v_co3 ;
static double v_csh,v_caoh2,v_caco3 ;
/* static double faraday,RT ; */
static double p_g = 0. ;

int pm(char *s)
{
  if(strcmp(s,"K_henry") == 0) return (0) ;
  else if(strcmp(s,"K_ca") == 0) return (1) ;
  else if(strcmp(s,"K_co3") == 0) return (2) ;
  else if(strcmp(s,"K_eau") == 0) return (3) ;
  else if(strcmp(s,"porosite") == 0) return (4) ;
  else if(strcmp(s,"D_co2") == 0) return (5) ;
  else if(strcmp(s,"k_int") == 0) return (6) ;
  else if(strcmp(s,"mu_l") == 0) return (7) ;
  else if(strcmp(s,"V_ca") == 0) return (8) ;
  else if(strcmp(s,"V_h2o") == 0) return (9) ;
  else if(strcmp(s,"V_hco3") == 0) return (10) ;
  else if(strcmp(s,"V_h") == 0) return (11) ;
  else if(strcmp(s,"V_oh") == 0) return (12) ;
  else if(strcmp(s,"V_h2co3") == 0) return (13) ;
  else if(strcmp(s,"V_co3") == 0) return (14) ;
  else if(strcmp(s,"A_1") == 0) return (15) ;
  else if(strcmp(s,"K_1") == 0) return (16) ;
  else if(strcmp(s,"A_2") == 0) return (17) ;
  else if(strcmp(s,"K_2") == 0) return (18) ;
  else if(strcmp(s,"C_2") == 0) return (19) ;
  else if(strcmp(s,"N_CaOH2") == 0) return (20) ;
  else if(strcmp(s,"porositef") == 0) return (21) ;
  else if(strcmp(s,"D_ca") == 0) return (22) ;
  else if(strcmp(s,"D_oh") == 0) return (23) ;
  else if(strcmp(s,"D_h") == 0) return (24) ;
  else if(strcmp(s,"D_h2co3") == 0) return (25) ;
  else if(strcmp(s,"D_hco3") == 0) return (26) ;
  else if(strcmp(s,"D_co3") == 0) return (27) ;
  else if(strcmp(s,"T_csh") == 0) return (28) ;
  else if(strcmp(s,"n_csh0") == 0) return (29) ;
  else if(strcmp(s,"V_caoh2") == 0) return (30) ;
  else if(strcmp(s,"V_csh") == 0) return (31) ;
  else if(strcmp(s,"V_caco3") == 0) return (32) ;
  else if(strcmp(s,"Faraday") == 0) return (33) ;
  else if(strcmp(s,"RT") == 0) return (34) ;
  else if(strcmp(s,"courbes") == 0) return (35) ;
  
  else { 
    printf("donnee \"%s\" non connue (pm45)\n",s) ; exit(0) ;
  }
}

int dm45(int dim,mate_t *mat,FILE *ficd)
/* Lecture des donnees materiaux dans le fichier ficd */
{
  int  n_donnees = 36 ;
  
  mat->neq      = NEQ ;

  strcpy(mat->eqn[E_C], "carbone") ;
  strcpy(mat->eqn[E_O], "oxygene") ;
  strcpy(mat->eqn[E_H], "hydrogene") ;
  strcpy(mat->eqn[E_Ca],"calcium") ;
  strcpy(mat->eqn[E_k], "k") ;

  strcpy(mat->inc[I_CO2],  "c_co2") ;
  strcpy(mat->inc[I_P_l],  "p_l") ;
  strcpy(mat->inc[I_CaCO3],"c_caco3") ;
  strcpy(mat->inc[I_HCO3], "c_hco3") ;
  strcpy(mat->inc[I_psi],  "psi") ;

  dmat(mat,ficd,pm,n_donnees) ;
  
  return(mat->n) ;
}

int qm45(int dim,FILE *ficd)
/* Saisie des donnees materiaux */
{
  
  printf(TITLE) ;
  
  if(!ficd) return(NEQ) ;
  
  printf("\n\n\
Le systeme est forme de 6 equations:\n\
\t- la conservation de la masse de C  (c_co2)\n\
\t- la conservation de la masse de O  (c_oh)\n\
\t- la conservation de la masse de H  (p_l)\n\
\t- la conservation de la masse de Ca (c_caco3)\n\
\t- 1 equation de cinetique           (c_hco3)\n\
\t- Electroneutralite                 (psi)\n") ;

  printf("\n\
Exemple de donnees\n\n") ;

  fprintf(ficd,"porosite = 0.38   # La porosite\n") ;
  fprintf(ficd,"K_henry = 1.      # La constante de Henry\n") ;
  fprintf(ficd,"K_ca = 3.89e-9    # Constante d\'equilibre de CaCO3\n") ;
  fprintf(ficd,"K_co3 = 4.571e3   # Constante d\'equilibre (CO3(2-))/(HCO3-)(OH-)\n") ;
  fprintf(ficd,"K_eau = 1.e-14    # Produit ionique de l\'eau\n") ;
  fprintf(ficd,"k_int = 5e-19     # Permeabilite intrinseque\n") ;
  fprintf(ficd,"mu_l = 1.e-3      # Viscosite du l\'eau\n") ;
  fprintf(ficd,"D_co2 = 0.5e-3    # Coefficient de diffusion de CO2\n") ;
  fprintf(ficd,"V_oh = 18.e-3     # Volume molaire partiel de OH-\n") ;
  fprintf(ficd,"V_h2o = 18.e-3    # Volume molaire partiel de H2O\n") ;
  fprintf(ficd,"V_hco3 = 50.e-3   # Volume molaire partiel de HCO3-\n") ;
  fprintf(ficd,"V_h = 0           # Volume molaire partiel de H+\n") ;
  fprintf(ficd,"V_ca = 0          # Volume molaire partiel de Ca2+\n") ;
  fprintf(ficd,"V_h2co3 = 50.e-3  # Volume molaire partiel de H2CO3\n") ;
  fprintf(ficd,"V_co3 = 50.e-3    # Volume molaire partiel de CO3(2-\n") ;
  fprintf(ficd,"A_1 = 150         # Coef de la cinetique 1\n") ;
  fprintf(ficd,"K_1 = 2.18776e-8  # Cste d\'equilibre 1\n") ;
  fprintf(ficd,"A_2 = 1e-2        # Coef de la cinetique \n") ;
  fprintf(ficd,"K_2 = 6.45654e-6  # Cste d\'equilibre 2\n") ;
  fprintf(ficd,"C_2 = 0.14e6      # Coef de la cinetique 2\n") ;
  fprintf(ficd,"N_CaOH2 = 6.1     # Contenu initial en moles de portlandite\n") ;
  fprintf(ficd,"n_csh0 = 2.4      # contenu initial en moles de CSH\n") ;
  fprintf(ficd,"porositef = 0.4   # Porosite finale\n") ; 
  fprintf(ficd,"D_ca = 8e-8       # Coefficient de diffusion de Ca\n") ;
  fprintf(ficd,"D_h = 93.1e-8     # Coefficient de diffusion de H\n") ;
  fprintf(ficd,"D_oh = 100e-8     # Coefficient de diffusion de OH\n") ;
  fprintf(ficd,"D_h2co3 = 7.2e-8  # Coefficient de diffusion de H2CO3\n") ;
  fprintf(ficd,"D_hco3 = 11.8e-8  # Coefficient de diffusion de HCO3\n") ;
  fprintf(ficd,"D_co3 = 9.55e-8   # Coefficient de diffusion de CO3\n") ;
  fprintf(ficd,"faraday = 9.6484e4    # Constante de Faraday\n") ;
  fprintf(ficd,"R = 8.3143        # Constante des gaz parfait\n") ;
  fprintf(ficd,"V_caoh2 = 33.e-6  # Volume molaire de CaOH2\n") ;
  fprintf(ficd,"V_csh   = 39.e-6  # Volume molaire de CSH\n") ;
  fprintf(ficd,"V_caco3 = 37.e-6  # Volume molaire de CaCO3\n") ;
  fprintf(ficd,"courbes = my_file # Nom du fichier : p_c S_l k_rl\n") ;  
  return(NEQ) ;
}


void tb45(elem_t el,int dim,geom_t geom,int *nv)
{
  nv[0] = NVI ;
  nv[1] = NVE ;
}


void ch45(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,geom_t geom,double dt,double t,char_t cg)
/* Residu du aux chargements (r) */
{
  int    i ;

  chsurf(x,r,dim,geom,dt,t,cg,el) ;
  for(i=0;i<NEQ*el.nn;i++) r[i] = -r[i] ;
}


void in45(double **x,double **u,double *f,double *va,elem_t el,int dim,geom_t geom)
/* Initialise les variables du systeme (f,va) */ 
{
#define X_CO2(n)   (u[(n)][I_CO2])
#define N_CaCO3(n) (u[(n)][I_CaCO3])
#define P_l(n)     (u[(n)][I_P_l])
#define X_HCO3(n)  (u[(n)][I_HCO3])
#define PSI(n)     (u[(n)][I_psi])

#define N_C(n)     (f[(n)])
#define N_O(n)     (f[(2+n)])
#define N_H(n)     (f[(4+n)])
#define N_Ca(n)    (f[(6+n)])
#define N_k(n)     (f[(8+n)])
#define XI(n)      (f[(10+n)])
#define W_C        (f[12])
#define W_O        (f[13])
#define W_H        (f[14])
#define W_Ca       (f[15])
#define W_k        (f[16])
#define N_CaOH2(n) (f[(17+n)])
#define N_CSH(n)   (f[(19+n)])
#define N_q(n)     (f[(21+n)])

#define KD_Ca      (va[(0)])
#define KD_OH      (va[(1)])
#define KD_H       (va[(2)])
#define KD_H2CO3   (va[(3)])
#define KD_HCO3    (va[(4)])
#define KD_CO3     (va[(5)])
#define KD_H2O     (va[(6)])

#define KF_CO2     (va[(7)])
#define KF_Ca      (va[(8)])
#define KF_OH      (va[(9)])
#define KF_H       (va[(10)])
#define KF_H2CO3   (va[(11)])
#define KF_HCO3    (va[(12)])
#define KF_CO3     (va[(13)])

#define Kpsi_Ca    (va[(14)])
#define Kpsi_OH    (va[(15)])
#define Kpsi_H     (va[(16)])
#define Kpsi_HCO3  (va[(17)])
#define Kpsi_CO3   (va[(18)])
#define Kpsi_H2O   (va[(19)])

  double n_co2,n_h2co3,n_hco3,n_co3,n_oh,n_h,n_h2o,n_ca ;
  double n_caco3csh,n_gel,n_caco3,n_caoh2,n_csh ;
  double x_co2,x_h2co3,x_hco3,x_co3,x_oh,x_h,x_h2o,x_ca,X_OH[2] ;
  double grd_co2,grd_p_l,grd_ca,grd_oh,grd_h,grd_h2co3,grd_hco3,grd_co3,grd_psi ;
  double w_ca,w_h,w_oh,w_hco3,w_co3,w_h2co3,w_co2,w_h2o ;
  double k_l,tau,phi,iff ;
  double s_l,s_g,p_c,p_l ;
  double dx ;
  int    i ;
  double un = 1.,deux = 2. ;
  
  if(el.dim < dim) return ;
  
  /*
    Donnees
  */
  k_h     = el.mat->pr[pm("K_henry")] ;
  k_ca    = el.mat->pr[pm("K_ca")] ;
  k_co3   = el.mat->pr[pm("K_co3")] ;
  k_e     = el.mat->pr[pm("K_eau")] ;
  phii    = el.mat->pr[pm("porosite")] ;
  k_int   = el.mat->pr[pm("k_int")] ;
  mu_l    = el.mat->pr[pm("mu_l")] ;
  d_co2   = el.mat->pr[pm("D_co2")] ;
  d_ca    = el.mat->pr[pm("D_ca")] ;
  d_oh    = el.mat->pr[pm("D_oh")] ;
  d_h     = el.mat->pr[pm("D_h")] ;
  d_h2co3 = el.mat->pr[pm("D_h2co3")] ;
  d_hco3  = el.mat->pr[pm("D_hco3")] ;
  d_co3   = el.mat->pr[pm("D_co3")] ;
  v_h2co3 = el.mat->pr[pm("V_h2co3")] ;
  v_hco3  = el.mat->pr[pm("V_hco3")] ;
  v_co3   = el.mat->pr[pm("V_co3")] ;
  v_h     = el.mat->pr[pm("V_h")] ;
  v_oh    = el.mat->pr[pm("V_oh")] ;
  v_h2o   = el.mat->pr[pm("V_h2o")] ;
  v_ca    = el.mat->pr[pm("V_ca")] ;
  a_1     = el.mat->pr[pm("A_1")] ;
  k_1     = el.mat->pr[pm("K_1")] ;
  a_2     = el.mat->pr[pm("A_2")] ;
  k_2     = el.mat->pr[pm("K_2")] ;
  c_2     = el.mat->pr[pm("C_2")] ;
  n_caoh20 = el.mat->pr[pm("N_CaOH2")] ; 
  T_csh   = el.mat->pr[pm("T_csh")] ;
  n_csh0  = el.mat->pr[pm("n_csh0")] ;
  v_csh   = el.mat->pr[pm("V_csh")] ;
  v_caoh2 = el.mat->pr[pm("V_caoh2")] ;
  v_caco3 = el.mat->pr[pm("V_caco3")] ;

  
  /* Contenus molaires */
  for(i=0;i<2;i++) {
    p_l     = P_l(i) ;
    p_c     = p_g - p_l ;
    s_l     = courbe(p_c,el.mat->cb[0]) ;
    s_g     = un - s_l ;
    
    /* molarites */
    x_co2   = X_CO2(i) ;
    x_hco3  = X_HCO3(i) ;

    x_oh    = X_OH[i] = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;
    x_h2co3 = k_h*x_co2 ;
    x_co3   = k_co3*x_oh*x_hco3 ;
    x_h     = k_e/x_oh ;
    x_ca    = k_ca/x_co3 ;
    x_h2o   = (un - (x_h2co3*v_h2co3 + x_hco3*v_hco3 + x_co3*v_co3 + x_h*v_h + x_oh*v_oh + x_ca*v_ca))/v_h2o ;

    /* solides */
    n_caco3    = N_CaCO3(i) ;
    n_csh      = n_csh0 ;
    n_caoh2    = n_caoh20 ;  
    n_caco3csh = 3*(n_csh0 - n_csh) ;
    n_gel      = (n_csh0 - n_csh) ;

    /* porosite */
    phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;
    /* phi     = phii - dv_caoh2*n_caco3 - dv_csh*(n_csh0 - n_csh) ; */

    /* contenus molaires */
    n_co2   = phi*s_g*x_co2 ;
    n_oh    = phi*s_l*x_oh ;
    n_h2o   = phi*s_l*x_h2o ;
    n_hco3  = phi*s_l*x_hco3 ;
    n_h2co3 = phi*s_l*x_h2co3 ;
    n_co3   = phi*s_l*x_co3 ;
    n_h     = phi*s_l*x_h ;
    n_ca    = phi*s_l*x_ca ;

    N_C(i)  = n_co2 + n_h2co3 + n_hco3 + n_co3 + n_caco3 + n_caco3csh ;
    N_O(i)  = 0.5*n_hco3 + n_co3 + 0.5*n_oh - 0.5*n_h + n_caco3 + n_caoh2 + n_caco3csh + 4*n_gel + 7*n_csh ;
    N_H(i)  = 2*n_h2co3 + n_hco3 + n_h + n_oh + 2*n_h2o + 2*n_caoh2 + 6*n_gel + 6*n_csh ;
    N_Ca(i) = n_ca + n_caoh2 + n_caco3 + n_caco3csh + 3*n_csh ;

    /* cinetique */
    N_k(i)  = n_hco3 + n_co3 + n_caco3 ;
    XI(i)   = phi*s_l*a_1*(x_oh*x_h2co3 - k_1*x_hco3) ;

    /* electroneutralite */
    N_q(i)  = z_h*x_h + z_oh*x_oh + z_ca*x_ca + z_hco3*x_hco3 + z_co3*x_co3 ;

    /* contenus solides */
    N_CaOH2(i) = n_caoh2 ;
    N_CSH(i)   = n_csh ;
  }

  /* Coefficient de transfert */
  p_l  = (P_l(0) + P_l(1))/deux ;
  p_c  = p_g - p_l ;
  s_l  = courbe(p_c,el.mat->cb[0]) ;
  s_g  = un - s_l ;

  x_co2   = (X_CO2(0)  + X_CO2(1))/deux ;
  x_hco3  = (X_HCO3(0) + X_HCO3(1))/deux ;

  x_oh    = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;
  x_h2co3 = k_h*x_co2 ;
  x_co3   = k_co3*x_oh*x_hco3 ;
  x_h     = k_e/x_oh ;
  x_ca    = k_ca/x_co3 ;
  x_h2o   = (un - (x_h2co3*v_h2co3 + x_hco3*v_hco3 + x_co3*v_co3 + x_h*v_h + x_oh*v_oh + x_ca*v_ca))/v_h2o ;
  
  /* solides */
  n_caco3    = (N_CaCO3(0) + N_CaCO3(1))/deux ;
  n_csh      = (N_CSH(0)   + N_CSH(1))/deux ;
  n_caoh2    = (N_CaOH2(0) + N_CaOH2(1))/deux ;  
  n_caco3csh = 3*(n_csh0 - n_csh) ;
  
  /* porosite */
  phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;
  /* phi  = phii - dv_caoh2*(N_CaCO3(0)+N_CaCO3(1))/deux - dv_csh*(2*n_csh0 - N_CSH(0) - N_CSH(1))/deux ; */

  k_l  = k_int/mu_l*courbe(p_c,el.mat->cb[1])*pow(phi/phii,3.)*pow(((1-phii)/(1-phi)),2.) ;
  tau  = pow(phi,1.74)*pow(s_g,3.20) ;
  iff  = 0.00029*exp(9.95*phi)/(1+625*pow((1-s_l),4)) ;

  /*
  KD_C      = (x_h2co3 + x_hco3 + x_co3)*k_l ;
  KD_O      = (0.5*x_hco3 + x_co3 + 0.5*x_oh - 0.5*x_h)*k_l ;
  KD_H      = (2*x_h2co3 + x_hco3 + x_h + x_oh + 2*x_h2o)*k_l ;
  KD_Ca     = x_ca*k_l ;
  KD_k      = (x_hco3 + x_co3)*k_l ;
  */
  KD_Ca     = x_ca*k_l ;
  KD_H2CO3  = x_h2co3*k_l ;
  KD_HCO3   = x_hco3*k_l ;
  KD_CO3    = x_co3*k_l ;
  KD_OH     = x_oh*k_l ;
  KD_H      = x_h*k_l ;
  KD_H2O    = x_h2o*k_l ;

  KF_CO2    = phi*s_g*tau*d_co2 ;
  KF_Ca     = d_ca*iff ;
  KF_OH     = d_oh*iff ;
  KF_H      = d_h*iff ;
  KF_H2CO3  = d_h2co3*iff ;
  KF_HCO3   = d_hco3*iff ;
  KF_CO3    = d_co3*iff ;

  Kpsi_Ca   = FARADAY/RT*KF_Ca*z_ca*x_ca ;
  Kpsi_HCO3 = FARADAY/RT*KF_HCO3*z_hco3*x_hco3 ;
  Kpsi_CO3  = FARADAY/RT*KF_CO3*z_co3*x_co3 ;
  Kpsi_OH   = FARADAY/RT*KF_OH*z_oh*x_oh ;
  Kpsi_H    = FARADAY/RT*KF_H*z_h*x_h ;
  Kpsi_H2O  = -(M_Ca*Kpsi_Ca + M_HCO3*Kpsi_HCO3 + M_CO3*Kpsi_CO3 + M_OH*Kpsi_OH + M_H*Kpsi_H)/M_H2O ;

  /* Gradients */
  dx        = x[1][0] - x[0][0] ;
  grd_co2   = (X_CO2(1) - X_CO2(0))/dx ;
  grd_p_l   = (P_l(1) - P_l(0))/dx ;
  grd_ca    = (k_ca/k_co3)*(1/(X_OH[1]*X_HCO3(1)) - 1/(X_OH[0]*X_HCO3(0)))/dx ;
  grd_oh    = (X_OH[1] - X_OH[0])/dx ;
  grd_h     = (k_e/X_OH[1] - k_e/X_OH[0])/dx ;
  grd_h2co3 = k_h*(X_CO2(1) - X_CO2(0))/dx ;
  grd_hco3  = (X_HCO3(1) - X_HCO3(0))/dx ;
  grd_co3   = k_co3*(X_HCO3(1)*X_OH[1] - X_HCO3(0)*X_OH[0])/dx ;
  grd_psi   = (PSI(1) - PSI(0))/dx ;

  /* Flux */
  w_ca    = - KD_Ca*grd_p_l    - KF_Ca*grd_ca     - Kpsi_Ca*grd_psi ;
  w_h     = - KD_H*grd_p_l     - KF_H*grd_h       - Kpsi_H*grd_psi ;
  w_oh    = - KD_OH*grd_p_l    - KF_OH*grd_oh     - Kpsi_OH*grd_psi ;
  w_hco3  = - KD_HCO3*grd_p_l  - KF_HCO3*grd_hco3 - Kpsi_HCO3*grd_psi ;
  w_co3   = - KD_CO3*grd_p_l   - KF_CO3*grd_co3   - Kpsi_CO3*grd_psi ;
  w_h2co3 = - KD_H2CO3*grd_p_l - KF_H2CO3*grd_h2co3 ;
  w_co2   =                    - KF_CO2*grd_co2 ;
  w_h2o   = - KD_H2O*grd_p_l   + M_Ca/M_H2O*KF_Ca*grd_ca          \
                               + M_H/M_H2O*KF_H*grd_h             \
                               + M_OH/M_H2O*KF_OH*grd_oh          \
                               + M_HCO3/M_H2O*KF_HCO3*grd_hco3    \
                               + M_CO3/M_H2O*KF_CO3*grd_co3       \
                               + M_H2CO3/M_H2O*KF_H2CO3*grd_h2co3 \
                                                  - Kpsi_H2O*grd_psi ;

  W_C     = w_co2 + w_h2co3 + w_hco3 + w_co3 ;
  W_O     = 0.5*w_hco3 + w_co3 + 0.5*w_oh - 0.5*w_h  ;
  W_H     = 2*w_h2co3 + w_hco3 + w_h + w_oh + 2*w_h2o ;
  W_Ca    = w_ca ;
  W_k     = w_hco3 + w_co3 ;
  
#undef X_CO2
#undef X_OH
#undef X_HCO3
#undef N_CaCO3
#undef P_l
#undef PSI

#undef N_C
#undef N_O
#undef N_H
#undef N_Ca
#undef N_k
#undef N_CaOH2
#undef W_C
#undef W_O
#undef W_H
#undef W_Ca
#undef W_k
#undef XI
#undef N_CSH
#undef N_q

#undef KD_Ca
#undef KD_OH
#undef KD_H
#undef KD_H2CO3
#undef KD_HCO3
#undef KD_CO3
#undef KD_H2O
#undef KF_CO2
#undef KF_Ca
#undef KF_OH
#undef KF_H
#undef KF_H2CO3
#undef KF_HCO3
#undef KF_CO3
#undef Kpsi_Ca
#undef Kpsi_OH
#undef Kpsi_H
#undef Kpsi_HCO3
#undef Kpsi_CO3
#undef Kpsi_H2O
}


int ex45(double **x,double **u,double *f,double *va,elem_t el,int dim,geom_t geom,double t) 
/* Thermes explicites (va)  */
{
#define X_CO2(n)   (u[(n)][I_CO2])
#define N_CaCO3(n) (u[(n)][I_CaCO3])
#define P_l(n)     (u[(n)][I_P_l])
#define X_HCO3(n)  (u[(n)][I_HCO3])

#define N_CaOH2(n) (f[(17+n)])
#define N_CSH(n)   (f[(19+n)])

#define KD_Ca      (va[(0)])
#define KD_OH      (va[(1)])
#define KD_H       (va[(2)])
#define KD_H2CO3   (va[(3)])
#define KD_HCO3    (va[(4)])
#define KD_CO3     (va[(5)])
#define KD_H2O     (va[(6)])

#define KF_CO2     (va[(7)])
#define KF_Ca      (va[(8)])
#define KF_OH      (va[(9)])
#define KF_H       (va[(10)])
#define KF_H2CO3   (va[(11)])
#define KF_HCO3    (va[(12)])
#define KF_CO3     (va[(13)])

#define Kpsi_Ca    (va[(14)])
#define Kpsi_OH    (va[(15)])
#define Kpsi_H     (va[(16)])
#define Kpsi_HCO3  (va[(17)])
#define Kpsi_CO3   (va[(18)])
#define Kpsi_H2O   (va[(19)])

#define DN_CSHSDT(n)   (va[(20+n)])
#define DN_CaOH2SDT(n) (va[(22+n)])
  double x_co2,x_h2co3,x_hco3,x_co3,x_oh,x_h,x_h2o,x_ca ;
  double n_caoh2,n_caco3,n_csh,n_caco3csh ;
  double av,alpha,alpha2 ;
  double s_l,s_g,p_c,p_l,k_l,tau,phi,iff ;
  int    i ;
  double un = 1.,deux = 2. ;
  
  if(el.dim < dim) return(0) ;
  
  /*
    Donnees
  */
  k_h     = el.mat->pr[pm("K_henry")] ;
  k_ca    = el.mat->pr[pm("K_ca")] ;
  k_co3   = el.mat->pr[pm("K_co3")] ;
  k_e     = el.mat->pr[pm("K_eau")] ;
  phii    = el.mat->pr[pm("porosite")] ;
  k_int   = el.mat->pr[pm("k_int")] ;
  mu_l    = el.mat->pr[pm("mu_l")] ;
  d_co2   = el.mat->pr[pm("D_co2")] ;
  d_ca    = el.mat->pr[pm("D_ca")] ;
  d_oh    = el.mat->pr[pm("D_oh")] ;
  d_h     = el.mat->pr[pm("D_h")] ;
  d_h2co3 = el.mat->pr[pm("D_h2co3")] ;
  d_hco3  = el.mat->pr[pm("D_hco3")] ;
  d_co3   = el.mat->pr[pm("D_co3")] ;
  v_h2co3 = el.mat->pr[pm("V_h2co3")] ;
  v_hco3  = el.mat->pr[pm("V_hco3")] ;
  v_co3   = el.mat->pr[pm("V_co3")] ;
  v_h     = el.mat->pr[pm("V_h")] ;
  v_oh    = el.mat->pr[pm("V_oh")] ;
  v_h2o   = el.mat->pr[pm("V_h2o")] ;
  v_ca    = el.mat->pr[pm("V_ca")] ;
  a_1     = el.mat->pr[pm("A_1")] ;
  k_1     = el.mat->pr[pm("K_1")] ;
  a_2     = el.mat->pr[pm("A_2")] ;
  k_2     = el.mat->pr[pm("K_2")] ;
  c_2     = el.mat->pr[pm("C_2")] ;
  n_caoh20 = el.mat->pr[pm("N_CaOH2")] ;
  T_csh       = el.mat->pr[pm("T_csh")] ;
  n_csh0  = el.mat->pr[pm("n_csh0")] ;
  v_csh   = el.mat->pr[pm("V_csh")] ;
  v_caoh2 = el.mat->pr[pm("V_caoh2")] ;
  v_caco3 = el.mat->pr[pm("V_caco3")] ;


  /* Contenus molaires */
  for(i=0;i<2;i++) {
    p_l     = P_l(i) ;
    p_c     = p_g - p_l ;
    s_l     = courbe(p_c,el.mat->cb[0]) ;

    /* molarites */
    x_co2   = X_CO2(i) ;
    x_hco3  = X_HCO3(i) ;

    x_oh    = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;

    /* solides */
    n_caoh2    = N_CaOH2(i) ;
    n_caco3    = N_CaCO3(i) ;
    n_csh      = N_CSH(i) ;
    n_caco3csh = 3*(n_csh0 - n_csh) ;

    /* porosite */
    phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;

    av      = n_caco3/n_caoh20 ;
    alpha   = -5.29478*av*av*av*av + 8.6069*av*av*av - 4.2444*av*av + 0.9325*av ; 
/*pow(1-n_caco3/n_caoh20,1./3.)*(1-pow(1-n_caco3/n_caoh20,1./3.))*/
    
    alpha2  = (-1./3)*av*av - (2./3.)*av + 1 ;
/*pow(1-n_caco3/n_caoh20,2./3.)*/
 
    DN_CaOH2SDT(i) = alpha2*(a_2/(1+c_2*alpha))*log(k_ca*x_oh/(k_co3*k_2*x_hco3)) ;
    DN_CSHSDT(i)   =  - phi*s_l*T_csh*x_co2 ;
  }
  /*
    Coefficients de transfert
  */
  p_l  = (P_l(0) + P_l(1))/deux ;
  p_c  = p_g - p_l ;
  s_l  = courbe(p_c,el.mat->cb[0]) ;
  s_g  = un - s_l ;

  /* molarites */
  x_co2   = (X_CO2(0)   + X_CO2(1))/2. ;
  x_hco3  = (X_HCO3(0)  + X_HCO3(1))/2. ;

  x_oh    = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;

  x_h2co3 = k_h*x_co2 ;
  x_co3   = k_co3*x_oh*x_hco3 ;
  x_h     = k_e/x_oh ;
  x_ca    = k_ca/x_co3 ;
  x_h2o   = (un - (x_h2co3*v_h2co3 + x_hco3*v_hco3 + x_co3*v_co3 + x_h*v_h + x_oh*v_oh + x_ca*v_ca))/v_h2o ;
  
  /* solides */
  n_caoh2    = (N_CaOH2(0) + N_CaOH2(1))/2. ;
  n_caco3    = (N_CaCO3(0) + N_CaCO3(1))/2. ;
  n_csh      = (N_CSH(0)   + N_CSH(1))/2. ;
  n_caco3csh = 3*(n_csh0 - n_csh) ;
 
  /* porosite */
  phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;
    /* phi  = phii - dv_caoh2*(N_CaCO3(0)+N_CaCO3(1))/deux - dv_csh*(2*n_csh0 - N_CSH(0) - N_CSH(1))/deux ; */

  /* permeabilite */
  k_l  = (k_int/mu_l)*courbe(p_c,el.mat->cb[1])*pow(phi/phii,3.)*pow(((1-phii)/(1-phi)),2.) ;
  /* tortuosite gaz */
  tau  = pow(phi,1.74)*pow(s_g,3.20) ;
  /* tortuosite liquide */
  iff    = 0.00029*exp(9.95*phi)/(1+625*pow((1-s_l),4)) ;
  
  KD_Ca     = x_ca*k_l ;
  KD_H2CO3  = x_h2co3*k_l ;
  KD_HCO3   = x_hco3*k_l ;
  KD_CO3    = x_co3*k_l ;
  KD_OH     = x_oh*k_l ;
  KD_H      = x_h*k_l ;
  KD_H2O    = x_h2o*k_l ;

  KF_CO2    = phi*s_g*tau*d_co2 ;
  KF_Ca     = d_ca*iff ;
  KF_OH     = d_oh*iff ;
  KF_H      = d_h*iff ;
  KF_H2CO3  = d_h2co3*iff ;
  KF_HCO3   = d_hco3*iff ;
  KF_CO3    = d_co3*iff ;

  Kpsi_Ca   = FARADAY/RT*KF_Ca*z_ca*x_ca ;
  Kpsi_HCO3 = FARADAY/RT*KF_HCO3*z_hco3*x_hco3 ;
  Kpsi_CO3  = FARADAY/RT*KF_CO3*z_co3*x_co3 ;
  Kpsi_OH   = FARADAY/RT*KF_OH*z_oh*x_oh ;
  Kpsi_H    = FARADAY/RT*KF_H*z_h*x_h ;
  Kpsi_H2O  = -(M_Ca*Kpsi_Ca + M_HCO3*Kpsi_HCO3 + M_CO3*Kpsi_CO3 + M_OH*Kpsi_OH + M_H*Kpsi_H)/M_H2O ;

  return(0) ;
  
#undef X_CO2
#undef X_HCO3
#undef N_CaCO3
#undef P_l

#undef N_CaOH2
#undef N_CSH

#undef KD_Ca
#undef KD_OH
#undef KD_H
#undef KD_H2CO3
#undef KD_HCO3
#undef KD_CO3
#undef KD_H2O
#undef KF_CO2
#undef KF_Ca
#undef KF_OH
#undef KF_H
#undef KF_H2CO3
#undef KF_HCO3
#undef KF_CO3
#undef Kpsi_Ca
#undef Kpsi_OH
#undef Kpsi_H
#undef Kpsi_HCO3
#undef Kpsi_CO3
#undef Kpsi_H2O

#undef DN_CSHSDT
#undef DN_CaOH2SDT
}


int ct45(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,elem_t el,int dim,geom_t geom,double dt,double t)
/* Les variables donnees par la loi de comportement (f_1) */
{
#define X_CO2(n)   (u_1[(n)][I_CO2])
#define N_CaCO3(n) (u_1[(n)][I_CaCO3])
#define P_l(n)     (u_1[(n)][I_P_l])
#define X_HCO3(n)  (u_1[(n)][I_HCO3])
#define PSI(n)     (u_1[(n)][I_psi])

#define N_CaCO3n(n) (u_n[(n)][I_CaCO3])
#define X_HCO3n(n)  (u_n[(n)][I_HCO3])

#define N_C(n)     (f_1[(n)])
#define N_O(n)     (f_1[(2+n)])
#define N_H(n)     (f_1[(4+n)])
#define N_Ca(n)    (f_1[(6+n)])
#define N_k(n)     (f_1[(8+n)])
#define XI(n)      (f_1[(10+n)])
#define W_C        (f_1[12])
#define W_O        (f_1[13])
#define W_H        (f_1[14])
#define W_Ca       (f_1[15])
#define W_k        (f_1[16])
#define N_CaOH2(n) (f_1[(17+n)])
#define N_CSH(n)   (f_1[(19+n)])
#define N_q(n)     (f_1[(21+n)])

#define N_CaOH2n(n) (f_n[(17+n)])
#define N_CSHn(n)   (f_n[(19+n)])

#define KD_Ca      (va[(0)])
#define KD_OH      (va[(1)])
#define KD_H       (va[(2)])
#define KD_H2CO3   (va[(3)])
#define KD_HCO3    (va[(4)])
#define KD_CO3     (va[(5)])
#define KD_H2O     (va[(6)])

#define KF_CO2     (va[(7)])
#define KF_Ca      (va[(8)])
#define KF_OH      (va[(9)])
#define KF_H       (va[(10)])
#define KF_H2CO3   (va[(11)])
#define KF_HCO3    (va[(12)])
#define KF_CO3     (va[(13)])

#define Kpsi_Ca    (va[(14)])
#define Kpsi_OH    (va[(15)])
#define Kpsi_H     (va[(16)])
#define Kpsi_HCO3  (va[(17)])
#define Kpsi_CO3   (va[(18)])
#define Kpsi_H2O   (va[(19)])

#define DN_CSHSDT(n)   (va[(20+n)])
#define DN_CaOH2SDT(n) (va[(22+n)])

  double n_co2,n_h2co3,n_hco3,n_co3,n_oh,n_h,n_h2o,n_ca ;
  double n_caco3,n_gel,n_caco3csh,n_caoh2,n_csh ;
  double x_co2,x_h2co3,x_hco3,x_co3,x_oh,x_h,x_h2o,x_ca,X_OH[2] ;
  double grd_co2,grd_p_l,grd_ca,grd_oh,grd_h,grd_h2co3,grd_hco3,grd_co3,grd_psi ;
  double w_ca,w_h,w_oh,w_hco3,w_co3,w_h2co3,w_co2,w_h2o ;
  double s_l,s_g,p_c,p_l,phi ;
  double dx ;
  int    i ;
  double un = 1. ;
  
  if(el.dim < dim) return(0) ;
  
  /*
    Donnees
  */
  k_h     = el.mat->pr[pm("K_henry")] ;
  k_ca    = el.mat->pr[pm("K_ca")] ;
  k_co3   = el.mat->pr[pm("K_co3")] ;
  k_e     = el.mat->pr[pm("K_eau")] ;
  phii     = el.mat->pr[pm("porosite")] ;
  k_int   = el.mat->pr[pm("k_int")] ;
  mu_l    = el.mat->pr[pm("mu_l")] ;
  d_co2   = el.mat->pr[pm("D_co2")] ;
  d_ca    = el.mat->pr[pm("D_ca")] ;
  d_oh    = el.mat->pr[pm("D_oh")] ;
  d_h     = el.mat->pr[pm("D_h")] ;
  d_h2co3 = el.mat->pr[pm("D_h2co3")] ;
  d_hco3  = el.mat->pr[pm("D_hco3")] ;
  d_co3   = el.mat->pr[pm("D_co3")] ;
  v_h2co3 = el.mat->pr[pm("V_h2co3")] ;
  v_hco3  = el.mat->pr[pm("V_hco3")] ;
  v_co3   = el.mat->pr[pm("V_co3")] ;
  v_h     = el.mat->pr[pm("V_h")] ;
  v_oh    = el.mat->pr[pm("V_oh")] ;
  v_h2o   = el.mat->pr[pm("V_h2o")] ;
  v_ca    = el.mat->pr[pm("V_ca")] ;
  a_1     = el.mat->pr[pm("A_1")] ;
  k_1     = el.mat->pr[pm("K_1")] ;
  a_2     = el.mat->pr[pm("A_2")] ;
  k_2     = el.mat->pr[pm("K_2")] ;
  c_2     = el.mat->pr[pm("C_2")] ; 
  n_caoh20 = el.mat->pr[pm("N_CaOH2")] ;
  T_csh   = el.mat->pr[pm("T_csh")] ;
  n_csh0  = el.mat->pr[pm("n_csh0")] ;
  v_csh   = el.mat->pr[pm("V_csh")] ;
  v_caoh2 = el.mat->pr[pm("V_caoh2")] ;
  v_caco3 = el.mat->pr[pm("V_caco3")] ;

  
  /* Contenus molaires */
  for(i=0;i<2;i++) {
    p_l     = P_l(i) ;
    p_c     = p_g - p_l ;
    s_l     = courbe(p_c,el.mat->cb[0]) ;
    s_g     = un - s_l ;

    /* molarites */
    x_co2   = X_CO2(i) ;
    x_hco3  = X_HCO3(i) ;

    x_oh    = X_OH[i] = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;

    x_h2co3 = k_h*x_co2 ;
    x_co3   = k_co3*x_oh*x_hco3 ;
    x_h     = k_e/x_oh ;
    x_ca    = k_ca/x_co3 ;
    x_h2o   = (un - (x_h2co3*v_h2co3 + x_hco3*v_hco3 + x_co3*v_co3 + x_h*v_h + x_oh*v_oh + x_ca*v_ca))/v_h2o ;

    /* solides */
    n_caco3    = N_CaCO3(i) ;
    n_caoh2    = N_CaOH2n(i) + dt*DN_CaOH2SDT(i) ;
   /*if(n_caoh2 < 0.) n_caoh2 = 0. ;*/
    n_csh      = N_CSHn(i)  + dt*DN_CSHSDT(i) ;
    if(n_csh < 0.) n_csh = 0. ;
    n_caco3csh = 3*(n_csh0 - n_csh) ;
    n_gel      = (n_csh0 - n_csh) ;
    
    if(x_co2 <= 0. || x_oh <= 0. || x_h2o <= 0. || x_hco3 <= 0.) {
      printf("\n\
en x    = %e\n\
x_co2   = %e\n\
x_oh    = %e\n\
x_h2o   = %e\n\
x_hco3  = %e\n\
n_caco3 = %e\n",x[i][0],x_co2,x_oh,x_h2o,x_hco3,n_caco3) ;
      return(1) ;
    }

    /* porosite */
    phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;
   /*  phi = (phii-dv_caoh2*n_caco3-dv_csh*(n_csh0-N_CSHn(i)))/(1+dv_csh*dt*s_l*x_co2*T_csh); */

    /* contenus molaires */
    n_co2   = phi*s_g*x_co2 ;
    n_oh    = phi*s_l*x_oh ;
    n_h2o   = phi*s_l*x_h2o ;
    n_hco3  = phi*s_l*x_hco3 ;
    n_h2co3 = phi*s_l*x_h2co3 ;
    n_co3   = phi*s_l*x_co3 ;
    n_h     = phi*s_l*x_h ;
    n_ca    = phi*s_l*x_ca ;

    /* contenus atomiques */
    N_C(i)  = n_co2 + n_h2co3 + n_hco3 + n_co3 + n_caco3 + n_caco3csh ;
    N_O(i)  = 0.5*n_hco3 + n_co3 + 0.5*n_oh - 0.5*n_h + n_caco3 + n_caoh2 + n_caco3csh + 4*n_gel + 7*n_csh ;
    N_H(i)  = 2*n_h2co3 + n_hco3 + n_h + n_oh + 2*n_h2o + 2*n_caoh2 + 6*n_gel + 6*n_csh ;
    N_Ca(i) = n_ca + n_caoh2 + n_caco3 + n_caco3csh + 3*n_csh ;

    /* cinetique */
    N_k(i)  = n_hco3 + n_co3 + n_caco3 ;
    XI(i)   = phi*s_l*a_1*(x_oh*x_h2co3 - k_1*x_hco3) ;

    /* electroneutralite */
    N_q(i)     = z_h*x_h + z_oh*x_oh + z_ca*x_ca + z_hco3*x_hco3 + z_co3*x_co3 ;
    /* contenus solides */
    N_CaOH2(i) = n_caoh2 ;
    N_CSH(i)   = n_csh ;
  }


  /* Gradients */
  dx        = x[1][0] - x[0][0] ;
  grd_p_l   = (P_l(1) - P_l(0))/dx ;
  grd_co2   = (X_CO2(1) - X_CO2(0))/dx ;
  grd_ca    = (k_ca/k_co3)*(1/(X_OH[1]*X_HCO3(1)) - 1/(X_OH[0]*X_HCO3(0)))/dx ;
  grd_oh    = (X_OH[1] - X_OH[0])/dx ;
  grd_h     = (k_e/X_OH[1] - k_e/X_OH[0])/dx ;
  grd_h2co3 = k_h*(X_CO2(1) - X_CO2(0))/dx ;
  grd_hco3  = (X_HCO3(1) - X_HCO3(0))/dx ;
  grd_co3   = k_co3*(X_HCO3(1)*X_OH[1] - X_HCO3(0)*X_OH[0])/dx ;
  grd_psi   = (PSI(1) - PSI(0))/dx ;

  /* flux */
  w_ca    = - KD_Ca*grd_p_l    - KF_Ca*grd_ca     - Kpsi_Ca*grd_psi ;
  w_h     = - KD_H*grd_p_l     - KF_H*grd_h       - Kpsi_H*grd_psi ;
  w_oh    = - KD_OH*grd_p_l    - KF_OH*grd_oh     - Kpsi_OH*grd_psi ;
  w_hco3  = - KD_HCO3*grd_p_l  - KF_HCO3*grd_hco3 - Kpsi_HCO3*grd_psi ;
  w_co3   = - KD_CO3*grd_p_l   - KF_CO3*grd_co3   - Kpsi_CO3*grd_psi ;
  w_h2co3 = - KD_H2CO3*grd_p_l - KF_H2CO3*grd_h2co3 ;
  w_co2   =                    - KF_CO2*grd_co2 ;
  w_h2o   = - KD_H2O*grd_p_l   + M_Ca/M_H2O*KF_Ca*grd_ca          \
                               + M_H/M_H2O*KF_H*grd_h             \
                               + M_OH/M_H2O*KF_OH*grd_oh          \
                               + M_HCO3/M_H2O*KF_HCO3*grd_hco3    \
                               + M_CO3/M_H2O*KF_CO3*grd_co3       \
                               + M_H2CO3/M_H2O*KF_H2CO3*grd_h2co3 \
                                                  - Kpsi_H2O*grd_psi ;

  W_C     = w_co2 + w_h2co3 + w_hco3 + w_co3 ;
  W_O     = 0.5*w_hco3 + w_co3 + 0.5*w_oh - 0.5*w_h  ;
  W_H     = 2*w_h2co3 + w_hco3 + w_h + w_oh + 2*w_h2o ;
  W_Ca    = w_ca ;
  W_k     = w_hco3 + w_co3 ;

  return(0) ;

#undef X_CO2
#undef N_CaCO3
#undef P_l
#undef X_HCO3
#undef PSI

#undef N_C
#undef N_O
#undef N_H
#undef N_Ca
#undef N_k
#undef N_CaOH2
#undef W_C
#undef W_O
#undef W_H
#undef W_Ca
#undef W_k
#undef XI
#undef N_CSH
#undef N_q

#undef N_CaOH2n
#undef N_CSHn

#undef KD_Ca
#undef KD_OH
#undef KD_H
#undef KD_H2CO3
#undef KD_HCO3
#undef KD_CO3
#undef KD_H2O
#undef KF_CO2
#undef KF_Ca
#undef KF_OH
#undef KF_H
#undef KF_H2CO3
#undef KF_HCO3
#undef KF_CO3
#undef Kpsi_Ca
#undef Kpsi_OH
#undef Kpsi_H
#undef Kpsi_HCO3
#undef Kpsi_CO3
#undef Kpsi_H2O

#undef DN_CSHSDT
#undef DN_CaOH2SDT
}


int mx45(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *k,elem_t el,int dim,geom_t geom,double dt,double t)
/* Matrice (k) */
{
#define X_CO2(n)   (u_1[(n)][I_CO2])
#define N_CaCO3(n) (u_1[(n)][I_CaCO3])
#define P_l(n)     (u_1[(n)][I_P_l])
#define X_HCO3(n)  (u_1[(n)][I_HCO3])
#define PSI(n)     (u_1[(n)][I_psi])

#define N_CaOH2(n) (f_1[(17+n)])
#define N_CSH(n)   (f_1[(19+n)])

#define N_CaOH2n(n) (f_n[(17+n)])
#define N_CSHn(n)   (f_n[(19+n)])

#define KD_Ca      (va[(0)])
#define KD_OH      (va[(1)])
#define KD_H       (va[(2)])
#define KD_H2CO3   (va[(3)])
#define KD_HCO3    (va[(4)])
#define KD_CO3     (va[(5)])
#define KD_H2O     (va[(6)])

#define KF_CO2     (va[(7)])
#define KF_Ca      (va[(8)])
#define KF_OH      (va[(9)])
#define KF_H       (va[(10)])
#define KF_H2CO3   (va[(11)])
#define KF_HCO3    (va[(12)])
#define KF_CO3     (va[(13)])

#define Kpsi_Ca    (va[(14)])
#define Kpsi_OH    (va[(15)])
#define Kpsi_H     (va[(16)])
#define Kpsi_HCO3  (va[(17)])
#define Kpsi_CO3   (va[(18)])
#define Kpsi_H2O   (va[(19)])

#define K(i,j)    (k[(i)*2*NEQ+(j)])
  double x_co2,x_h2co3,x_hco3,x_co3,x_oh,x_h,x_h2o,x_ca ;
  double n_caco3,n_caoh2,n_csh,n_caco3csh ;
  double s_l,s_g,p_c,p_l,xi ;
  double trf_co2,trf_ca,trf_h,trf_oh,trf_h2co3,trf_hco3,trf_co3,tr ;
  double tre_ca,tre_h,tre_oh,tre_hco3,tre_co3,tre_h2o ;
  double trd_h2co3,trd_hco3,trd_co3,trd_ca,trd_oh,trd_h,trd_h2o ;
  double phi ;
  double dphisdn_caco3 ;
  double ds_lsdp_l,ds_lsdp_c ;
  double dx_ohsdx_hco3[2],dx_hsdx_hco3[2],dx_co3sdx_hco3[2],dx_casdx_hco3[2] ;
  double dx_h2co3sdx_co2[2] ;
  double dx_h2osdx_co2[2],dx_h2osdx_hco3[2] ;
  double dxisdx_co2,dxisdx_hco3 ;
  double dx,xm ;
  double volume[2],surf ;
  int    i,j ;
  double zero = 0.,un = 1.,deux = 2. ;
  double c[2] ;
  /*
    Initialisation 
  */
  for(i=0;i<4*NEQ*NEQ;i++) k[i] = zero ;

  if(el.dim < dim) return(0) ;
  
  /*
    Donnees 
  */
  k_h     = el.mat->pr[pm("K_henry")] ;
  k_ca    = el.mat->pr[pm("K_ca")] ;
  k_co3   = el.mat->pr[pm("K_co3")] ;
  k_e     = el.mat->pr[pm("K_eau")] ;
  phii    = el.mat->pr[pm("porosite")] ;
  k_int   = el.mat->pr[pm("k_int")] ;
  mu_l    = el.mat->pr[pm("mu_l")] ;
  d_co2   = el.mat->pr[pm("D_co2")] ;
  d_ca    = el.mat->pr[pm("D_ca")] ;
  d_oh    = el.mat->pr[pm("D_oh")] ;
  d_h     = el.mat->pr[pm("D_h")] ;
  d_h2co3 = el.mat->pr[pm("D_h2co3")] ;
  d_hco3  = el.mat->pr[pm("D_hco3")] ;
  d_co3   = el.mat->pr[pm("D_co3")] ;
  v_h2co3 = el.mat->pr[pm("V_h2co3")] ;
  v_hco3  = el.mat->pr[pm("V_hco3")] ;
  v_co3   = el.mat->pr[pm("V_co3")] ;
  v_h     = el.mat->pr[pm("V_h")] ;
  v_oh    = el.mat->pr[pm("V_oh")] ;
  v_h2o   = el.mat->pr[pm("V_h2o")] ;
  v_ca    = el.mat->pr[pm("V_ca")] ;
  a_1     = el.mat->pr[pm("A_1")] ;
  k_1     = el.mat->pr[pm("K_1")] ;
  a_2     = el.mat->pr[pm("A_2")] ;
  k_2     = el.mat->pr[pm("K_2")] ;
  c_2     = el.mat->pr[pm("C_2")] ;
  n_caoh20 = el.mat->pr[pm("N_CaOH2")] ;
  T_csh   = el.mat->pr[pm("T_csh")] ;
  n_csh0  = el.mat->pr[pm("n_csh0")] ;
  v_csh   = el.mat->pr[pm("V_csh")] ;
  v_caoh2 = el.mat->pr[pm("V_caoh2")] ;
  v_caco3 = el.mat->pr[pm("V_caco3")] ;

  /*
    CALCUL DE volume ET DE surf 
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == AXIS) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == AXIS) surf = deux*M_PI*xm ; else surf = un ;
  /*
    termes d'accumulation
  */
  for(i=0;i<2;i++) {
    j = i*NEQ ;

    p_l     = P_l(i) ;
    p_c     = p_g - p_l ;
    s_l     = courbe(p_c,el.mat->cb[0]) ;
    s_g     = un - s_l ;

    /* molarites */
    x_co2   = X_CO2(i) ;
    x_hco3  = X_HCO3(i) ;

    x_oh    = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;
    x_h2co3 = k_h*x_co2 ;
    x_co3   = k_co3*x_oh*x_hco3 ;
    x_h     = k_e/x_oh ;
    x_ca    = k_ca/x_co3 ;
    x_h2o   = (un - (x_h2co3*v_h2co3 + x_hco3*v_hco3 + x_co3*v_co3 + x_h*v_h + x_oh*v_oh + x_ca*v_ca))/v_h2o ;

    /* solides */
    n_caco3    = N_CaCO3(i) ;
    n_caoh2    = N_CaOH2(i) ;
    n_csh      = N_CSH(i) ;
    n_caco3csh = 3*(n_csh0 - n_csh) ;

   /* if(n_caoh2 > 0.) a_2 = el.mat->pr[pm("A_2")] ; else a_2 = 0. ;*/
    if(n_csh > 0.) T_csh = el.mat->pr[pm("T_csh")] ; else T_csh = 0. ;

    xi      = a_1*(x_oh*x_h2co3 - k_1*x_hco3) ;
     
    /* porosite */
    phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;


    /* derivees */
    ds_lsdp_c = dcourbe(p_c,el.mat->cb[0]) ;
    ds_lsdp_l = -ds_lsdp_c ;

    dx_h2co3sdx_co2[i] = k_h ;

    dx_ohsdx_hco3[i]   = dconcentration_oh(x_hco3,k_e,k_co3,k_ca) ;

    dx_co3sdx_hco3[i]  = k_co3*(x_oh + x_hco3*dx_ohsdx_hco3[i]) ;

    dx_hsdx_hco3[i]    = - x_h/x_oh*dx_ohsdx_hco3[i] ;

    dx_casdx_hco3[i]   = - x_ca/x_co3*dx_co3sdx_hco3[i] ;

    dx_h2osdx_co2[i]   = -(v_h2co3*dx_h2co3sdx_co2[i])/v_h2o ;
    dx_h2osdx_hco3[i]  = -(v_hco3 + v_co3*dx_co3sdx_hco3[i] + v_oh*dx_ohsdx_hco3[i] + v_h*dx_hsdx_hco3[i] + v_ca*dx_casdx_hco3[i])/v_h2o ;
    
    dphisdn_caco3      = -v_caco3 ;

    dxisdx_co2         =  a_1*x_oh*dx_h2co3sdx_co2[i] ;
    dxisdx_hco3        =  a_1*(x_h2co3*dx_ohsdx_hco3[i] - k_1) ;
    
    /*
      Conservation de C (carbone) : (n_C1 - n_Cn) + dt * div(w_C) = 0
    */
    K(E_C+j,I_P_l+j)   += volume[i]*phi*ds_lsdp_l*(-x_co2 + x_h2co3 + x_hco3 + x_co3) ;
    K(E_C+j,I_CO2+j)   += volume[i]*phi*(s_g + s_l*dx_h2co3sdx_co2[i]) ;
    K(E_C+j,I_HCO3+j)  += volume[i]*phi*s_l*(un + dx_co3sdx_hco3[i]) ;
    K(E_C+j,I_CaCO3+j) += volume[i]*(dphisdn_caco3*(s_g*x_co2 + s_l*(x_h2co3 + x_hco3 + x_co3)) + un) ;

    /*
      Conservation de O (oxygene)  : (n_O1 - n_On) + dt * div(w_O) = 0
    */
    K(E_O+j,I_P_l+j)   += volume[i]*phi*ds_lsdp_l*(0.5*x_hco3 + x_co3 + 0.5*x_oh - 0.5*x_h) ;
    K(E_O+j,I_HCO3+j)  += volume[i]*phi*s_l*(0.5 + dx_co3sdx_hco3[i] + 0.5*dx_ohsdx_hco3[i] - 0.5*dx_hsdx_hco3[i]) ;
    K(E_O+j,I_CaCO3+j) += volume[i]*(un + dphisdn_caco3*s_l*(0.5*x_hco3 + x_co3 + 0.5*x_oh - 0.5*x_h)) ;

    /*
      Conservation de H (hydrogene) : (n_H1 - n_Hn) + dt * div(w_H) = 0
    */
    K(E_H+j,I_P_l+j)   += volume[i]*phi*ds_lsdp_l*(2*x_h2co3 + x_hco3 + x_h + x_oh + 2*x_h2o) ;
    K(E_H+j,I_CO2+j)   += volume[i]*phi*s_l*(2*dx_h2co3sdx_co2[i] + 2*dx_h2osdx_co2[i]) ;
    K(E_H+j,I_HCO3+j)  += volume[i]*phi*s_l*(un + dx_hsdx_hco3[i] + dx_ohsdx_hco3[i] + 2*dx_h2osdx_hco3[i]) ;
    K(E_H+j,I_CaCO3+j) += volume[i]*dphisdn_caco3*s_l*(2*x_h2co3 + x_hco3 + x_h + x_oh + 2*x_h2o) ;

    /*
      Conservation de Ca (calcium) : (n_Ca1 - n_Can) + dt * div(w_Ca) = 0
    */
    K(E_Ca+j,I_P_l+j)   += volume[i]*phi*ds_lsdp_l*(x_ca) ;
    K(E_Ca+j,I_HCO3+j)  += volume[i]*phi*s_l*(dx_casdx_hco3[i]) ;
    K(E_Ca+j,I_CaCO3+j) += volume[i]*(dphisdn_caco3*s_l*(x_ca) + un) ;

    /*
      Cinetique 1 : (n_k11 - n_k1n) + dt * div(W_k) - dt * XI = 0
    */
    K(E_k+j,I_P_l+j)   += volume[i]*phi*ds_lsdp_l*(x_hco3 + x_co3 - dt*xi) ;
    K(E_k+j,I_CO2+j)   += volume[i]*phi*s_l*(-dt*dxisdx_co2) ;
    K(E_k+j,I_HCO3+j)  += volume[i]*phi*s_l*(un + dx_co3sdx_hco3[i] - dt*dxisdx_hco3) ;
    K(E_k+j,I_CaCO3+j) += volume[i]*(dphisdn_caco3*s_l*(x_co3 + x_hco3 - dt*xi) + un) ;
  }

  /* termes d'ecoulement */
  tr        = dt*surf/dx ;

  trd_h2co3 = tr*KD_H2CO3 ;
  trd_hco3  = tr*KD_HCO3 ;
  trd_co3   = tr*KD_CO3 ;
  trd_oh    = tr*KD_OH ;
  trd_h     = tr*KD_H ;
  trd_ca    = tr*KD_Ca ;
  trd_h2o   = tr*KD_H2O ;

  trf_co2   = tr*KF_CO2 ;
  trf_h2co3 = tr*KF_H2CO3 ;
  trf_hco3  = tr*KF_HCO3 ;
  trf_co3   = tr*KF_CO3 ;
  trf_ca    = tr*KF_Ca ;
  trf_oh    = tr*KF_OH ;
  trf_h     = tr*KF_H ;

  tre_hco3  = tr*Kpsi_HCO3 ;
  tre_co3   = tr*Kpsi_CO3 ;
  tre_ca    = tr*Kpsi_Ca ;
  tre_oh    = tr*Kpsi_OH ;
  tre_h     = tr*Kpsi_H ;
  
  /*
    Conservation de C (carbone) : (n_C1 - n_Cn) + dt * div(w_C) = 0
  */
  for(i=0;i<2;i++){
    c[i] = trd_h2co3 + trd_hco3 + trd_co3 ;
  }
  K(E_C,I_P_l)          += + c[0] ;
  K(E_C,I_P_l+NEQ)      += - c[1] ;
  K(E_C+NEQ,I_P_l)      += - c[0] ;
  K(E_C+NEQ,I_P_l+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = trf_co2 + trf_h2co3*dx_h2co3sdx_co2[i] ;
  }
  K(E_C,I_CO2)          += + c[0] ;
  K(E_C,I_CO2+NEQ)      += - c[1] ;
  K(E_C+NEQ,I_CO2)      += - c[0] ;
  K(E_C+NEQ,I_CO2+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = trf_hco3 + trf_co3*dx_co3sdx_hco3[i] ;
  }
  K(E_C,I_HCO3)         += + c[0] ;
  K(E_C,I_HCO3+NEQ)     += - c[1] ;
  K(E_C+NEQ,I_HCO3)     += - c[0] ;
  K(E_C+NEQ,I_HCO3+NEQ) += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = tre_hco3 + tre_co3 ;
  }
  K(E_C,I_psi)          += + c[0] ;
  K(E_C,I_psi+NEQ)      += - c[1] ;
  K(E_C+NEQ,I_psi)      += - c[0] ;
  K(E_C+NEQ,I_psi+NEQ)  += + c[1] ;

  /*
    Conservation de O (oxygene)  : (n_O1 - n_On) + dt * div(w_O) = 0
  */
  for(i=0;i<2;i++){
    c[i] = 0.5*trd_hco3 + trd_co3 + 0.5*trd_oh - 0.5*trd_h ;
  }
  K(E_O,I_P_l)          += + c[0] ;
  K(E_O,I_P_l+NEQ)      += - c[1] ;
  K(E_O+NEQ,I_P_l)      += - c[0] ;
  K(E_O+NEQ,I_P_l+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = 0.5*trf_hco3 + trf_co3*dx_co3sdx_hco3[i] + 0.5*trf_oh*dx_ohsdx_hco3[i] - 0.5*trf_h*dx_hsdx_hco3[i] ;
  }
  K(E_O,I_HCO3)         += + c[0] ;
  K(E_O,I_HCO3+NEQ)     += - c[1] ;
  K(E_O+NEQ,I_HCO3)     += - c[0] ;
  K(E_O+NEQ,I_HCO3+NEQ) += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = 0.5*tre_hco3 + tre_co3 + 0.5*tre_oh - 0.5*tre_h ;
  }
  K(E_O,I_psi)          += + c[0] ;
  K(E_O,I_psi+NEQ)      += - c[1] ;
  K(E_O+NEQ,I_psi)      += - c[0] ;
  K(E_O+NEQ,I_psi+NEQ)  += + c[1] ;

  /*
    Conservation de H (hydrogene) : (n_H1 - n_Hn) + dt * div(w_H) = 0
  */
  for(i=0;i<2;i++){
    c[i] = 2*trd_h2co3 + trd_hco3 + trd_h + trd_oh + 2*trd_h2o ;
  }
  K(E_H,I_P_l)          += + c[0] ;
  K(E_H,I_P_l+NEQ)      += - c[1] ;
  K(E_H+NEQ,I_P_l)      += - c[0] ;
  K(E_H+NEQ,I_P_l+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = (2 - 2*M_H2CO3/M_H2O)*trf_h2co3*dx_h2co3sdx_co2[i] ;
  }
  K(E_H,I_CO2)          += + c[0] ;
  K(E_H,I_CO2+NEQ)      += - c[1] ;
  K(E_H+NEQ,I_CO2)      += - c[0] ;
  K(E_H+NEQ,I_CO2+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = (1 - 2*M_HCO3/M_H2O)*trf_hco3 + (1 - 2*M_OH/M_H2O)*trf_oh*dx_ohsdx_hco3[i] + (1 - 2*M_H/M_H2O)*trf_h*dx_hsdx_hco3[i] - 2*M_Ca/M_H2O*trf_ca*dx_casdx_hco3[i] - 2*M_CO3/M_H2O*trf_co3*dx_co3sdx_hco3[i] ;
  }
  K(E_H,I_HCO3)         += + c[0] ;
  K(E_H,I_HCO3+NEQ)     += - c[1] ;
  K(E_H+NEQ,I_HCO3)     += - c[0] ;
  K(E_H+NEQ,I_HCO3+NEQ) += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = tre_hco3 + tre_h + tre_oh + 2*tre_h2o ;
  }
  K(E_H,I_psi)          += + c[0] ;
  K(E_H,I_psi+NEQ)      += - c[1] ;
  K(E_H+NEQ,I_psi)      += - c[0] ;
  K(E_H+NEQ,I_psi+NEQ)  += + c[1] ;
  
  /*
    Conservation de Ca (calcium) : (n_Ca1 - n_Can) + dt * div(w_Ca) = 0
  */
  for(i=0;i<2;i++){
    c[i] = trd_ca ;
  }
  K(E_Ca,I_P_l)          += + c[0] ;
  K(E_Ca,I_P_l+NEQ)      += - c[1] ;
  K(E_Ca+NEQ,I_P_l)      += - c[0] ;
  K(E_Ca+NEQ,I_P_l+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = trf_ca*dx_casdx_hco3[i] ;
  }
  K(E_Ca,I_HCO3)         += + c[0] ;
  K(E_Ca,I_HCO3+NEQ)     += - c[1] ;
  K(E_Ca+NEQ,I_HCO3)     += - c[0] ;
  K(E_Ca+NEQ,I_HCO3+NEQ) += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = tre_ca ;
  }
  K(E_Ca,I_psi)          += + c[0] ;
  K(E_Ca,I_psi+NEQ)      += - c[1] ;
  K(E_Ca+NEQ,I_psi)      += - c[0] ;
  K(E_Ca+NEQ,I_psi+NEQ)  += + c[1] ;
  
  /*
    Cinetique 1 : (n_k1 - n_kn) + dt * div(W_k) - dt * XI = 0
  */
  for(i=0;i<2;i++){
    c[i] = trd_hco3 + trd_co3 ;
  }
  K(E_k,I_P_l)          += + c[0] ;
  K(E_k,I_P_l+NEQ)      += - c[1] ;
  K(E_k+NEQ,I_P_l)      += - c[0] ;
  K(E_k+NEQ,I_P_l+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = trf_hco3 + trf_co3*dx_co3sdx_hco3[i] ;
  }
  K(E_k,I_HCO3)          += + c[0] ;
  K(E_k,I_HCO3+NEQ)      += - c[1] ;
  K(E_k+NEQ,I_HCO3)      += - c[0] ;
  K(E_k+NEQ,I_HCO3+NEQ)  += + c[1] ;

  for(i=0;i<2;i++){
    c[i] = tre_hco3 + tre_co3 ;
  }
  K(E_k,I_psi)           += + c[0] ;
  K(E_k,I_psi+NEQ)       += - c[1] ;
  K(E_k+NEQ,I_psi)       += - c[0] ;
  K(E_k+NEQ,I_psi+NEQ)   += + c[1] ;

  return(0) ;

#undef X_CO2
#undef X_HCO3
#undef N_CaCO3
#undef P_l
#undef PSI

#undef N_CaOH2
#undef N_CSH

#undef N_CaOH2n
#undef N_CSHn

#undef KD_Ca
#undef KD_OH
#undef KD_H
#undef KD_H2CO3
#undef KD_HCO3
#undef KD_CO3
#undef KD_H2O
#undef KF_CO2
#undef KF_Ca
#undef KF_OH
#undef KF_H
#undef KF_H2CO3
#undef KF_HCO3
#undef KF_CO3
#undef Kpsi_Ca
#undef Kpsi_OH
#undef Kpsi_H
#undef Kpsi_HCO3
#undef Kpsi_CO3
#undef Kpsi_H2O


#undef K
}


void rs45(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,geom_t geom,double dt,double t)
/* Residu (r) */
{
#define N_C1(n)    (f_1[(n)])
#define N_O1(n)    (f_1[(2+n)])
#define N_H1(n)    (f_1[(4+n)])
#define N_Ca1(n)   (f_1[(6+n)])
#define N_k1(n)    (f_1[(8+n)])
#define XI(n)      (f_1[(10+n)])
#define W_C        (f_1[12])
#define W_O        (f_1[13])
#define W_H        (f_1[14])
#define W_Ca       (f_1[15])
#define W_k        (f_1[16])
#define N_q1(n)    (f_1[(21+n)])


#define N_Cn(n)    (f_n[(n)])
#define N_On(n)    (f_n[(2+n)])
#define N_Hn(n)    (f_n[(4+n)])
#define N_Can(n)   (f_n[(6+n)])
#define N_kn(n)    (f_n[(8+n)])

#define R(n,i)    (r[(n)*NEQ+(i)])
  double dx ,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;
  /*
    INITIALISATION DU RESIDU
  */
  for(i=0;i<NEQ*2;i++) r[i] = zero ;

  if(el.dim < dim) return ;
  /*
    CALCUL DE volume ET DE surf
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == AXIS) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == AXIS) surf = deux*M_PI*xm ; else surf = un ;
  /*
    Conservation de C (carbone) : (n_C1 - n_Cn) + dt * div(w_C) = 0
  */
  R(0,E_C) -= volume[0]*(N_C1(0) - N_Cn(0)) + dt*surf*W_C ;
  R(1,E_C) -= volume[1]*(N_C1(1) - N_Cn(1)) - dt*surf*W_C ;
  /*
    Conservation de O (oxygene)  : (n_O1 - n_On) + dt * div(w_O) = 0
  */
  R(0,E_O) -= volume[0]*(N_O1(0) - N_On(0)) + dt*surf*W_O ;
  R(1,E_O) -= volume[1]*(N_O1(1) - N_On(1)) - dt*surf*W_O ;
  /*
    Conservation de H (hydrogene) : (n_H1 - n_Hn) + dt * div(w_H) = 0
  */
  R(0,E_H) -= volume[0]*(N_H1(0) - N_Hn(0)) + dt*surf*W_H ;
  R(1,E_H) -= volume[1]*(N_H1(1) - N_Hn(1)) - dt*surf*W_H ;
  /*
    Conservation de Ca (calcium) : (n_Ca1 - n_Can) + dt * div(w_Ca) = 0
  */
  R(0,E_Ca) -= volume[0]*(N_Ca1(0) - N_Can(0)) + dt*surf*W_Ca ;
  R(1,E_Ca) -= volume[1]*(N_Ca1(1) - N_Can(1)) - dt*surf*W_Ca ;
  /*
    Cinetique 1 : (n_k11 - n_k1n) + dt * div(W_k) - dt * XI = 0
  */
  R(0,E_k) -= volume[0]*(N_k1(0) - N_kn(0) - dt*XI(0)) + dt*surf*W_k ;
  R(1,E_k) -= volume[1]*(N_k1(1) - N_kn(1) - dt*XI(1)) - dt*surf*W_k ;

#undef N_C1
#undef N_O1
#undef N_H1
#undef N_Ca1
#undef N_k1
#undef W_C
#undef W_O
#undef W_H
#undef W_Ca
#undef W_k
#undef XI
#undef N_q1

#undef N_Cn
#undef N_On
#undef N_Hn
#undef N_Can
#undef N_kn

#undef R
}


int so45(double **x,double **u,double *f,double *va,double *s,resu_t *r,elem_t el,int dim,geom_t geom,double t)
/* Les valeurs exploitees (s) */
{
#define X_CO2(n)   (u[(n)][I_CO2])
#define N_CaCO3(n) (u[(n)][I_CaCO3])
#define P_l(n)     (u[(n)][I_P_l])
#define X_HCO3(n)  (u[(n)][I_HCO3])
#define PSI(n)     (u[(n)][I_psi])

#define N_C(n)     (f[(n)])
#define N_O(n)     (f[(2+n)])
#define N_H(n)     (f[(4+n)])
#define N_Ca(n)    (f[(6+n)])
#define N_k(n)     (f[(8+n)])
#define XI(n)      (f[(10+n)])
#define W_C        (f[12])
#define W_O        (f[13])
#define W_H        (f[14])
#define W_Ca       (f[15])
#define W_k        (f[16])
#define N_CaOH2(n) (f[(17+n)])
#define N_CSH(n)   (f[(19+n)])

#define KD_Ca      (va[(0)])
#define KD_OH      (va[(1)])
#define KD_H       (va[(2)])
#define KD_H2CO3   (va[(3)])
#define KD_HCO3    (va[(4)])
#define KD_CO3     (va[(5)])
#define KD_H2O     (va[(6)])

#define KF_CO2     (va[(7)])
#define KF_Ca      (va[(8)])
#define KF_OH      (va[(9)])
#define KF_H       (va[(10)])
#define KF_H2CO3   (va[(11)])
#define KF_HCO3    (va[(12)])
#define KF_CO3     (va[(13)])

#define Kpsi_Ca    (va[(14)])
#define Kpsi_OH    (va[(15)])
#define Kpsi_H     (va[(16)])
#define Kpsi_HCO3  (va[(17)])
#define Kpsi_CO3   (va[(18)])
#define Kpsi_H2O   (va[(19)])

  double x_co2,x_h2co3,x_hco3,x_co3,x_oh,x_h,x_h2o,x_ca,X_OH[2] ;
  double grd_ca,grd_oh,grd_h,grd_h2co3,grd_hco3,grd_co3,grd_psi ;
  double w_ca,w_h,w_oh,w_hco3,w_co3,w_h2co3,w_co2,w_h2o ;
  double n_caco3,n_caoh2,n_csh,n_caco3csh ;
  double grd_co2,grd_p_l,xi ;
  double s_l,p_c,p_l,phi ;
  double dx ;
  int    i,j,nso ;
  double h_s[MAX_NOEUDS],dh_s[3*MAX_NOEUDS] ;
  double zero = 0.,un = 1.,deux = 2. ;

  if(el.dim < dim) return(0) ;
  
  /*
    Donnees
  */
  k_h     = el.mat->pr[pm("K_henry")] ;
  k_ca    = el.mat->pr[pm("K_ca")] ;
  k_co3   = el.mat->pr[pm("K_co3")] ;
  k_e     = el.mat->pr[pm("K_eau")] ;
  phii     = el.mat->pr[pm("porosite")] ;
  k_int   = el.mat->pr[pm("k_int")] ;
  mu_l    = el.mat->pr[pm("mu_l")] ;
  d_co2   = el.mat->pr[pm("D_co2")] ;
  v_h2co3 = el.mat->pr[pm("V_h2co3")] ;
  v_hco3  = el.mat->pr[pm("V_hco3")] ;
  v_co3   = el.mat->pr[pm("V_co3")] ;
  v_h     = el.mat->pr[pm("V_h")] ;
  v_oh    = el.mat->pr[pm("V_oh")] ;
  v_h2o   = el.mat->pr[pm("V_h2o")] ;
  v_ca    = el.mat->pr[pm("V_ca")] ;
  a_1     = el.mat->pr[pm("A_1")] ;
  k_1     = el.mat->pr[pm("K_1")] ;
  a_2     = el.mat->pr[pm("A_2")] ;
  k_2     = el.mat->pr[pm("K_2")] ;
  c_2     = el.mat->pr[pm("C_2")] ;
  n_caoh20  = el.mat->pr[pm("N_CaOH2")] ;
  T_csh       = el.mat->pr[pm("T_csh")] ;
  n_csh0  = el.mat->pr[pm("n_csh0")] ;
  v_csh   = el.mat->pr[pm("V_csh")] ;
  v_caoh2 = el.mat->pr[pm("V_caoh2")] ;
  v_caco3 = el.mat->pr[pm("V_caco3")] ;

  /* initialisation */
  nso = 14 ;
  for(i=0;i<nso;i++) for(j=0;j<9;j++) r[i].v[j] = zero ;

  /* fonctions d'interpolation en s */
  fint_abs(dim,el.nn,x,s,el.dim,h_s,dh_s) ;

  /* pression */
  p_l    =  param(u,h_s,el.nn,I_P_l) ;
  /* saturation */
  p_c     = p_g - p_l ;
  s_l     = courbe(p_c,el.mat->cb[0]) ;
  /* molarites */
  x_co2  =  param(u,h_s,el.nn,I_CO2) ;
  x_hco3 =  param(u,h_s,el.nn,I_HCO3) ;

  x_oh    = concentration_oh(x_hco3,k_e,k_co3,k_ca) ;
  x_h2co3 = k_h*x_co2 ;
  x_co3   = k_co3*x_oh*x_hco3 ;
  x_h     = k_e/x_oh ;
  x_ca    = k_ca/x_co3 ;
  x_h2o   = (un - (x_h2co3*v_h2co3 + x_hco3*v_hco3 + x_co3*v_co3 + x_h*v_h + x_oh*v_oh + x_ca*v_ca))/v_h2o ;

  for(i=0;i<2;i++) X_OH[i] = concentration_oh(X_HCO3(i),k_e,k_co3,k_ca) ;

  /* cinetique */
  xi      = a_1*(x_oh*x_h2co3 - k_1*x_hco3) ;

  /* contenus solides */
  n_caco3    = (N_CaCO3(0) + N_CaCO3(1))/deux ;
  n_caoh2    = (N_CaOH2(0) + N_CaOH2(1))/deux ;
  n_csh      = (N_CSH(0)   + N_CSH(1))/2. ;
  n_caco3csh = 3*(n_csh0 - n_csh) ;

  /* porosite */
  phi = phii + v_caoh2*(n_caoh20 - n_caoh2) + v_csh*(n_csh0 - n_csh) + v_caco3*(-n_caco3) + v_caco3csh*(-n_caco3csh) ;

  /* Transferts */
  dx        = x[1][0] - x[0][0] ;
  grd_p_l   = (P_l(1) - P_l(0))/dx ;
  grd_co2   = (X_CO2(1) - X_CO2(0))/dx ;
  grd_ca    = (k_ca/k_co3)*(1/(X_OH[1]*X_HCO3(1)) - 1/(X_OH[0]*X_HCO3(0)))/dx ;
  grd_oh    = (X_OH[1] - X_OH[0])/dx ;
  grd_h     = (k_e/X_OH[1] - k_e/X_OH[0])/dx ;
  grd_h2co3 = k_h*(X_CO2(1) - X_CO2(0))/dx ;
  grd_hco3  = (X_HCO3(1) - X_HCO3(0))/dx ;
  grd_co3   = k_co3*(X_HCO3(1)*X_OH[1] - X_HCO3(0)*X_OH[0])/dx ;
  grd_psi   = (PSI(1) - PSI(0))/dx ;
  
  /* flux */
  w_ca    = - KD_Ca*grd_p_l    - KF_Ca*grd_ca     - Kpsi_Ca*grd_psi ;
  w_h     = - KD_H*grd_p_l     - KF_H*grd_h       - Kpsi_H*grd_psi ;
  w_oh    = - KD_OH*grd_p_l    - KF_OH*grd_oh     - Kpsi_OH*grd_psi ;
  w_hco3  = - KD_HCO3*grd_p_l  - KF_HCO3*grd_hco3 - Kpsi_HCO3*grd_psi ;
  w_co3   = - KD_CO3*grd_p_l   - KF_CO3*grd_co3   - Kpsi_CO3*grd_psi ;
  w_h2co3 = - KD_H2CO3*grd_p_l - KF_H2CO3*grd_h2co3 ;
  w_co2   =                    - KF_CO2*grd_co2 ;
  w_h2o   = - KD_H2O*grd_p_l   + M_Ca/M_H2O*KF_Ca*grd_ca          \
                               + M_H/M_H2O*KF_H*grd_h             \
                               + M_OH/M_H2O*KF_OH*grd_oh          \
                               + M_HCO3/M_H2O*KF_HCO3*grd_hco3    \
                               + M_CO3/M_H2O*KF_CO3*grd_co3       \
                               + M_H2CO3/M_H2O*KF_H2CO3*grd_h2co3 \
                                                  - Kpsi_H2O*grd_psi ;

  /* quantites exploitees */
  strcpy(r[0].text,"x_co2") ; r[0].n = 1 ;
  r[0].v[0] = x_co2 ;
  strcpy(r[1].text,"ph") ; r[1].n = 1 ;
  r[1].v[0] = 14 + log(x_oh)/log(10.) ;
  strcpy(r[2].text,"n_csh") ; r[2].n = 1 ;
  r[2].v[0] = n_csh ;
  strcpy(r[3].text,"porosite") ; r[3].n = 1 ;
  r[3].v[0] = phi ;
  strcpy(r[4].text,"n_caoh2") ; r[4].n = 1 ;
  r[4].v[0] = n_caoh2 ;
  strcpy(r[5].text,"x_ca") ; r[5].n = 1 ;
  r[5].v[0] = x_ca ;
  strcpy(r[6].text,"x_co3") ; r[6].n = 1 ;
  r[6].v[0] = x_co3 ;
  strcpy(r[7].text,"x_hco3") ; r[7].n = 1 ;
  r[7].v[0] = x_hco3 ;
  strcpy(r[8].text,"n_caco3") ; r[8].n = 1 ;
  r[8].v[0] = n_caco3 ;
  strcpy(r[9].text,"x_h") ; r[9].n = 1 ;
  r[9].v[0] = x_h ;
  strcpy(r[10].text,"x_ca") ; r[10].n = 1 ;
  r[10].v[0] = x_ca ;
  strcpy(r[11].text,"saturation") ; r[11].n = 1 ;
  r[11].v[0] = s_l ;
  strcpy(r[12].text,"grad_psi") ; r[12].n = 1 ;
  r[12].v[0] = grd_psi ;
  strcpy(r[13].text,"charge") ; r[13].n = 1 ;
  r[13].v[0] = z_ca*x_ca + z_h*x_h + z_oh*x_oh + z_hco3*x_hco3 + z_co3*x_co3 ;
  return(14) ;

#undef X_CO2
#undef N_CaCO3
#undef P_l
#undef X_HCO3
#undef PSI

#undef N_C
#undef N_O
#undef N_H
#undef N_Ca
#undef N_k
#undef W_C
#undef W_O
#undef W_H
#undef W_Ca
#undef W_k
#undef XI
#undef N_CaOH2
#undef N_CSH

#undef KD_Ca
#undef KD_OH
#undef KD_H
#undef KD_H2CO3
#undef KD_HCO3
#undef KD_CO3
#undef KD_H2O
#undef KF_CO2
#undef KF_Ca
#undef KF_OH
#undef KF_H
#undef KF_H2CO3
#undef KF_HCO3
#undef KF_CO3
#undef Kpsi_Ca
#undef Kpsi_OH
#undef Kpsi_H
#undef Kpsi_HCO3
#undef Kpsi_CO3
#undef Kpsi_H2O
}

#undef NEQ

#undef NVE
#undef NVI

#undef E_C
#undef E_O
#undef E_H
#undef E_Ca
#undef E_k

#undef I_CO2
#undef I_P_l
#undef I_CaCO3
#undef I_HCO3
#undef I_psi

#undef z_ca
#undef z_h
#undef z_oh
#undef z_hco3
#undef z_co3

#undef vcaco3csh

#undef M_Ca
#undef M_H2CO3
#undef M_HCO3
#undef M_CO3
#undef M_OH
#undef M_H
#undef M_H2O

#undef FARADAY
#undef RT

double concentration_oh(double x_hco3,double k_e,double k_co3,double k_ca)
{
  double a = 1 + 2*k_co3*x_hco3 ;
  double b = x_hco3 ;
  double c = -(k_e + 2*k_ca/(k_co3*x_hco3)) ;
  double d = b*b - 4*a*c ;
  if(d < 0.) arret("concentration_oh : d < 0") ;
  return(0.5*(-b + sqrt(d))/a) ;
}

double dconcentration_oh(double x_hco3,double k_e,double k_co3,double k_ca)
{
  double dx_hco3 = x_hco3*1.e-2 ;
  return((concentration_oh(x_hco3 + dx_hco3,k_e,k_co3,k_ca) - concentration_oh(x_hco3,k_e,k_co3,k_ca))/dx_hco3) ;
}
