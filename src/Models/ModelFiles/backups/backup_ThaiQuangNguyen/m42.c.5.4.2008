/*
	Modele (ancien 70): quatre especes ionique (Cl, Na, K, OH, H, Ca)
	Diffusion: Loi de Frick + Migration + reaction chimique (H2O = H+ + OH-; Ca(0H)2 = Ca+2OH)
	Isotherme de fixation: Langmuir
	D est calcule D_oh=D_cl/Do_cl*Do_oh
	reation chimique: 4 phases soilide (CH + C3A+SEL +Al(OH)3)
	METHODE DANGLA hahah.... AVEC MIGRATION
	Changement de microstructure
	Electroneutralisé
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include "../defs.h"
#include "../lib.h"

/* Macros */

#define TITLE "Chlorures dans les betons satures (T.Q. Nguyen)"

#define NEQ 	 (8)

#define E_Cl	 (0)
#define E_OH  	 (1)
#define E_Al	 (2)
#define E_Ca	 (3)
#define E_Na	 (4)
#define E_K 	 (5)
#define E_A  	 (6)
#define E_si  	 (7)

#define I_Cl     (0)
#define I_XP     (1)
#define I_XC  	 (2)
#define I_XF 	 (3)
#define I_Na     (4)
#define I_K  	 (5)
#define I_XA	 (6)
#define I_si	 (7)

/* valences */
#define z_cl   	 (-1.)
#define z_oh   	 (-1.)
#define z_na  	 (1.)
#define z_k    	 (1.)
#define z_h    	 (1.)
#define z_ca   	 (2.)
#define z_aloh4  (-1.)

/* coefficients de diffusion dans l'eau dilue*/
#define do_cl    (2.032e-9)
#define do_oh    (5.273e-9)
#define do_na    (1.334e-9)
#define do_k     (1.957e-9)
#define do_h     (9.310e-9)
#define do_ca    (0.792e-9)
#define do_aloh4 (0.542e-9)


/* constantes d'equilibre */
#define k_e      (1.35e-8)
#define k_p      (189.06)
#define k_c      (32.73)
#define k_f      (303.85)
#define k_a      (9.77e-2)

/* volumes molaires (m3/mole) */
#define v_caoh2  (33.21e-6)
#define v_c3ah6  (150.1e-6)
#define v_sel    (296.69e-6)
#define v_aloh3  (32.23e-6)

/* constantes physiques */
#define epsi_o 	 (8.854e-12) /* permeabilite electrique de l'eau */
#define F     	 (9.64846e4) /* Faraday */
#define R_g 	 (8.3143)    /* Gaz parfait */

#define s_oho    (1000.)

/* Fonctions */
static int    pm(char *s) ;
extern void   ecrit_courbe(char*) ;

/* Parametres */
static double phio,d_cl,s_chrf,s_c3arf,s_sfrf,s_aloh3rf,s_csh,RT,r_d,anpha,beta;
static double s_ch_o,s_c3a_o,s_sf_o,s_aloh3_o;

int pm(char *s)
{
  if(strcmp(s,"porosite") == 0) return (0) ;
  else if(strcmp(s,"D_Cl") == 0) return (1) ;
  else if(strcmp(s,"r_d") == 0) return (2) ;
  else if(strcmp(s,"T") == 0) return (3);
  else if(strcmp(s,"s_caoh2") == 0) return (4) ;
  else if(strcmp(s,"s_c3ah6") == 0) return (5) ;
  else if(strcmp(s,"s_sel") == 0) return (6) ;
  else if(strcmp(s,"s_aloh3") == 0) return (7) ;
  else if(strcmp(s,"s_csh") == 0) return (8) ;
  else if(strcmp(s,"anpha") == 0) return (9);
  else if(strcmp(s,"beta") == 0) return (10);
  else if(strcmp(s,"s_caoh2_o") == 0) return (11) ;
  else if(strcmp(s,"s_sel_o") == 0) return (12) ;
  else if(strcmp(s,"s_c3ah6_o") == 0) return (13) ;
  else if(strcmp(s,"s_aloh3_o") == 0) return (14) ;
  else { 
    printf("donnee \"%s\" non connue (pm42)\n",s) ; exit(0) ;
  }
}


int dm42(int dim,mate_t *mat,FILE *ficd)
/* Lecture des donnees materiaux dans le fichier ficd */
{
  int    i,nd,nc,n_solide;
  char   mot[MAX_MOT] ;
  char   line[MAX_LIGNE],*p ;

  if(dim > 1) arret("dm42 : dimension > 1 non prevue") ;

  mat->neq = NEQ ;
  strcpy(mat->eqn[E_Cl],"E_Cl") ;
  strcpy(mat->eqn[E_OH],"E_OH") ;
  strcpy(mat->eqn[E_Al],"E_Al") ;
  strcpy(mat->eqn[E_Ca],"E_Ca") ;
  strcpy(mat->eqn[E_Na],"E_Na") ;
  strcpy(mat->eqn[E_K],"E_K") ;
  strcpy(mat->eqn[E_A],"E_A") ;
  strcpy(mat->eqn[E_si],"E_si") ;

  strcpy(mat->inc[I_Cl],"c_cl") ;
  strcpy(mat->inc[I_XP],"xp") ;
  strcpy(mat->inc[I_XC],"xc") ;
  strcpy(mat->inc[I_XF],"xf") ;
  strcpy(mat->inc[I_Na],"c_na") ;
  strcpy(mat->inc[I_K],"c_k") ;
  strcpy(mat->inc[I_XA],"xa") ;
  strcpy(mat->inc[I_si],"si") ;

  n_solide =4;
  nd = 15;
  nc = 0;
  mat->n = nd ;
  mat->nc = 0 ;
  for(i=0;i<nd+nc-n_solide;i++) {
    if(!fgets(line,MAX_LIGNE,ficd)) arret("dmat (1) : erreur ou fin de fichier") ;
    sscanf(line," %[^= ] =",mot) ;
    p = strchr(line,'=') + 1 ;
    if(!strncmp(mot,"courbes",6)) {
      /*
      fscanf(ficd,"%s",nom) ; 
      fscanf(ficd,"%d",&n_pa) ;	
      for (j=0;j<n_pa;j++) fscanf(ficd,"%lf",para+j);
      if (n_pa!=0) ecrit_courbe(nom,n_pa,para);	
      lit_courbe(mat,nom) ;
      */
      ecrit_courbe(p);	
      lit_courbe(mat,line) ;
    } else sscanf(p,"%lf",mat->pr+pm(mot)) ;
  }
  return(mat->n) ;
}

int qm42(int dim,FILE *ficd)
/* Saisie des donnees materiaux */
{ 
  printf(TITLE) ;
  
  if(!ficd) return(NEQ) ;
  
  printf("\n\n\
Le systeme est forme de 8 equations :\n\
\t 1. Conservation de la masse de Cl (c_cl)\n\
\t 2. Conservation de la masse de OH (xp)\n\
\t 3. Conservation de la masse de Al (xc)\n\
\t 4. Conservation de la masse de Ca (xf)\n\
\t 5. Conservation de la masse de Na (c_na)\n\
\t 6. Conservation de la masse de K  (c_k)\n\
\t 7. Conservation de la masse de A  (xa)\n\
\t 8. Equilibre chimique (si)\n") ;

  
  printf("\n\
Exemple de donnees\n\n") ;

  fprintf(ficd,"porosite = 0.121 # Porosite\n") ;
  fprintf(ficd,"D_Cl = 2.6e-12   # Diffusion effective de Cl\n") ;
  fprintf(ficd,"r_d = 1.         # Rapport des tortuosites des anions et des cations\n") ;
  fprintf(ficd,"T = 293.         # Temperature\n") ;
  fprintf(ficd,"s_caoh2 = 1640.  # Contenu en CaOH2 \n") ;
  fprintf(ficd,"s_c3ah6 = 8.43   # Contenu en C3AH6 \n") ;
  fprintf(ficd,"s_sel = 50.      # Contenu en sel de Friedel (reference) \n") ;
  fprintf(ficd,"s_aloh3 = 10.    # Contenu en AlOH3 \n") ;
  fprintf(ficd,"s_csh = 635.     # Contenu en CSH \n") ;
  fprintf(ficd,"anpha =   0.12   # Coefficient de l'isotherme \n") ;
  fprintf(ficd,"beta = 2.66      # Coefficient de l'isotherme \n") ;
  
  return(NEQ) ;
}

void tb42(elem_t el,int dim,int geom,int *nv)
{
  nv[0] = 29 ; /* implicite */
  nv[1] = 15 ; /* explicite */
}


void ch42(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t,char_t cg)
/* Residu du aux chargements (r) */
{
}


void in42(double **x,double **u,double *f,double *va,elem_t el,int dim,int geom)
/* Initialise les variables du systeme (f,va) */ 
{
#define C_Cl(n)     (u[(n)][I_Cl])
#define XP(n)       (u[(n)][I_XP])
#define XC(n)       (u[(n)][I_XC])
#define XF(n)	    (u[(n)][I_XF])
#define C_Na(n)     (u[(n)][I_Na])
#define C_K(n)      (u[(n)][I_K])
#define XA(n)       (u[(n)][I_XA])
#define si(n)       (u[(n)][I_si])

#define N_Cl(n)     (f[(n)])
#define N_OH(n)     (f[(n+2)])
#define N_Na(n)     (f[(n+4)])
#define N_K(n)      (f[(n+6)])
#define N_Ca(n)     (f[(n+8)])
#define N_Al(n)     (f[(n+10)])
#define N_AlOH3(n)  (f[(n+12)])

#define W_Cl        (f[14])
#define W_OH        (f[15])
#define W_Na        (f[16])
#define W_K         (f[17])
#define W_Ca        (f[18])
#define W_Al        (f[19])

#define C_OH(n)     (f[(n+20)])
#define C_Ca(n)     (f[(n+22)])
#define C_AlOH4(n)  (f[(n+24)])

#define N_si(n)     (f[(n+26)])
#define W_PS        (f[28])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])
#define KF_Ca       (va[(5)])
#define KF_AlOH4    (va[(6)])

#define KM_Cl       (va[(7)])
#define KM_OH       (va[(8)])
#define KM_Na       (va[(9)])
#define KM_K        (va[(10)])
#define KM_H        (va[(11)])
#define KM_Ca       (va[(12)])
#define KM_AlOH4    (va[(13)])

#define KF_PS       (va[(14)])

  double c_cl,c_oh,c_na,c_k,c_h,c_ca,c_aloh4;
  double xc,yc,xp,yp,xf,yf,xa,ya;
  double grd_cl,grd_oh,grd_na,grd_k,grd_h,grd_ca,grd_aloh4,grd_si;
  double s_cl,s_ch,s_c3a,s_sf,s_aloh3,s_oh;
  double dx,phi;
  double top,ton,epsi,T;
  int    i ;
  double un = 1.,deux = 2. ;

  if(el.dim < dim) return ;

  /*
    Donnees
  */

  phio      = el.mat->pr[pm("porosite")] ;
  d_cl      = el.mat->pr[pm("D_Cl")] ;
  r_d       = el.mat->pr[pm("r_d")] ;
  T	    = el.mat->pr[pm("T")] ;

  s_chrf   = el.mat->pr[pm("s_caoh2")] ;
  s_c3arf  = el.mat->pr[pm("s_c3ah6")] ;
  s_sfrf   = el.mat->pr[pm("s_sel")] ;
  s_aloh3rf= el.mat->pr[pm("s_aloh3")] ;

  s_csh    = el.mat->pr[pm("s_csh")] ;
  anpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;

  RT = R_g*T;
  epsi = 0.0007*pow(T-273.15,2.)-0.3918*(T-273.15)+87.663;

  /* Contenus molaires */
  for(i=0;i<2;i++) {
    c_cl     = C_Cl(i) ;
    c_na     = C_Na(i) ;
    c_k      = C_K(i) ;
    xc       = XC(i);    yc	 = fabs(xc);				
    xp	     = XP(i);    yp	 = fabs(xp);
    xf	     = XF(i);    yf      = fabs(xf);
    xa       = XA(i);    ya      = fabs(xa);

    C_OH(i)   = k_p*(0.5*(xp-yp)+1.0)*pow(k_c*(0.5*(xc-yc)+1.0)/(k_f*(0.5*(xf-yf)+1.0)),2.)*c_cl; 	
    C_AlOH4(i)= pow(k_c*(0.5*(xc-yc)+1.0),4.0)/pow(k_p*(0.5*(xp-yp)+1.0)*k_f*(0.5*(xf-yf)+1.0),2.0)*c_cl;
    C_Ca(i)   = pow(k_f*(0.5*(xf-yf)+1.0)/(k_c*(0.5*(xc-yc)+1.0)),4.0)/pow(c_cl,2.);

    c_oh      = C_OH(i);        
    c_h	      = k_e/c_oh;  
    c_ca      = C_Ca(i);  
    c_aloh4   = C_AlOH4(i); 

    s_ch   = 0.5*(xp+yp)*s_chrf;	 		
    s_c3a  = 0.5*(xc+yc)*s_c3arf;		
    s_sf   = 0.5*(xf+yf)*s_sfrf;
    s_aloh3 =0.5*(xa+ya)*s_aloh3rf; 

    el.mat->pr[pm("s_caoh2_o")]        = s_ch;
    el.mat->pr[pm("s_sel_o")]          = s_sf;
    el.mat->pr[pm("s_c3ah6_o")]        = s_c3a;
    el.mat->pr[pm("s_aloh3_o")]        = s_aloh3;

    s_ch_o      = el.mat->pr[pm("s_caoh2_o")] ;
    s_sf_o      = el.mat->pr[pm("s_sel_o")] ;
    s_c3a_o     = el.mat->pr[pm("s_c3ah6_o")] ;
    s_aloh3_o   = el.mat->pr[pm("s_aloh3_o")] ;
   	
    s_cl     = anpha*s_csh*c_cl*beta/(c_oh+beta*c_cl);
    s_oh   = s_oho - s_cl; 
    
    phi   = phio+(s_ch_o-s_ch)*v_caoh2+(s_sf_o-s_sf)*v_sel+(s_c3a_o-s_c3a)*v_c3ah6+(s_aloh3_o-s_aloh3)*v_aloh3;

    N_Cl(i)  = phi*c_cl + (s_cl+2*s_sf);
    N_OH(i)  = phi*(c_oh-c_h+4*c_aloh4) + (s_oh+2*s_ch+12*s_c3a+12*s_sf+3*s_aloh3);
    N_Na(i)  = phi*c_na;
    N_K(i)   = phi*c_k;
    N_Ca(i)  = phi*c_ca+(s_ch+3*s_c3a+4*s_sf);
    N_Al(i)  = phi*c_aloh4+(2*s_c3a+2*s_sf+s_aloh3);
    N_AlOH3(i)= pow(k_c*(0.5*(xc-yc)+1.0),2.0)/pow(k_p*(0.5*(xp-yp)+1.0),3.0)-k_a*(0.5*(xa-ya)+1.0);

    N_si(i) =  (c_cl*z_cl+c_oh*z_oh+c_na*z_na+c_k*z_k+c_h*z_h+c_ca*z_ca+c_aloh4*z_aloh4)*F;
  }

   /* Coefficient de transfert */

    c_cl     = (C_Cl(0)+C_Cl(1))/deux ;
    c_oh     = (C_OH(0) +C_OH(1))/deux ;
    c_na     = (C_Na(0)+C_Na(1))/deux ;
    c_k      = (C_K(0)+C_K(1))/deux ;
    c_ca     = (C_Ca(0)+C_Ca(1))/deux ;
    c_aloh4  = (C_AlOH4(0)+C_AlOH4(1))/deux ;
    c_h      = k_e/c_oh ;	

    ton = d_cl/do_cl;
    top =ton/r_d;
 
    KF_Cl  = ton*do_cl ;
    KF_OH  = ton*do_oh ;
    KF_Na  = top*do_na;
    KF_K   = top*do_k;
    KF_H   = top*do_h;
    KF_Ca  = top*do_ca;
    KF_AlOH4 = ton*do_aloh4 ;

    KM_Cl  = z_cl*KF_Cl*c_cl*F/RT;	
    KM_OH  = z_oh*KF_OH*c_oh*F/RT;
    KM_Na  = z_na*KF_Na*c_na*F/RT;
    KM_K   = z_k*KF_K*c_k*F/RT;	
    KM_H   = z_h*KF_H*c_h*F/RT;	
    KM_Ca  = z_ca*KF_Ca*c_ca*F/RT;
    KM_AlOH4  = z_aloh4*KF_AlOH4*c_aloh4*F/RT;

    KF_PS  = -ton*epsi*epsi_o;

  /* Flux */
    dx     = x[1][0] - x[0][0] ;
    
    grd_cl = (C_Cl(1) - C_Cl(0))/dx ;
    grd_oh = (C_OH(1) - C_OH(0))/dx ;
    grd_na = (C_Na(1) - C_Na(0))/dx ;
    grd_k  = (C_K(1) - C_K(0))/dx ;
    grd_ca = (C_Ca(1) - C_Ca(0))/dx ;
    grd_aloh4 = (C_AlOH4(1) - C_AlOH4(0))/dx ;
    grd_h  = k_e*(un/C_OH(1) - un/C_OH(0))/dx ;

    grd_si = (si(1)-si(0))/dx;

    W_Cl   = - KF_Cl*grd_cl - KM_Cl*grd_si ;
    W_OH   = - KF_OH*grd_oh + KF_H*grd_h -4.*KF_AlOH4*grd_aloh4  - (KM_OH-KM_H+4.*KM_AlOH4)*grd_si;
    W_Na   = - KF_Na*grd_na- KM_Na*grd_si;
    W_K    = - KF_K*grd_k- KM_K*grd_si;
    W_Ca   = - KF_Ca*grd_ca - KM_Ca*grd_si;
    W_Al   = - KF_AlOH4*grd_aloh4- KM_AlOH4*grd_si;

    W_PS   = - grd_si*KF_PS;

#undef C_Cl
#undef XC
#undef C_Na
#undef C_K
#undef XP
#undef XF
#undef XA
#undef si

#undef N_Cl
#undef N_OH
#undef N_Na
#undef N_K
#undef N_Ca
#undef N_Al
#undef N_AlOH3
#undef N_si

#undef W_Cl 
#undef W_OH
#undef W_Na 
#undef W_K  
#undef W_Ca 
#undef W_Al

#undef W_PS

#undef C_OH
#undef C_Ca
#undef C_AlOH4

#undef KF_Cl
#undef KF_OH
#undef KF_Na      
#undef KF_K  
#undef KF_H  
#undef KF_Ca  
#undef KF_AlOH4  

#undef KM_Cl
#undef KM_OH
#undef KM_Na      
#undef KM_K  
#undef KM_H  
#undef KM_Ca  
#undef KM_AlOH4  

#undef KF_PS
}


int ex42(double **x,double **u,double *f,double *va,elem_t el,int dim,int geom,double t) 
/* Termes explicites (va)  */
{
#define C_Cl(n)     (u[(n)][I_Cl])
#define XP(n)       (u[(n)][I_XP])
#define XC(n)       (u[(n)][I_XC])
#define XF(n)	    (u[(n)][I_XF])
#define C_Na(n)     (u[(n)][I_Na])
#define C_K(n)      (u[(n)][I_K])
#define XA(n)       (u[(n)][I_XA])
#define si(n)       (u[(n)][I_si])

#define C_OH(n)     (f[(n+20)])
#define C_Ca(n)     (f[(n+22)])
#define C_AlOH4(n)  (f[(n+24)])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])
#define KF_Ca       (va[(5)])
#define KF_AlOH4    (va[(6)])

#define KM_Cl       (va[(7)])
#define KM_OH       (va[(8)])
#define KM_Na       (va[(9)])
#define KM_K        (va[(10)])
#define KM_H        (va[(11)])
#define KM_Ca       (va[(12)])
#define KM_AlOH4    (va[(13)])

#define KF_PS       (va[(14)])

  double c_cl,c_oh,c_na,c_k,c_h,c_ca,c_aloh4;
  double xc,yc,xp,yp,xf,yf,xa,ya;
  double phif ,phi[2];
  double ton,top,g[2];
  double T,epsi;
  double s_ch,s_c3a,s_sf,s_aloh3;
  double deux = 2. ;
  int i;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  phio    = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d     = el.mat->pr[pm("r_d")] ;

  T	  = el.mat->pr[pm("T")] ;

  s_chrf   = el.mat->pr[pm("s_caoh2")] ;
  s_c3arf  = el.mat->pr[pm("s_c3ah6")] ;
  s_sfrf   = el.mat->pr[pm("s_sel")] ;
  s_aloh3rf= el.mat->pr[pm("s_aloh3")] ;

  s_ch_o      = el.mat->pr[pm("s_caoh2_o")] ;
  s_sf_o      = el.mat->pr[pm("s_sel_o")] ;
  s_c3a_o     = el.mat->pr[pm("s_c3ah6_o")] ;
  s_aloh3_o   = el.mat->pr[pm("s_aloh3_o")] ;

  s_csh    = el.mat->pr[pm("s_csh")] ;
  anpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;

  RT = R_g*T;
  epsi = 0.0007*pow(T-273.15,2.)-0.3918*(T-273.15)+87.663;
  
 
  /* Contenus molaires */
  for(i=0;i<2;i++) {
    xc       = XC(i);    yc	 = fabs(xc);				
    xp	     = XP(i);    yp	 = fabs(xp);
    xf	     = XF(i);    yf      = fabs(xf);
    xa	     = XA(i);    ya      = fabs(xa);

    s_ch   = 0.5*(xp+yp)*s_chrf;	 		
    s_c3a  = 0.5*(xc+yc)*s_c3arf;		
    s_sf   = 0.5*(xf+yf)*s_sfrf;
    s_aloh3= 0.5*(xa+ya)*s_aloh3rf;

    phi[i] = phio+(s_ch_o-s_ch)*v_caoh2+(s_sf_o-s_sf)*v_sel+(s_c3a_o-s_c3a)*v_c3ah6+(s_aloh3_o-s_aloh3)*v_aloh3;
  }
 
 /* Coefficient de transfert */

    c_cl     = (C_Cl(0)+C_Cl(1))/deux ;
    c_oh     = (C_OH(0)+C_OH(1))/deux ;
    c_na     = (C_Na(0)+C_Na(1))/deux ;
    c_k      = (C_K(0)+C_K(1))/deux ;
    c_ca     = (C_Ca(0)+C_Ca(1))/deux ;
    c_aloh4  = (C_AlOH4(0)+C_AlOH4(1))/deux ;
    c_h      =  k_e/c_oh ;	

    g[0] = (0.001+0.07*pow(phi[0],2.)+1.8*((phi[0]<=0.18) ? 0.: 1.)*pow(phi[0]-0.18,2.));
    g[0] = phi[0]/phio*g[0]/(0.001+0.07*pow(phio,2.)+1.8*((phio<=0.18) ? 0.: 1.)*pow(phio-0.18,2.));

    g[1] = (0.001+0.07*pow(phi[1],2.)+1.8*((phi[1]<=0.18) ? 0.: 1.)*pow(phi[1]-0.18,2.));
    g[1] = phi[1]/phio*g[1]/(0.001+0.07*pow(phio,2.)+1.8*((phio<=0.18) ? 0.: 1.)*pow(phio-0.18,2.));

    phif = 0.5*(g[0]+g[1]); 

    ton = d_cl/do_cl*phif;
    top = ton/r_d;

    KF_Cl  = ton*do_cl ;
    KF_OH  = ton*do_oh ;
    KF_Na  = top*do_na;
    KF_K   = top*do_k;
    KF_H   = top*do_h;
    KF_Ca  = top*do_ca;
    KF_AlOH4 = ton*do_aloh4 ;

    KM_Cl  = z_cl*KF_Cl*c_cl*F/RT;	
    KM_OH  = z_oh*KF_OH*c_oh*F/RT;
    KM_Na  = z_na*KF_Na*c_na*F/RT;
    KM_K   = z_k*KF_K*c_k*F/RT;	
    KM_H   = z_h*KF_H*c_h*F/RT;	
    KM_Ca  = z_ca*KF_Ca*c_ca*F/RT;
    KM_AlOH4  = z_aloh4*KF_AlOH4*c_aloh4*F/RT;

    KF_PS  = -ton*epsi*epsi_o;

    return(0) ;

#undef C_Cl
#undef XC
#undef C_Na
#undef C_K
#undef XP
#undef XF
#undef XA
#undef si

#undef C_OH
#undef C_Ca
#undef C_AlOH4

#undef KF_Cl
#undef KF_OH
#undef KF_Na      
#undef KF_K  
#undef KF_H  
#undef KF_Ca  
#undef KF_AlOH4  

#undef KM_Cl
#undef KM_OH
#undef KM_Na      
#undef KM_K  
#undef KM_H  
#undef KM_Ca  
#undef KM_AlOH4 

#undef KF_PS

}

int ct42(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,elem_t el,int dim,int geom,double dt,double t)
/* Les variables donnees par la loi de comportement (f_1) */
{

#define C_Cl(n)     (u_1[(n)][I_Cl])
#define XP(n)       (u_1[(n)][I_XP])
#define XC(n)       (u_1[(n)][I_XC])
#define XF(n)	    (u_1[(n)][I_XF])
#define C_Na(n)     (u_1[(n)][I_Na])
#define C_K(n)      (u_1[(n)][I_K])
#define XA(n)       (u_1[(n)][I_XA])
#define si(n)       (u_1[(n)][I_si])

#define N_Cl(n)     (f_1[(n)])
#define N_OH(n)     (f_1[(n+2)])
#define N_Na(n)     (f_1[(n+4)])
#define N_K(n)      (f_1[(n+6)])
#define N_Ca(n)     (f_1[(n+8)])
#define N_Al(n)     (f_1[(n+10)])
#define N_AlOH3(n)  (f_1[(n+12)])

#define W_Cl        (f_1[14])
#define W_OH        (f_1[15])
#define W_Na        (f_1[16])
#define W_K         (f_1[17])
#define W_Ca        (f_1[18])
#define W_Al        (f_1[19])

#define C_OH(n)     (f_1[(n+20)])
#define C_Ca(n)     (f_1[(n+22)])
#define C_AlOH4(n)  (f_1[(n+24)])

#define N_si(n)     (f_1[(n+26)])
#define W_PS        (f_1[28])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])
#define KF_Ca       (va[(5)])
#define KF_AlOH4    (va[(6)])

#define KM_Cl       (va[(7)])
#define KM_OH       (va[(8)])
#define KM_Na       (va[(9)])
#define KM_K        (va[(10)])
#define KM_H        (va[(11)])
#define KM_Ca       (va[(12)])
#define KM_AlOH4    (va[(13)])

#define KF_PS       (va[(14)])

  double c_cl,c_oh,c_na,c_k,c_h,c_ca,c_aloh4;
  double xc,yc,xp,yp,xf,yf,xa,ya;
  double grd_cl,grd_oh,grd_na,grd_k,grd_h,grd_ca,grd_aloh4,grd_si;
  double s_cl,s_ch,s_c3a,s_sf,s_aloh3,s_oh;
  double dx,phi;
  int    i ;
  double zero = 0.,un = 1. ;
  
  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */

  phio    = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  RT	    = R_g*el.mat->pr[pm("T")] ;

  s_chrf   = el.mat->pr[pm("s_caoh2")] ;
  s_c3arf  = el.mat->pr[pm("s_c3ah6")] ;
  s_sfrf   = el.mat->pr[pm("s_sel")] ;
  s_aloh3rf= el.mat->pr[pm("s_aloh3")] ;

  s_ch_o      = el.mat->pr[pm("s_caoh2_o")] ;
  s_sf_o      = el.mat->pr[pm("s_sel_o")] ;
  s_c3a_o     = el.mat->pr[pm("s_c3ah6_o")] ;
  s_aloh3_o   = el.mat->pr[pm("s_aloh3_o")] ;

  s_csh    = el.mat->pr[pm("s_csh")] ;
  anpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;
   
  /* Contenus molaires */

 for(i=0;i<2;i++) {
    c_cl     = C_Cl(i) ;
    c_na     = C_Na(i) ;
    c_k      = C_K(i) ;
    xc       = XC(i);    yc	 = fabs(xc);				
    xp	     = XP(i);	 yp	 = fabs(xp);
    xf	     = XF(i);    yf      = fabs(xf);
    xa	     = XA(i);    ya      = fabs(xa);

    if (c_cl<zero||c_na<zero||c_k<zero||xc<-1.||xp<-1.||xf<-1.||xa<-1.||(xc>zero&&xp>zero&&xa>zero)) {
      fprintf(stdout,"\n\t x = %e \n\t c_cl = %e \n\t c_na = %e \n\t c_k = %e \n\t xp = %e \n\t xc = %e \n\t xf = %e \n\t xa = %e",x[0][0],c_cl,c_na,c_k,xp,xc,xf,xa);
	return(-1);
    }

    C_OH(i)   = k_p*(0.5*(xp-yp)+1.0)*pow(k_c*(0.5*(xc-yc)+1.0)/(k_f*(0.5*(xf-yf)+1.0)),2.0)*c_cl; 	
    C_AlOH4(i)= pow(k_c*(0.5*(xc-yc)+1.0),4.0)/pow(k_p*(0.5*(xp-yp)+1.0)*k_f*(0.5*(xf-yf)+1.0),2.0)*c_cl;
    C_Ca(i)   = pow(k_f*(0.5*(xf-yf)+1.0)/(k_c*(0.5*(xc-yc)+1.0)),4.0)/pow(c_cl,2.);

    c_oh      = C_OH(i);        
    c_h	      = k_e/c_oh;  
    c_ca      = C_Ca(i);  
    c_aloh4   = C_AlOH4(i); 

    s_ch   = 0.5*(xp+yp)*s_chrf;	 		
    s_c3a  = 0.5*(xc+yc)*s_c3arf;		
    s_sf   = 0.5*(xf+yf)*s_sfrf;		
    s_aloh3 = 0.5*(xa+ya)*s_aloh3rf;		

    s_cl     = anpha*s_csh*c_cl*beta/(c_oh+beta*c_cl);
    s_oh   = s_oho - s_cl ;

    phi = phio+(s_ch_o-s_ch)*v_caoh2+(s_sf_o-s_sf)*v_sel+(s_c3a_o-s_c3a)*v_c3ah6+(s_aloh3_o-s_aloh3)*v_aloh3;
  
    N_Cl(i)  = phi*c_cl + (s_cl+2*s_sf);
    N_OH(i)  = phi*(c_oh-c_h+4*c_aloh4) + (s_oho-s_cl+2*s_ch+12*s_c3a+12*s_sf+3*s_aloh3);
    N_Na(i)  = phi*c_na;
    N_K(i)   = phi*c_k;
    N_Ca(i)  = phi*c_ca+(s_ch+3*s_c3a+4*s_sf);
    N_Al(i)  = phi*c_aloh4+(2*s_c3a+2*s_sf+s_aloh3);
    N_AlOH3(i) = pow(k_c*(0.5*(xc-yc)+1.0),2.0)/pow(k_p*(0.5*(xp-yp)+1.0),3.)-k_a*(0.5*(xa-ya)+1.0);

    N_si(i)   = (c_cl*z_cl+c_oh*z_oh+c_na*z_na+c_k*z_k+c_h*z_h+c_ca*z_ca+c_aloh4*z_aloh4)*F;
  }
  
    /* Flux */
    dx     = x[1][0] - x[0][0] ;

    grd_cl = (C_Cl(1) - C_Cl(0))/dx ;
    grd_oh = (C_OH(1) - C_OH(0))/dx ;
    grd_na = (C_Na(1) - C_Na(0))/dx ;
    grd_k  = (C_K(1) - C_K(0))/dx ;
    grd_ca = (C_Ca(1) - C_Ca(0))/dx ;
    grd_aloh4 = (C_AlOH4(1) - C_AlOH4(0))/dx ;
    grd_h  = k_e*(un/C_OH(1) - un/C_OH(0))/dx ;

    grd_si =(si(1)-si(0))/dx;  
	
    W_Cl   = - KF_Cl*grd_cl - KM_Cl*grd_si ;
    W_OH   = - KF_OH*grd_oh + KF_H*grd_h -4.*KF_AlOH4*grd_aloh4  - (KM_OH-KM_H+4.*KM_AlOH4)*grd_si;
    W_Na   = - KF_Na*grd_na- KM_Na*grd_si;
    W_K    = - KF_K*grd_k- KM_K*grd_si;
    W_Ca   = - KF_Ca*grd_ca - KM_Ca*grd_si;
    W_Al   = - KF_AlOH4*grd_aloh4- KM_AlOH4*grd_si;
    W_PS   = - grd_si*KF_PS;

    return(0) ;
		
#undef C_Cl
#undef XC
#undef C_Na
#undef C_K
#undef XP
#undef XF
#undef XA
#undef si

#undef N_Cl
#undef N_OH
#undef N_Na
#undef N_K
#undef N_Ca
#undef N_Al
#undef N_AlOH3
#undef N_si

#undef W_Cl 
#undef W_OH 
#undef W_Na 
#undef W_K  
#undef W_Ca 
#undef W_Al

#undef W_PS

#undef C_OH
#undef C_Ca
#undef C_AlOH4

#undef KF_Cl
#undef KF_OH
#undef KF_Na      
#undef KF_K  
#undef KF_H  
#undef KF_Ca
#undef KF_AlOH4

#undef KM_Cl
#undef KM_OH
#undef KM_Na      
#undef KM_K  
#undef KM_H  
#undef KM_Ca  
#undef KM_AlOH4 

#undef KF_PS
}

int mx42(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *k,elem_t el,int dim,int geom,double dt,double t)
/* Matrice (k) */
{
#define C_Cl(n)     (u_1[(n)][I_Cl])
#define XP(n)       (u_1[(n)][I_XP])
#define XC(n)       (u_1[(n)][I_XC])
#define XF(n)	    (u_1[(n)][I_XF])
#define C_Na(n)     (u_1[(n)][I_Na])
#define C_K(n)      (u_1[(n)][I_K])
#define XA(n)       (u_1[(n)][I_XA])
#define si(n)       (u_1[(n)][I_si])

#define C_OH(n)     (f_1[(n+20)])
#define C_Ca(n)     (f_1[(n+22)])
#define C_AlOH4(n)  (f_1[(n+24)])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])
#define KF_Ca       (va[(5)])
#define KF_AlOH4    (va[(6)])

#define KM_Cl       (va[(7)])
#define KM_OH       (va[(8)])
#define KM_Na       (va[(9)])
#define KM_K        (va[(10)])
#define KM_H        (va[(11)])
#define KM_Ca       (va[(12)])
#define KM_AlOH4    (va[(13)])

#define KF_PS       (va[(14)])

#define K(i,j)    (k[(i)*el.nn*NEQ+(j)])
  
  double c_oh,c_cl,s_cl, c_ca,c_h,c_aloh4,c_na,c_k;
  double s_ch,s_c3a,s_sf,s_aloh3;
  double xp,yp,xc,yc,xf,yf,xa,ya;
  double dx,xm,tr;
  double dscl_ccl,dscl_coh;
  double dcoh_ccl[2],dcoh_xc[2],dcoh_xp[2],dcoh_xf[2],dcca_ccl[2],dcca_xf[2],dcca_xc[2],dcaloh4_ccl[2],dcaloh4_xp[2], dcaloh4_xc[2],dcaloh4_xf[2];
  double dyp_xp,dyc_xc,dyf_xf,dya_xa;
  double volume[2],surf,phi;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;
  
  /* initialisation */
  for(i=0;i<el.nn*el.nn*NEQ*NEQ;i++) k[i] = zero ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
 
  phio    = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  RT	    = R_g*el.mat->pr[pm("T")] ;

  s_chrf   = el.mat->pr[pm("s_caoh2")] ;
  s_c3arf  = el.mat->pr[pm("s_c3ah6")] ;
  s_sfrf   = el.mat->pr[pm("s_sel")] ;
  s_aloh3rf= el.mat->pr[pm("s_aloh3")] ;

  s_ch_o      = el.mat->pr[pm("s_caoh2_o")] ;
  s_sf_o      = el.mat->pr[pm("s_sel_o")] ;
  s_c3a_o     = el.mat->pr[pm("s_c3ah6_o")] ;
  s_aloh3_o   = el.mat->pr[pm("s_aloh3_o")] ;

  s_csh    = el.mat->pr[pm("s_csh")] ;
  anpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;
	
  /*
    CALCUL DE volume ET DE surf 
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;

  /* termes d'accumulation */
  for(i=0;i<2;i++)
    {
     c_cl     = C_Cl(i) ;
     c_na     = C_Na(i) ;
     c_k      = C_K(i) ;
     c_oh     = C_OH(i);        
     c_h      = k_e/c_oh;  
     c_ca      = C_Ca(i);  
     c_aloh4   = C_AlOH4(i); 

     xc       = XC(i);    yc	   = fabs(xc);				
     xp	      = XP(i);	  yp	   = fabs(xp);
     xf	      = XF(i);    yf       = fabs(xf);
     xa	      = XA(i);    ya       = fabs(xa);

     if (xp>zero) dyp_xp = un; else dyp_xp = - un; 	
     if (xc>zero) dyc_xc = un; else dyc_xc = - un;
     if (xf>zero) dyf_xf = un; else dyf_xf = - un; 	
     if (xa>zero) dya_xa = un; else dya_xa = - un; 	

    s_ch   = 0.5*(xp+yp)*s_chrf;	 		
    s_c3a  = 0.5*(xc+yc)*s_c3arf;		
    s_sf   = 0.5*(xf+yf)*s_sfrf; 
    s_aloh3= 0.5*(xa+ya)*s_aloh3rf; 

    phi = phio+(s_ch_o-s_ch)*v_caoh2+(s_sf_o-s_sf)*v_sel+(s_c3a_o-s_c3a)*v_c3ah6+(s_aloh3_o-s_aloh3)*v_aloh3;

    s_cl     = anpha*s_csh*c_cl*beta/(c_oh+beta*c_cl);
    dscl_ccl = anpha*s_csh*beta*c_oh/pow(c_oh+beta*c_cl,2.);
    dscl_coh = -anpha*s_csh*beta*c_cl/pow(c_oh+beta*c_cl,2.);

     dcoh_ccl[i]= k_p*(0.5*(xp-yp)+1.0)*pow(k_c*(0.5*(xc-yc)+1.0)/(k_f*(0.5*(xf-yf)+1.0)),2.0);
     dcoh_xp[i]= c_cl*k_p*pow(k_c*(0.5*(xc-yc)+1.0)/(k_f*(0.5*(xf-yf)+1.0)),2.0)*0.5*(1.0-dyp_xp);
     dcoh_xc[i]= c_cl*k_p*(0.5*(xp-yp)+1.0)*2.0*(0.5*(xc-yc)+1.0)*pow(k_c/(k_f*(0.5*(xf-yf)+1.0)),2.0)*0.5*(1.0-dyc_xc);
     dcoh_xf[i]= -2.0*c_cl*k_p*(0.5*(xp-yp)+1.0)*pow(k_c*(0.5*(xc-yc)+1.0)/(k_f),2.0)*pow(0.5*(xf-yf)+1.0,-3.0)*0.5*(1.0-dyf_xf);

     dcaloh4_ccl[i]= pow(k_c*(0.5*(xc-yc)+1.0),4.0)/pow(k_p*(0.5*(xp-yp)+1.0)*k_f*(0.5*(xf-yf)+1.0),2.0);
     dcaloh4_xp[i]= -2.0*c_cl*pow(k_c*(0.5*(xc-yc)+1.0),4.0)/pow(k_p*k_f*(0.5*(xf-yf)+1.0),2.0)*pow(0.5*(xp-yp)+1.0,-3.0)*0.5*(1.0-dyp_xp);
     dcaloh4_xc[i]= 4.0*c_cl*pow(k_c,4.0)*pow(0.5*(xc-yc)+1.0,3.0)/pow(k_p*(0.5*(xp-yp)+1.0)*k_f*(0.5*(xf-yf)+1.0),2.0)*0.5*(1.0-dyc_xc);
     dcaloh4_xf[i]= -2.0*c_cl*pow(k_c*(0.5*(xc-yc)+1.0),4.0)/pow(k_p*(0.5*(xp-yp)+1.0)*k_f,2.0)*pow(0.5*(xf-yf)+1.0,-3.0)*0.5*(1.0-dyf_xf);		

     dcca_ccl[i]  = -2.0*pow(k_f*(0.5*(xf-yf)+1.0)/(k_c*(0.5*(xc-yc)+1.0)),4.0)/pow(c_cl,3.0);
     dcca_xc[i] = -4.0*pow(k_f*(0.5*(xf-yf)+1.0)/(k_c),4.0)/pow(c_cl,2.)*pow(0.5*(xc-yc)+1.0,-5.0)*(0.5*(1.-dyc_xc));
     dcca_xf[i]  = 4.0*pow(k_f/(k_c*(0.5*(xc-yc)+1.0)),4.0)/pow(c_cl,2.)*pow(0.5*(xf-yf)+1.0,3.0)*(0.5*(1.-dyf_xf));

    /*
      Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
    */

    K(i*NEQ+E_Cl,i*NEQ+I_Cl) += volume[i]*(phi+dscl_ccl);
    K(i*NEQ+E_Cl,i*NEQ+I_Cl) += volume[i]*(dscl_coh*dcoh_ccl[i]);
    K(i*NEQ+E_Cl,i*NEQ+I_XP) += volume[i]*(dscl_coh*dcoh_xp[i]);
    K(i*NEQ+E_Cl,i*NEQ+I_XC) += volume[i]*(dscl_coh*dcoh_xc[i]);
    K(i*NEQ+E_Cl,i*NEQ+I_XF) += volume[i]*(dscl_coh*dcoh_xf[i]);

    K(i*NEQ+E_Cl,i*NEQ+I_XF) += volume[i]*(s_sfrf*(1.+dyf_xf));
    K(i*NEQ+E_Cl,i*NEQ+I_XP) += -volume[i]*c_cl*v_caoh2*0.5*s_chrf*(1.+dyp_xp);
    K(i*NEQ+E_Cl,i*NEQ+I_XF) += -volume[i]*c_cl*v_sel*0.5*s_sfrf*(1.+dyf_xf);
    K(i*NEQ+E_Cl,i*NEQ+I_XC) += -volume[i]*c_cl*v_c3ah6*0.5*s_c3arf*(1.+dyc_xc);
    K(i*NEQ+E_Cl,i*NEQ+I_XA) += -volume[i]*c_cl*v_aloh3*0.5*s_aloh3rf*(1.+dya_xa);

    /*
      Conservation de OH (hydroxy-hydro) : [(n_OH1 - n_OHn)-(n_H1 - n_Hn)] + dt * div(w_OH-w_H) = 0
    */
    
    K(i*NEQ+E_OH,i*NEQ+I_Cl) +=  volume[i]*(phi*(dcoh_ccl[i]+4*dcaloh4_ccl[i]+k_e/pow(c_oh,2)*dcoh_ccl[i])-dscl_ccl);
      
      K(i*NEQ+E_OH,i*NEQ+I_Cl) += volume[i]*(-dscl_coh*dcoh_ccl[i]);
      K(i*NEQ+E_OH,i*NEQ+I_XP) += volume[i]*(-dscl_coh*dcoh_xp[i]);
      K(i*NEQ+E_OH,i*NEQ+I_XC) += volume[i]*(-dscl_coh*dcoh_xc[i]);
      K(i*NEQ+E_OH,i*NEQ+I_XF) += volume[i]*(-dscl_coh*dcoh_xf[i]);

      K(i*NEQ+E_OH,i*NEQ+I_XP) +=  volume[i]*(phi*(dcoh_xp[i]+4*dcaloh4_xp[i]+k_e/pow(c_oh,2)*dcoh_xp[i])+s_chrf*(1.+dyp_xp));
      K(i*NEQ+E_OH,i*NEQ+I_XC) +=  volume[i]*(phi*(dcoh_xc[i]+4*dcaloh4_xc[i]+k_e/pow(c_oh,2)*dcoh_xc[i])+6.*s_c3arf*(1.+dyc_xc));
      K(i*NEQ+E_OH,i*NEQ+I_XF) +=  volume[i]*(phi*(dcoh_xf[i]+4*dcaloh4_xf[i]+k_e/pow(c_oh,2)*dcoh_xf[i])+6.*s_sfrf*(1.+dyf_xf));
      K(i*NEQ+E_OH,i*NEQ+I_XA) +=  volume[i]*1.5*s_aloh3rf*(1.+dya_xa);

      K(i*NEQ+E_OH,i*NEQ+I_XP) += -volume[i]*(c_oh-c_h)*v_caoh2*0.5*s_chrf*(1.+dyp_xp);
      K(i*NEQ+E_OH,i*NEQ+I_XF) += -volume[i]*(c_oh-c_h)*v_sel*0.5*s_sfrf*(1.+dyf_xf);
      K(i*NEQ+E_OH,i*NEQ+I_XC) += -volume[i]*(c_oh-c_h)*v_c3ah6*0.5*s_c3arf*(1.+dyc_xc);
      K(i*NEQ+E_OH,i*NEQ+I_XA) += -volume[i]*(c_oh-c_h)*v_aloh3*0.5*s_aloh3rf*(1.+dya_xa);

    /*
      Conservation de Na (natri) : (n_Na1 - n_Nan) + dt * div(w_Na) = 0
    */
      K(i*NEQ+E_Na,i*NEQ+I_Na) +=  volume[i]*(phi) ;

    K(i*NEQ+E_Na,i*NEQ+I_XP) += -volume[i]*c_na*v_caoh2*0.5*s_chrf*(1.+dyp_xp);
    K(i*NEQ+E_Na,i*NEQ+I_XF) += -volume[i]*c_na*v_sel*0.5*s_sfrf*(1.+dyf_xf);
    K(i*NEQ+E_Na,i*NEQ+I_XC) += -volume[i]*c_na*v_c3ah6*0.5*s_c3arf*(1.+dyc_xc);
    K(i*NEQ+E_Na,i*NEQ+I_XA) += -volume[i]*c_na*v_aloh3*0.5*s_aloh3rf*(1.+dya_xa);

    /*
      Conservation de K (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
    */
      K(i*NEQ+E_K,i*NEQ+I_K) +=  volume[i]*(phi) ;

    K(i*NEQ+E_K,i*NEQ+I_XP) += -volume[i]*c_k*v_caoh2*0.5*s_chrf*(1.+dyp_xp);
    K(i*NEQ+E_K,i*NEQ+I_XF) += -volume[i]*c_k*v_sel*0.5*s_sfrf*(1.+dyf_xf);
    K(i*NEQ+E_K,i*NEQ+I_XC) += -volume[i]*c_k*v_c3ah6*0.5*s_c3arf*(1.+dyc_xc);
    K(i*NEQ+E_K,i*NEQ+I_XA) += -volume[i]*c_k*v_aloh3*0.5*s_aloh3rf*(1.+dya_xa);


    /* 
      Conservation de Ca (kali) : (n_Ca1 - n_Can) + dt * div(w_Ca) = 0
    */
      K(i*NEQ+E_Ca,i*NEQ+I_Cl) +=  volume[i]*(phi*dcca_ccl[i]) ;
      K(i*NEQ+E_Ca,i*NEQ+I_XP) +=  volume[i]*(0.5*s_chrf*(1.+dyp_xp)) ;
      K(i*NEQ+E_Ca,i*NEQ+I_XC) +=  volume[i]*(phi*dcca_xc[i]+1.5*s_c3arf*(1.+dyc_xc)) ;
      K(i*NEQ+E_Ca,i*NEQ+I_XF) +=  volume[i]*(phi*dcca_xf[i]+2.*s_sfrf*(1.+dyf_xf)) ;

    K(i*NEQ+E_Ca,i*NEQ+I_XP) += -volume[i]*c_ca*v_caoh2*0.5*s_chrf*(1.+dyp_xp);
    K(i*NEQ+E_Ca,i*NEQ+I_XF) += -volume[i]*c_ca*v_sel*0.5*s_sfrf*(1.+dyf_xf);
    K(i*NEQ+E_Ca,i*NEQ+I_XC) += -volume[i]*c_ca*v_c3ah6*0.5*s_c3arf*(1.+dyc_xc);
    K(i*NEQ+E_Ca,i*NEQ+I_XA) += -volume[i]*c_ca*v_aloh3*0.5*s_aloh3rf*(1.+dya_xa);

    /* 
      Conservation de Al (kali) : (n_Al1 - n_Aln) + dt * div(w_Al) = 0
    */

      K(i*NEQ+E_Al,i*NEQ+I_Cl) +=  volume[i]*(phi*dcaloh4_ccl[i]) ;
      K(i*NEQ+E_Al,i*NEQ+I_XP) +=  volume[i]*(phi*dcaloh4_xp[i]) ;
      K(i*NEQ+E_Al,i*NEQ+I_XC) +=  volume[i]*(phi*dcaloh4_xc[i]+s_c3arf*(1.+dyc_xc)) ;
      K(i*NEQ+E_Al,i*NEQ+I_XF) +=  volume[i]*(phi*dcaloh4_xf[i]+s_sfrf*(1.+dyf_xf)) ;
      K(i*NEQ+E_Al,i*NEQ+I_XA) +=  volume[i]*0.5*s_aloh3rf*(1.+dya_xa) ;

    K(i*NEQ+E_Al,i*NEQ+I_XP) += -volume[i]*c_aloh4*v_caoh2*0.5*s_chrf*(1.+dyp_xp);
    K(i*NEQ+E_Al,i*NEQ+I_XF) += -volume[i]*c_aloh4*v_sel*0.5*s_sfrf*(1.+dyf_xf);
    K(i*NEQ+E_Al,i*NEQ+I_XC) += -volume[i]*c_aloh4*v_c3ah6*0.5*s_c3arf*(1.+dyc_xc);
    K(i*NEQ+E_Al,i*NEQ+I_XA) += -volume[i]*c_aloh4*v_aloh3*0.5*s_aloh3rf*(1.+dya_xa);

      /*
	Conservation de Al(OH)3
      */

      K(i*NEQ+E_A,i*NEQ+I_XP)+= volume[i]*(-3.0*pow(k_c*(0.5*(xc-yc)+1.0),2.0)/pow(k_p,3.0)*pow(0.5*(xp-yp)+1.0,-4.0)*0.5*(1.-dyp_xp)) ;

      K(i*NEQ+E_A,i*NEQ+I_XC)+= volume[i]*(2.0*(0.5*(xc-yc)+1.0)*pow(k_c,2.0)/pow(k_p*(0.5*(xp-yp)+1.0),3.0)*0.5*(1.-dyc_xc)) ;

      K(i*NEQ+E_A,i*NEQ+I_XA)+= volume[i]*(-k_a*0.5*(1.-dya_xa)) ;
      /*
	Neutralisation : c_cl*z_cl+c_oh*z_oh+c_na*z_na+c_k*z_k+c_h*z_h+c_ca*z_ca+c_aloh4*z_aloh4;  = 0 
      */

      K(i*NEQ+E_si,i*NEQ+I_Cl)+= volume[i]*F*(z_cl + z_ca*dcca_ccl[i]+ z_aloh4*dcaloh4_ccl[i]+(z_oh-z_h*k_e/pow(c_oh,2.))*dcoh_ccl[i]) ;
      K(i*NEQ+E_si,i*NEQ+I_XP)+= volume[i]*F*((z_oh -z_h*k_e/pow(c_oh,2.))*dcoh_xp[i]+z_aloh4*dcaloh4_xp[i]);
      K(i*NEQ+E_si,i*NEQ+I_Na)+= volume[i]*F*z_na ;
      K(i*NEQ+E_si,i*NEQ+I_K) += volume[i]*F*z_k ;
      K(i*NEQ+E_si,i*NEQ+I_XC)+= volume[i]*F*((z_oh-z_h*k_e/pow(c_oh,2.))*dcoh_xc[i]+z_ca*dcca_xc[i]+z_aloh4*dcaloh4_xc[i]) ;
      K(i*NEQ+E_si,i*NEQ+I_XF)+= volume[i]*F*((z_oh-z_h*k_e/pow(c_oh,2.))*dcoh_xf[i]+z_ca*dcca_xf[i]+z_aloh4*dcaloh4_xf[i]) ;

}

  /* termes d'ecoulement */
  tr     = dt*surf/dx ;
 
  /*
    Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */

  K(E_Cl,I_Cl)             += + tr*KF_Cl;
  K(E_Cl,I_Cl+NEQ)         += - tr*KF_Cl;
  K(E_Cl+NEQ,I_Cl)         += - tr*KF_Cl;
  K(E_Cl+NEQ,I_Cl+NEQ)     += + tr*KF_Cl;

  K(E_Cl,I_si)              += + tr*KM_Cl;
  K(E_Cl,I_si+NEQ)          += - tr*KM_Cl;
  K(E_Cl+NEQ,I_si)          += - tr*KM_Cl;
  K(E_Cl+NEQ,I_si+NEQ)      += + tr*KM_Cl;          

 /*
    Conservation de OH (hydroxy-hydro) : [(n_OH1 - n_OHn)-(n_H1 - n_Hn)] + dt * div(w_OH-w_H) = 0
  */

  K(E_OH,I_Cl)             += + tr*(KF_OH*dcoh_ccl[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_ccl[0]+4.*KF_AlOH4*dcaloh4_ccl[0]); 
  K(E_OH,I_Cl+NEQ)         += - tr*(KF_OH*dcoh_ccl[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_ccl[1]+4.*KF_AlOH4*dcaloh4_ccl[1]);
  K(E_OH+NEQ,I_Cl)         += - tr*(KF_OH*dcoh_ccl[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_ccl[0]+4.*KF_AlOH4*dcaloh4_ccl[0]);
  K(E_OH+NEQ,I_Cl+NEQ)     += + tr*(KF_OH*dcoh_ccl[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_ccl[1]+4.*KF_AlOH4*dcaloh4_ccl[1]);

  K(E_OH,I_XP)             += + tr*(KF_OH*dcoh_xp[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_xp[0]+4.*KF_AlOH4*dcaloh4_xp[0]);
  K(E_OH,I_XP+NEQ)         += - tr*(KF_OH*dcoh_xp[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_xp[1]+4.*KF_AlOH4*dcaloh4_xp[1]);
  K(E_OH+NEQ,I_XP)         += - tr*(KF_OH*dcoh_xp[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_xp[0]+4.*KF_AlOH4*dcaloh4_xp[0]);
  K(E_OH+NEQ,I_XP+NEQ)     += + tr*(KF_OH*dcoh_xp[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_xp[1]+4.*KF_AlOH4*dcaloh4_xp[1]);

  K(E_OH,I_XC)              += + tr*(KF_OH*dcoh_xc[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_xc[0]+4.*KF_AlOH4*dcaloh4_xc[0]);
  K(E_OH,I_XC+NEQ)          += - tr*(KF_OH*dcoh_xc[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_xc[1]+4.*KF_AlOH4*dcaloh4_xc[1]);
  K(E_OH+NEQ,I_XC)          += - tr*(KF_OH*dcoh_xc[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_xc[0]+4.*KF_AlOH4*dcaloh4_xc[0]);
  K(E_OH+NEQ,I_XC+NEQ)      += + tr*(KF_OH*dcoh_xc[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_xc[1]+4.*KF_AlOH4*dcaloh4_xc[1]);

  K(E_OH,I_XF)              += + tr*(KF_OH*dcoh_xf[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_xf[0]+4.*KF_AlOH4*dcaloh4_xf[0]);
  K(E_OH,I_XF+NEQ)          += - tr*(KF_OH*dcoh_xf[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_xf[1]+4.*KF_AlOH4*dcaloh4_xf[1]);
  K(E_OH+NEQ,I_XF)          += - tr*(KF_OH*dcoh_xf[0]+KF_H*k_e/pow(C_OH(0),2)*dcoh_xf[0]+4.*KF_AlOH4*dcaloh4_xf[0]);
  K(E_OH+NEQ,I_XF+NEQ)      += + tr*(KF_OH*dcoh_xf[1]+KF_H*k_e/pow(C_OH(1),2)*dcoh_xf[1]+4.*KF_AlOH4*dcaloh4_xf[1]);

  K(E_OH,I_si)             += +tr*(KM_OH-KM_H+4.*KM_AlOH4);
  K(E_OH,I_si+NEQ)         += -tr*(KM_OH-KM_H+4.*KM_AlOH4);
  K(E_OH+NEQ,I_si)         += -tr*(KM_OH-KM_H+4.*KM_AlOH4);
  K(E_OH+NEQ,I_si+NEQ)     += +tr*(KM_OH-KM_H+4.*KM_AlOH4);

   /*
    Conservation de Na (Natri) : (n_Na1 - n_Nan) + dt * div(w_Na) = 0
  */

  K(E_Na,I_Na)             += + tr*KF_Na;
  K(E_Na,I_Na+NEQ)         += - tr*KF_Na;
  K(E_Na+NEQ,I_Na)         += - tr*KF_Na;
  K(E_Na+NEQ,I_Na+NEQ)     += + tr*KF_Na;

  K(E_Na,I_si)             += +tr*KM_Na;
  K(E_Na,I_si+NEQ)         += -tr*KM_Na;
  K(E_Na+NEQ,I_si)         += -tr*KM_Na;
  K(E_Na+NEQ,I_si+NEQ)     += +tr*KM_Na;

  /*
    Conservation de K (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
  */

  K(E_K,I_K)              += + tr*KF_K;
  K(E_K,I_K+NEQ)          += - tr*KF_K;
  K(E_K+NEQ,I_K)          += - tr*KF_K;
  K(E_K+NEQ,I_K+NEQ)      += + tr*KF_K;

  K(E_K,I_si)             += +tr*KM_K;
  K(E_K,I_si+NEQ)         += -tr*KM_K;
  K(E_K+NEQ,I_si)         += -tr*KM_K;
  K(E_K+NEQ,I_si+NEQ)     += +tr*KM_K;

  /*
    Conservation de Ca (canci) : (n_Ca1 - n_Can) + dt * div(w_Ca) = 0
  */

  K(E_Ca,I_Cl)              += + tr*(KF_Ca*dcca_ccl[0]);
  K(E_Ca,I_Cl+NEQ)          += - tr*(KF_Ca*dcca_ccl[1]);
  K(E_Ca+NEQ,I_Cl)          += - tr*(KF_Ca*dcca_ccl[0]);
  K(E_Ca+NEQ,I_Cl+NEQ)      += + tr*(KF_Ca*dcca_ccl[1]);

  K(E_Ca,I_XC)              += + tr*(KF_Ca*dcca_xc[0]);
  K(E_Ca,I_XC+NEQ)          += - tr*(KF_Ca*dcca_xc[1]);
  K(E_Ca+NEQ,I_XC)          += - tr*(KF_Ca*dcca_xc[0]);
  K(E_Ca+NEQ,I_XC+NEQ)      += + tr*(KF_Ca*dcca_xc[1]);
  
  K(E_Ca,I_XF)              += + tr*(KF_Ca*dcca_xf[0]);
  K(E_Ca,I_XF+NEQ)          += - tr*(KF_Ca*dcca_xf[1]);
  K(E_Ca+NEQ,I_XF)          += - tr*(KF_Ca*dcca_xf[0]);
  K(E_Ca+NEQ,I_XF+NEQ)      += + tr*(KF_Ca*dcca_xf[1]);   

  K(E_Ca,I_si)             += +tr*KM_Ca;
  K(E_Ca,I_si+NEQ)         += -tr*KM_Ca;
  K(E_Ca+NEQ,I_si)         += -tr*KM_Ca;
  K(E_Ca+NEQ,I_si+NEQ)     += +tr*KM_Ca;

  /*
    Conservation de Al (canci) : (n_Al1 - n_Aln) + dt * div(w_Al) = 0
  */

  K(E_Al,I_Cl)              += + tr*(KF_AlOH4*dcaloh4_ccl[0]);
  K(E_Al,I_Cl+NEQ)          += - tr*(KF_AlOH4*dcaloh4_ccl[1]);
  K(E_Al+NEQ,I_Cl)          += - tr*(KF_AlOH4*dcaloh4_ccl[0]);
  K(E_Al+NEQ,I_Cl+NEQ)      += + tr*(KF_AlOH4*dcaloh4_ccl[1]);

  K(E_Al,I_XP)              += + tr*(KF_AlOH4*dcaloh4_xp[0]);
  K(E_Al,I_XP+NEQ)          += - tr*(KF_AlOH4*dcaloh4_xp[1]);
  K(E_Al+NEQ,I_XP)          += - tr*(KF_AlOH4*dcaloh4_xp[0]);
  K(E_Al+NEQ,I_XP+NEQ)      += + tr*(KF_AlOH4*dcaloh4_xp[1]);
  
  K(E_Al,I_XC)              += + tr*(KF_AlOH4*dcaloh4_xc[0]);
  K(E_Al,I_XC+NEQ)          += - tr*(KF_AlOH4*dcaloh4_xc[1]);
  K(E_Al+NEQ,I_XC)          += - tr*(KF_AlOH4*dcaloh4_xc[0]);
  K(E_Al+NEQ,I_XC+NEQ)      += + tr*(KF_AlOH4*dcaloh4_xc[1]);

  K(E_Al,I_XF)              += + tr*(KF_AlOH4*dcaloh4_xf[0]);
  K(E_Al,I_XF+NEQ)          += - tr*(KF_AlOH4*dcaloh4_xf[1]);
  K(E_Al+NEQ,I_XF)          += - tr*(KF_AlOH4*dcaloh4_xf[0]);
  K(E_Al+NEQ,I_XF+NEQ)      += + tr*(KF_AlOH4*dcaloh4_xf[1]);

  K(E_Al,I_si)             += +tr*KM_AlOH4;
  K(E_Al,I_si+NEQ)         += -tr*KM_AlOH4;
  K(E_Al+NEQ,I_si)         += -tr*KM_AlOH4;
  K(E_Al+NEQ,I_si+NEQ)     += +tr*KM_AlOH4;

   /*
    Conservation de si (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
  */

  K(E_si,I_si)              += +  surf/dx*KF_PS;
  K(E_si,I_si+NEQ)          += -  surf/dx*KF_PS;
  K(E_si+NEQ,I_si)          += -  surf/dx*KF_PS;
  K(E_si+NEQ,I_si+NEQ)      += +  surf/dx*KF_PS;

  return(0) ;
 
#undef C_Cl
#undef XC
#undef C_Na
#undef C_K
#undef XP
#undef XF
#undef XA
#undef si

#undef C_OH
#undef C_Ca
#undef C_AlOH4

#undef KF_Cl
#undef KF_OH
#undef KF_Na
#undef KF_K 
#undef KF_H 
#undef KF_Ca 
#undef KF_AlOH4

#undef KM_Cl
#undef KM_OH
#undef KM_Na      
#undef KM_K  
#undef KM_H  
#undef KM_Ca  
#undef KM_AlOH4 

#undef KF_PS

#undef K
}

void rs42(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t)
/* Residu (r) */
{
#define N_Cln(n)     (f_n[(n)])
#define N_OHn(n)     (f_n[(n+2)])
#define N_Nan(n)     (f_n[(n+4)])
#define N_Kn(n)      (f_n[(n+6)])
#define N_Can(n)     (f_n[(n+8)])
#define N_Aln(n)     (f_n[(n+10)])
#define N_AlOH3n(n)  (f_n[(n+12)])
#define N_sin(n)      (f_n[(n+26)])

#define N_Cl1(n)    (f_1[(n)])
#define N_OH1(n)    (f_1[(n+2)])
#define N_Na1(n)    (f_1[(n+4)])
#define N_K1(n)     (f_1[(n+6)])
#define N_Ca1(n)    (f_1[(n+8)])
#define N_Al1(n)    (f_1[(n+10)])
#define N_AlOH31(n) (f_1[(n+12)])
#define N_si1(n)    (f_1[(n+26)])

#define W_Cl        (f_1[14])
#define W_OH        (f_1[15])
#define W_Na        (f_1[16])
#define W_K         (f_1[17])
#define W_Ca        (f_1[18])
#define W_Al        (f_1[19])

#define W_PS        (f_1[28])

#define R(n,i)    (r[(n)*NEQ+(i)])

  double dx ,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;

  /* initialisation */
  for(i=0;i<el.nn*NEQ;i++) r[i] = zero ;

  if(el.dim < dim) return ;

  /*
    CALCUL DE volume ET DE surf
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;
  /*
    Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
  R(0,E_Cl) -= volume[0]*(N_Cl1(0) - N_Cln(0)) + dt*surf*(W_Cl);
  R(1,E_Cl) -= volume[1]*(N_Cl1(1) - N_Cln(1)) - dt*surf*(W_Cl) ;
  /*
      Conservation de OH (hydroxy-hydro) : [(n_OH1 - n_OHn)-(n_H1 - n_Hn)] + dt * div(w_OH-w_H) = 0
    */
  R(0,E_OH) -= volume[0]*(N_OH1(0) - N_OHn(0)) + dt*surf*(W_OH) ;
  R(1,E_OH) -= volume[1]*(N_OH1(1) - N_OHn(1)) - dt*surf*(W_OH) ;
  /*
    Conservation de Na (natrie) : (n_Na1 - n_Nan) + dt * div(w_Na) = 0
  */
  R(0,E_Na) -= volume[0]*(N_Na1(0) - N_Nan(0)) + dt*surf*(W_Na);
  R(1,E_Na) -= volume[1]*(N_Na1(1) - N_Nan(1)) - dt*surf*(W_Na) ;
 /*
    Conservation de K (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
  */
  R(0,E_K) -= volume[0]*(N_K1(0) - N_Kn(0)) + dt*surf*(W_K) ;
  R(1,E_K) -= volume[1]*(N_K1(1) - N_Kn(1)) - dt*surf*(W_K) ;
 /*
    Conservation de Ca (kali) : (n_Ca1 - n_Can) + dt * div(w_Ca) = 0
  */
  R(0,E_Ca) -= volume[0]*(N_Ca1(0) - N_Can(0)) + dt*surf*(W_Ca);
  R(1,E_Ca) -= volume[1]*(N_Ca1(1) - N_Can(1)) - dt*surf*(W_Ca) ;

 /*
    Conservation de Al (kali) : (n_Al1 - n_Aln) + dt * div(w_Al) = 0
  */
  R(0,E_Al) -= volume[0]*(N_Al1(0) - N_Aln(0)) + dt*surf*(W_Al) ;
  R(1,E_Al) -= volume[1]*(N_Al1(1) - N_Aln(1)) - dt*surf*(W_Al) ;

 /*
    Conservation AlOH3
  */
  R(0,E_A) -= volume[0]*(N_AlOH31(0));
  R(1,E_A) -= volume[1]*(N_AlOH31(1));

 /*
    Conservation de si (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
  */
  R(0,E_si) -= volume[0]*N_si1(0) + surf*W_PS;
  R(1,E_si) -= volume[1]*N_si1(1) - surf*W_PS;

#undef N_Cln
#undef N_OHn
#undef N_Nan
#undef N_Kn
#undef N_Can
#undef N_Aln
#undef N_AlOH3n
#undef N_sin

#undef N_Cl1
#undef N_OH1
#undef N_Na1
#undef N_K1
#undef N_Ca1
#undef N_Al1
#undef N_AlOH31
#undef N_si1

#undef W_Cl
#undef W_OH
#undef W_Na
#undef W_K
#undef W_Ca
#undef W_Al

#undef W_PS

#undef R
}

int so42(double **x,double **u,double *f,double *va,double *s,resu_t *r,elem_t el,int dim,int geom,double t)
/* Les valeurs exploitees (s) */
{
#define C_Cl(n)     (u[(n)][I_Cl])
#define XP(n)       (u[(n)][I_XP])
#define XC(n)       (u[(n)][I_XC])
#define XF(n)	    (u[(n)][I_XF])
#define C_Na(n)     (u[(n)][I_Na])
#define C_K(n)      (u[(n)][I_K])
#define XA(n)       (u[(n)][I_XA])
#define si(n)       (u[(n)][I_si])

#define C_OH(n)     (f[(n+20)])
#define C_Ca(n)     (f[(n+22)])
#define C_AlOH4(n)  (f[(n+24)])

  int    i,j,nso ;
  double c_cl,s_cl,c_oh,c_na,c_k,c_ca,c_h,c_aloh4,s_ch,s_c3a,s_sf,s_aloh3;
  double xp,yp,xc,yc,xf,yf,xa,ya,sii;
  double zero = 0.,deux = 2. ;
  double phi;
  
  /*
    Donnees
  */

  phio     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  RT	    = R_g*el.mat->pr[pm("T")] ;

  s_chrf   = el.mat->pr[pm("s_caoh2")] ;
  s_c3arf  = el.mat->pr[pm("s_c3ah6")] ;
  s_sfrf   = el.mat->pr[pm("s_sel")] ;
  s_aloh3rf= el.mat->pr[pm("s_aloh3")] ;

  s_csh    = el.mat->pr[pm("s_csh")] ;
  anpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;

  s_ch_o      = el.mat->pr[pm("s_caoh2_o")] ;
  s_sf_o      = el.mat->pr[pm("s_sel_o")] ;
  s_c3a_o     = el.mat->pr[pm("s_c3ah6_o")] ;
  s_aloh3_o   = el.mat->pr[pm("s_aloh3_o")] ;

  /* initialisation */
  nso = 15 ;

  for(i=0;i<nso;i++) for(j=0;j<9;j++) r[i].v[j] = zero ;

  
  /* concentration */
  if(s[0] < (x[0][0] + x[1][0])/deux) 
    {
      c_cl = C_Cl(0) ;
      c_oh = C_OH(0) ;
      c_na = C_Na(0) ;
      c_k  = C_K(0) ;
      c_ca = C_Ca(0);
      c_aloh4 =C_AlOH4(0);
      c_h = k_e/c_oh;

     xc       = XC(0);    yc	  = fabs(xc);				
     xp	      = XP(0);	  yp	  = fabs(xp);
     xf	      = XF(0);    yf      = fabs(xf);
     xa	      = XA(0);    ya      = fabs(xa);

     s_ch   = 0.5*(xp+yp)*s_chrf;	 		
     s_c3a  = 0.5*(xc+yc)*s_c3arf;		
     s_sf   = 0.5*(xf+yf)*s_sfrf;		
     s_aloh3= 0.5*(xa+ya)*s_aloh3rf;		

     sii = si(0);
   }
  else 
    {
      c_cl = C_Cl(1) ;
      c_oh = C_OH(1) ;
      c_na = C_Na(1) ;
      c_k  = C_K(1) ;
      c_ca = C_Ca(1) ;
      c_aloh4 =C_AlOH4(1);
      c_h = k_e/c_oh;

     xc       = XC(1);    yc	  = fabs(xc);				
     xp	      = XP(1);	  yp	  = fabs(xp);
     xf	      = XF(1);    yf      = fabs(xf);  
     xa	      = XA(1);    ya      = fabs(xa);

     s_ch   = 0.5*(xp+yp)*s_chrf;	 		
     s_c3a  = 0.5*(xc+yc)*s_c3arf;		
     s_sf   = 0.5*(xf+yf)*s_sfrf;		
     s_aloh3= 0.5*(xa+ya)*s_aloh3rf;		

     sii =si(1);
}

    s_cl     = anpha*s_csh*c_cl*beta/(c_oh+beta*c_cl);
    phi = phio + (s_ch_o-s_ch)*v_caoh2+(s_sf_o-s_sf)*v_sel+(s_c3a_o-s_c3a)*v_c3ah6+(s_aloh3_o-s_aloh3)*v_aloh3;

  /* quantites exploitees */

  strcpy(r[0].text,"c_Cl") ; r[0].n = 1 ;
  r[0].v[0] = c_cl ;
  strcpy(r[1].text,"s_Cl ") ; r[1].n = 1 ;
  r[1].v[0] = phi*c_cl + (s_cl+2*s_sf);
  strcpy(r[2].text,"c_OH") ; r[2].n = 1 ;
  r[2].v[0] = c_oh ;
  strcpy(r[3].text,"c_Na") ; r[3].n = 1 ;
  r[3].v[0] = c_na ;
  strcpy(r[4].text,"c_K") ; r[4].n = 1 ;
  r[4].v[0] = c_k ;
  strcpy(r[5].text,"c_H") ; r[5].n = 1 ;
  r[5].v[0] = c_h ; 
  strcpy(r[6].text,"c_Ca") ; r[6].n = 1 ;
  r[6].v[0] = c_ca; 
  strcpy(r[7].text,"c_AlOH4") ; r[7].n = 1 ;
  r[7].v[0] = c_aloh4; 
  strcpy(r[8].text,"s_caoh2") ; r[8].n = 1 ;
  r[8].v[0] = s_ch; 
  strcpy(r[9].text,"s_c3a") ; r[9].n = 1 ;
  r[9].v[0] = s_c3a; 
  strcpy(r[10].text,"s_sf") ; r[10].n = 1 ;
  r[10].v[0] = s_sf; 
  strcpy(r[11].text,"s_aloh3") ; r[11].n = 1 ;
  r[11].v[0] = s_aloh3; 
  strcpy(r[12].text,"porosite") ; r[12].n = 1 ;
  r[12].v[0] = phi; 
  strcpy(r[13].text,"charge") ; r[13].n = 1 ;
  r[13].v[0] =(z_cl*c_cl+z_oh*c_oh+z_aloh4*c_aloh4+z_na*c_na+z_k*c_k+z_h*c_h+z_ca*c_ca); 
  strcpy(r[14].text,"potentiel") ; r[14].n = 1 ;
  r[14].v[0] =sii; 

  return(nso) ;

#undef C_Cl
#undef XP
#undef XC
#undef XF
#undef C_Na
#undef C_K
#undef XA
#undef si

#undef C_OH
#undef C_Ca
#undef C_AlOH4

}
#undef NEQ 

#undef E_Cl
#undef E_OH
#undef E_Na
#undef E_K 
#undef E_Ca
#undef E_Al

#undef I_Cl   
#undef I_XP   
#undef I_XC  	
#undef I_XF 	
#undef I_Na   
#undef I_K  	

/*valence*/
#undef z_cl   
#undef z_oh   
#undef z_na  	
#undef z_k    
#undef z_h    
#undef z_ca   
#undef z_aloh4

/*coefficient de diffusion dans l'eau dilue*/

#undef do_cl   
#undef do_oh   
#undef do_na   
#undef do_k    
#undef do_h    
#undef do_ca   
#undef do_aloh4

/* constant d'equilibre */
#undef k_e
#undef k_p 
#undef k_c 
#undef k_f 
#undef k_a 

/* volume molaire */
#undef v_caoh2
#undef v_c3ah6
#undef v_sel 
#undef v_aloh3 

#undef epsi_o
#undef F  
#undef R_g

#undef s_oho  
