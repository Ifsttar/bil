/*
	Sel NaCl
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include "../defs.h"
#include "../lib.h"

#define TITLE "Sechage isotherme avec sels (T.Q. Nguyen) (nov. 2008)"
/* Macros */
#define NEQ 	(2)
#define NVI     (13)
#define NVE     (12)

#define E_eau	(0)
#define E_Cl	(1)

#define I_Pv    (0)
#define I_ZS    (1)

#define P_v(n)      (u[(n)][I_Pv])
#define ZS(n)       (u[(n)][I_ZS])

#define N_V(n)      (f[(n)])
#define N_W(n)      (f[(n+2)])
#define N_Cl(n)     (f[(n+4)])

#define W_V         (f[6])
#define W_W         (f[7])
#define W_Cl        (f[8])

#define C_Cl(n)     (f[(9+n)])
#define P_l(n)      (f[(11+n)])

#define KD_W        (va[(0)])
#define KF_V        (va[(1)])

#define KF_Cl       (va[(2)])
#define KF_Na       (va[(3)])

#define KD_Cl       (va[(4)])
#define KD_Na       (va[(5)])

#define WA_Cl       (va[(6)])
#define WA_Na       (va[(7)])

#define C_W(n)      (va[(8+n)])
#define LNA_W(n)    (va[(10+n)])

/* valences */
#define z_cl      (-1.)
#define z_na      (1.)

/* volumes molaires partiels liquide (moles/m3) */
#define v_h2o     (1.80e-5)
#define v_na      (1.87e-5)
#define v_cl      (2.52e-6)

/* volumes molaires solides (moles/m3) */
#define v_nacl    (24.5e-6)

/* coefficients de diffusion moleculaire (m2/s) */
#define do_cl     (2.032e-9)
#define do_na     (1.334e-9)

/* constante d'equilibre */
#define K_nacl    (6.e3)      /* Solubilite de NaCl (moles/m3) */

/* constante physique */
#define FARADAY   (9.64846e4) /* Faraday (C/mole) */
#define T         (293.)      /* Temperature (K) */
#define RT        (2436.)     /* Produit R = 8.3143 et T = 293. (J/mole) */

/* viscosites (Pa.s) */
#define mu_g      (1.8e-5)
#define mu_l      (1.002e-3)

/* Masses molaires (kg/mole) */
#define M_h2o     (1.8e-2)
#define M_air     (2.896e-2)

/* autres */
#define p_atm     (1.01325e5) /* Pression atmospherique (Pa) */
#define p_g       (p_atm)     /* Pression du gaz (Pa) */

/* Pression de vapeur (Pa) */
#define P_VS(T)	  (609.14*pow(10.,7.45*(T - 273.)/(T - 38.)))

/* Fonctions */
static int    pm(char *s) ;
static double activite(double,double,double,double,double *) ;
extern double lng_LinLee(double,double,double,double,double,double) ;
extern double lna_i(double,double,double,double,double,double) ;
extern double lng_TQN(double,double,double,double,double,double,double,double) ;
static void   flux(double**,double**,double*,double*,elem_t,int,geom_t) ;
extern void   ecrit_courbe(char*) ;


/* Parametres */
static double phio,r_d,k_int,p_vs ;
static double s_naclrf ;
static double d_cl,d_va ;

int pm(char *s)
{
  if(strcmp(s,"porosite") == 0) return (0) ;
  else if(strcmp(s,"D_Cl") == 0) return (1);  
  else if(strcmp(s,"r_d") == 0) return (2);
  else if(strcmp(s,"k_int") == 0) return (3);
  else if(strcmp(s,"d_va") == 0) return (4);
  else if(strcmp(s,"s_srf") == 0) return (5) ;
  else if(strcmp(s,"courbes") == 0) return (6);
  else {
    printf("donnee \"%s\" non connue (pm26)\n",s) ; exit(0) ;
  }
}

int dm26(int dim,mate_t *mat,FILE *ficd)
/* Lecture des donnees materiaux dans le fichier ficd */
{
  int    n_donnees = 7 ;

  if(dim > 1) arret("dm26 : dimension > 1 non prevue") ;

  mat->neq = NEQ ;

  strcpy(mat->eqn[E_eau],"liq") ;
  strcpy(mat->eqn[E_Cl],"sel") ;

  strcpy(mat->inc[I_Pv],"p_v") ;
  strcpy(mat->inc[I_ZS],"x_s") ;

  dmat(mat,ficd,pm,n_donnees) ;

  return(mat->n) ;
}

int qm26(int dim,FILE *ficd)
/* Saisie des donnees materiaux */
{
  printf(TITLE) ;
  
  if(!ficd) return(NEQ) ;

  printf("\n\n\
Le systeme est forme de 2 equations :\n\
\t 1. Conservation de la masse d\'eau (p_v)\n\
\t 2. Conservation de la masse de sel (x_s)\n") ;
  
  printf("\n\
Exemple de donnees\n\n") ;

  fprintf(ficd,"porosite = 0.12 # Porosite\n") ;
  fprintf(ficd,"D_Cl = 6.25e-12 # Diffusion effective de Cl\n") ;
  fprintf(ficd,"r_d = # Rapport des tortuosites des anions et des cations\n") ;
  fprintf(ficd,"s_nacl = # Contenu en sel de reference (mol/m3)\n") ;
  fprintf(ficd,"activite = # model de calcul activite de la solution\n") ;
  fprintf(ficd,"isotherme = # type de l'isotherme\n") ;

  return(NEQ) ;
}

void tb26(elem_t *el,inte_t *fi,int *n_fi,int dim,int geom,int *nv)
{
  el->n_vi = NVI ; /* implicite */
  el->n_ve = NVE ; /* explicite */
}

void ch26(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t,char_t cg)
/* Residu du aux chargements (r) */
{
  int    i ;

  chsurf(x,r,dim,geom,dt,t,cg,el) ;
  for(i=0;i<NEQ*el.nn;i++) r[i] = -r[i] ;

}

void in26(double **x,double **u,double *f,double *va,elem_t el,int dim,int geom)
/* Initialise les variables du systeme (f,va) */ 
{
  int    i ;

  if(el.dim < dim) return ;
  /*
    Donnees
  */
  phio     = el.mat->pr[pm("porosite")] ;
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d	   = el.mat->pr[pm("r_d")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  d_va	   = el.mat->pr[pm("d_va")];
  s_naclrf = el.mat->pr[pm("s_srf")] ;
  
  p_vs	   = P_VS(T) ;

  /* Contenus molaires */
  for(i=0;i<el.nn;i++) {
    /* Variable z = s/s_rf + P/K - 1 */
    double zs  = ZS(i) ;  
    double p_v = P_v(i) ;
    double c_cl,c_na,s_nacl,c_w ;
    double s_w,s_g ;
    double p_l,p_c ;
    double phi ;
    double lna_w,lna[2] ;
    double rho_v ;
    double un = 1. ;

    /* teneurs en solide */
    s_nacl  = 0.5*(zs + fabs(zs))*s_naclrf ;

    /* concentrations */
    c_cl    = K_nacl*(1. + 0.5*(zs - fabs(zs))) ;
    c_na    = c_cl ;
    c_w     = (un - (c_cl*v_cl + c_na*v_na))/v_h2o ;   
  
    /* activite de l'eau */ 
    lna_w = activite(c_cl,c_na,c_w,T,lna) ;

    /* pressions */
    p_l = RT*c_w*(log(p_v/p_vs) - lna_w) + p_g ;
    p_c = p_g - p_l ;

    rho_v = M_h2o/RT*p_v ;

    /* saturations */
    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un - s_w ;
        
    /* porosite */
    phi  = phio - s_nacl*v_nacl ;

    /* contenus molaires */
    N_V(i)   = rho_v*phi*s_g ;  
    N_W(i)   = M_h2o*c_w*phi*s_w ;  
    N_Cl(i)  = c_cl*phi*s_w + s_nacl ; 

    /* sauvegarde */
    C_Cl(i)  = c_cl ;
    P_l(i)   = p_l ;
  }

  /* Coefficients de transfert */
  {
    ex_t ex26 ;
    ex26(x,u,f,va,el,dim,geom,0.) ; 
  }

  /* Flux */
  flux(x,u,f,va,el,dim,geom) ;
}


int ex26(double **x,double **u,double *f,double *va,elem_t el,int dim,geom_t geom,double t) 
/* Termes explicites (va)  */
{
#define c_e(n)      (va[(8+n)])
#define lna_es(n)   (va[(10+n)])

#define lna_cl(n)    (lna[n][0])
#define lna_na(n)    (lna[n][1])

  double c_cl,c_na,lna[2][2],xs,ys,s_s;
  double s_w,s_g,k_rw,k_re,p_c,p_v,p_l[2];
  double fa,dx,ton,top,phii[2],phif,g;
  double zero = 0.,un = 1.,deux = 2. ;
  int i;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  phio     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d    = el.mat->pr[pm("r_d")] ;
  k_int	  = el.mat->pr[pm("k_int")] ;
  d_va	  = el.mat->pr[pm("d_va")] ;
  s_naclrf    = el.mat->pr[pm("s_srf")] ;

  p_vs	  = P_VS(T) ;
  /* Contenus molaires */
  for(i=0;i<el.nn;i++) {
    xs   = ZS(i);    ys   = fabs(xs);
    c_cl = C_Cl(i);
    c_na = c_cl;

    c_e(i)   = (un - (c_cl*v_cl+ c_na*v_na))/v_h2o ;   
    lna_es(i) = activite(c_cl,c_na,c_e(i),T,lna[i]);	

    s_s  = 0.5*(xs+ys)*s_naclrf;
    phii[i]  = phio - s_s*v_nacl ;

    p_v = P_v(i);
    p_l[i] = RT*c_e(i)*(log(p_v/p_vs)-lna_es(i))+p_atm;
  }
 
 /* Coefficient de transfert */

    p_v     = (P_v(0)+P_v(1))/deux ;
    p_c     = p_atm-0.5*(p_l[0]+p_l[1]);
  

    s_w     = courbe(p_c,el.mat->cb[0]) ;
    s_g     = un -s_w;    if (s_g<zero) s_g = zero;

    phif    = (phii[0]+phii[1])/deux ;

    k_rw    = courbe(p_c,el.mat->cb[1]) ;
    /*    k_re    = un/(un+pow(-10.*log(s_w),2.)); */
    k_re=k_rw;
    fa      = pow(s_g,10./3.)*pow(phif,4./3.);

    /*    k_int = k_int*pow(phif/phio,3.)*pow((un-phio)/(un-phif),2.); */

    KD_W  = 0.5*(c_e(0)+c_e(1))*M_h2o*k_int/mu_l*k_rw;  
    KF_V = d_va*fa*M_h2o/RT/p_atm;  

    c_cl     = (C_Cl(0)+C_Cl(1))/deux ;
    c_na     = c_cl;

    KD_Cl = k_int/mu_l*k_rw*c_cl;
    KD_Na = k_int/mu_l*k_rw*c_na;

    g = (0.001+0.07*pow(phif,2.)+1.8*((phif<=0.18) ? 0.: 1.)*pow(phif-0.18,2.));
    g = phif/phio*g/(0.001+0.07*pow(phio,2.)+1.8*((phio<=0.18) ? 0.: 1.)*pow(phio-0.18,2.));

    d_cl = d_cl*g;

    ton = d_cl/do_cl*k_re;
    top = ton/r_d;

    KF_Cl  = ton*do_cl;
    KF_Na  = top*do_na;

    dx     = x[1][0] - x[0][0];
    WA_Cl   = - c_cl*KF_Cl*(lna_cl(1)-lna_cl(0))/dx;
    WA_Na   = - c_na*KF_Na*(lna_na(1)-lna_na(0))/dx;
  
    return(0) ;

#undef c_e
#undef lna_es

#undef lna_cl
#undef lna_na
}

int ct26(double **x,double **u,double **u_n,double *f,double *f_n,double *va,elem_t el,int dim,int geom,double dt,double t)
/* Les variables donnees par la loi de comportement (f_1) */
{
#define c_e(n)      (va[(8+n)])
#define lna_es(n)   (va[(10+n)])

  double s_w,s_g,c_cl,c_na,xs,ys,s_s;
  double grd_pw,grd_pvg,grd_cl,grd_na,grd_si;
  double p_v,pl[2],p_c;
  int    i;
  double dx;
  double S_Dcz2, phi;
  double un = 1. ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */

  phio     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d	  = el.mat->pr[pm("r_d")] ;
  k_int	  = el.mat->pr[pm("k_int")] ;
  d_va	  = el.mat->pr[pm("d_va")] ;
  s_naclrf    = el.mat->pr[pm("s_srf")] ;
   
  p_vs	  = P_VS(T) ;
  /* Contenus molaires */

 for(i=0;i<el.nn;i++) {
    xs   = ZS(i);    ys   = fabs(xs);
    C_Cl(i) = K_nacl*(0.5*(xs-ys)+1.);
    c_cl = C_Cl(i);
    c_na = c_cl;
    s_s  = 0.5*(xs+ys)*s_naclrf;	 		

    phi  = phio - s_s*v_nacl ;

    p_v = P_v(i);
    pl[i] = RT*c_e(i)*(log(p_v/p_vs)-lna_es(i))+p_atm;
    p_c = p_atm-pl[i];
 

    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un -s_w;

    N_V(i)   = phi*M_h2o/RT*p_v*s_g;  
    N_W(i)   = phi*s_w*c_e(i)*M_h2o;  

    N_Cl(i)  = phi*s_w*c_cl+s_s;

    if(xs <= -1. || s_w<0.||s_w>1.||p_v<=0||phi<=0.) {
      printf("\n\
x       = %e\n\
p_v     = %e\n\
s_w     = %e\n\
p_c     = %e\n\
x_s     = %e\n\
phi     = %e\n",x[i][0],p_v,s_w,p_c,xs,phi) ;
      return(-1) ;
    }
    P_l(i)   = pl[i] ;
 }

    /* Flux */
    dx     = x[1][0] - x[0][0];

    grd_cl = (C_Cl(1) - C_Cl(0))/dx ;
    grd_na = grd_cl; 
    S_Dcz2 = KF_Cl*z_cl*z_cl +KF_Na*z_na*z_na ;  
    grd_si =-(z_cl*(KF_Cl*grd_cl-WA_Cl)+z_na*(KF_Na*grd_na-WA_Na))/S_Dcz2;
	
    grd_pw = (pl[1]-pl[0])/dx;
    grd_pvg= (P_v(1) - P_v(0))/dx;

    W_W    = - KD_W*grd_pw;
    W_V    = - KF_V*grd_pvg;

/*    W_Cl   = - KF_Cl*grd_cl - KD_Cl*grd_pw;*/

    W_Cl   = - KF_Cl*grd_cl - KF_Cl*z_cl*grd_si - KD_Cl*grd_pw;

    return(0) ;

#undef c_e
#undef lna_es
}

int mx26(double **x,double **u,double **u_n,double *f,double *f_n,double *va,double *k,elem_t el,int dim,int geom,double dt,double t)
/* Matrice (k) */
{
#define K(i,j)    (k[(i)*el.nn*NEQ+(j)])

  double tr ;
  double s_w,p_c,p_v,p_l,s_g,zs,c_cl,c_na,s_nacl ;
  double dx,xm, dsw_dpc,phi,dccl_zs[2],dys_zs;
  double volume[2],surf,S_Dcz2 ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;
  
  /* initialisation */
  for(i=0;i<el.nn*el.nn*NEQ*NEQ;i++) k[i] = zero ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  
  phio    = el.mat->pr[pm("porosite")] ; 
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d	  = el.mat->pr[pm("r_d")] ;
  p_vs	  = P_VS(T) ;
  k_int	  = el.mat->pr[pm("k_int")] ;
  d_va	  = el.mat->pr[pm("d_va")] ;

  s_naclrf    = el.mat->pr[pm("s_srf")] ;

  /*
    CALCUL DE volume ET DE surf 
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;

  /* termes d'accumulation */
  for(i=0;i<2;i++) {
    zs   = ZS(i) ;
    c_cl = C_Cl(i);
    c_na = c_cl;
    s_nacl   = 0.5*(zs+fabs(zs))*s_naclrf;	 		
    if (zs>zero) dys_zs = un; else dys_zs = - un; 	

    phi = phio - s_nacl*v_nacl ;

    p_v = P_v(i);
    p_l = RT*C_W(i)*(log(p_v/p_vs)-LNA_W(i))+p_g;
    /*  p_l = P_l(i) ; */
    p_c = p_g-p_l;
 
    dccl_zs[i]= K_nacl*0.5*(un-dys_zs);  

    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un - s_w ;

    dsw_dpc  = dcourbe(p_c,el.mat->cb[0]) ;

    /*
      Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
    */
    K(i*NEQ+E_Cl,i*NEQ+I_ZS) += volume[i]*(phi*s_w*dccl_zs[i]+0.5*(un+dys_zs)*s_naclrf) ;
    K(i*NEQ+E_Cl,i*NEQ+I_Pv) += volume[i]*(phi*c_cl)*(-dsw_dpc*C_W(i)*RT/p_v) ;
    K(i*NEQ+E_Cl,i*NEQ+I_ZS) += -volume[i]*(s_w*c_cl*v_nacl*0.5*(un+dys_zs)*s_naclrf) ;

    /*
      Conservation de Vapeur (V) : (n_V1 - n_Vn) + dt * div(w_V) = 0
    */

    K(i*NEQ+E_eau,i*NEQ+I_Pv) += volume[i]*(phi*M_h2o/RT)*(s_g+p_v*dsw_dpc*C_W(i)*RT/p_v) ;
    K(i*NEQ+E_eau,i*NEQ+I_ZS) += volume[i]*(M_h2o/RT*p_v*s_g)*(-v_nacl*0.5*(un+dys_zs)*s_naclrf) ;

   /*
      Conservation de Humidite (W) : (n_W1 - n_Wn) + dt * div(w_W) = 0
    */

      K(i*NEQ+E_eau,i*NEQ+I_Pv) += volume[i]*(phi*M_h2o*C_W(i))*(-dsw_dpc*C_W(i)*RT/p_v)  ;
      K(i*NEQ+E_eau,i*NEQ+I_ZS) += volume[i]*(s_w*M_h2o*C_W(i))*(-v_nacl*0.5*(un+dys_zs)*s_naclrf)  ;
  }

  /* termes d'ecoulement */
  tr     = dt*surf/dx ;
  S_Dcz2  = KF_Cl*z_cl*z_cl + KF_Na*z_na*z_na ;   

 /*
    Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
/*
    K(E_Cl,I_ZS)             += + tr*KF_Cl*dccl_zs[0];
    K(E_Cl,I_ZS+NEQ)         += - tr*KF_Cl*dccl_zs[1];
    K(E_Cl+NEQ,I_ZS)         += - tr*KF_Cl*dccl_zs[0];
    K(E_Cl+NEQ,I_ZS+NEQ)     += + tr*KF_Cl*dccl_zs[1];
  */
    
    K(E_Cl,I_ZS)             += + tr*KF_Cl*dccl_zs[0] - tr*KF_Cl*pow(z_cl,2.)*KF_Cl/S_Dcz2*dccl_zs[0];
    K(E_Cl,I_ZS+NEQ)         += - tr*KF_Cl*dccl_zs[1] + tr*KF_Cl*pow(z_cl,2.)*KF_Cl/S_Dcz2*dccl_zs[1];
    K(E_Cl+NEQ,I_ZS)         += - tr*KF_Cl*dccl_zs[0] + tr*KF_Cl*pow(z_cl,2.)*KF_Cl/S_Dcz2*dccl_zs[0];
    K(E_Cl+NEQ,I_ZS+NEQ)     += + tr*KF_Cl*dccl_zs[1] - tr*KF_Cl*pow(z_cl,2.)*KF_Cl/S_Dcz2*dccl_zs[1];

    K(E_Cl,I_ZS)             += - tr*KF_Cl*z_cl*z_na*KF_Na/S_Dcz2*dccl_zs[0];
    K(E_Cl,I_ZS+NEQ)         += + tr*KF_Cl*z_cl*z_na*KF_Na/S_Dcz2*dccl_zs[1];
    K(E_Cl+NEQ,I_ZS)         += + tr*KF_Cl*z_cl*z_na*KF_Na/S_Dcz2*dccl_zs[0];
    K(E_Cl+NEQ,I_ZS+NEQ)     += - tr*KF_Cl*z_cl*z_na*KF_Na/S_Dcz2*dccl_zs[1];


    K(E_Cl,I_Pv)              += + tr*KD_Cl*C_W(0)*RT/P_v(0);
    K(E_Cl,I_Pv+NEQ)          += - tr*KD_Cl*C_W(1)*RT/P_v(1);
    K(E_Cl+NEQ,I_Pv)          += - tr*KD_Cl*C_W(0)*RT/P_v(0);
    K(E_Cl+NEQ,I_Pv+NEQ)      += + tr*KD_Cl*C_W(1)*RT/P_v(1);

   /*
    Conservation de Vapeur (V) : (n_V1 - n_Vn) + dt * div(w_V) = 0
  */


  K(E_eau,I_Pv)             += +tr*KF_V;
  K(E_eau,I_Pv+NEQ)         += -tr*KF_V;
  K(E_eau+NEQ,I_Pv)         += -tr*KF_V;
  K(E_eau+NEQ,I_Pv+NEQ)     += +tr*KF_V; 


  /*
    Conservation de Water (W) : (n_W1 - n_Wn) + dt * div(w_W) = 0
  */

  K(E_eau,I_Pv)             += +tr*KD_W*C_W(0)*RT/P_v(0);
  K(E_eau,I_Pv+NEQ)         += -tr*KD_W*C_W(1)*RT/P_v(1);
  K(E_eau+NEQ,I_Pv)         += -tr*KD_W*C_W(0)*RT/P_v(0);
  K(E_eau+NEQ,I_Pv+NEQ)     += +tr*KD_W*C_W(1)*RT/P_v(1); 
 
  return(0) ;

#undef K
}


void rs26(double **x,double **u,double **u_n,double *f,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t)
/* Residu (r) */
{
#define N_Vn(n)      (f_n[(n)])
#define N_Wn(n)      (f_n[(n+2)])
#define N_Cln(n)     (f_n[(n+4)])

#define R(n,i)    (r[(n)*NEQ+(i)])

  double dx ,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;

  /* initialisation */
  for(i=0;i<el.nn*NEQ;i++) r[i] = zero ;

  if(el.dim < dim) return ;

  /*
    CALCUL DE volume ET DE surf
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;

  /*
    Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
  R(0,E_Cl) -= volume[0]*(N_Cl(0) - N_Cln(0)) + dt*surf*(W_Cl + WA_Cl) ;
  R(1,E_Cl) -= volume[1]*(N_Cl(1) - N_Cln(1)) - dt*surf*(W_Cl + WA_Cl) ;

  /*
    Conservation de VW (V) : [(n_V1 - n_Vn)] + dt * div(w_V) = 0
  */
  R(0,E_eau) -= volume[0]*(N_V(0)+N_W(0) - N_Vn(0)-N_Wn(0)) + dt*surf*(W_V+W_W) ;
  R(1,E_eau) -= volume[1]*(N_V(1)+N_W(1) - N_Vn(1)-N_Wn(1)) - dt*surf*(W_V+W_W);

#undef N_Wn
#undef N_Vn
#undef N_Cln

#undef R
}

int so26(double **x,double **u,double *f,double *va,double *s,resu_t *r,elem_t el,int dim,int geom,double t)
/* Les valeurs exploitees (s) */
{
  int    i,j,nso ;
  double phi,c_e,lna_es;
  double s_w,s_g,p_v,p_l,p_c,zs,c_cl,c_na,s_nacl ;
  double h_s[MAX_NOEUDS],dh_s[3*MAX_NOEUDS] ;
  double zero = 0.,un = 1.,deux = 2. ;
  double lna[2] ;

  /*
    Donnees
  */

  phio     = el.mat->pr[pm("porosite")] ; 
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d	   = el.mat->pr[pm("r_d")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  d_va	   = el.mat->pr[pm("d_va")] ;
  s_naclrf = el.mat->pr[pm("s_srf")] ;
 
  p_vs	  = P_VS(T) ;
  /* initialisation */
  nso = 11;
  for(i=0;i<nso;i++) for(j=0;j<9;j++) r[i].v[j] = zero ;

  /* fonctions d'interpolation en s */
  fint_abs(dim,el.nn,x,s,el.dim,h_s,dh_s) ;

  /* concentration */
  if(s[0] < (x[0][0] + x[1][0])/deux) {
    p_v  = P_v(0);
    c_cl = C_Cl(0);
    zs   = ZS(0);
  } else {
    p_v  = P_v(1);
    c_cl = C_Cl(1);
    zs   = ZS(1);
  }
  c_na  = c_cl;
  c_e   = (un - (c_cl*v_cl+ c_na*v_na))/v_h2o ; 
  lna_es = activite(c_cl,c_na,c_e,T,lna);  
  
  p_l  = RT*c_e*(log(p_v/p_vs)-lna_es)+p_g;
  p_c  = p_g-p_l;
  
  s_w  = courbe(p_c,el.mat->cb[0]) ;
  s_g  = un - s_w ;
  s_nacl  = 0.5*(zs+fabs(zs))*s_naclrf;	 		

  phi = phio - s_nacl*v_nacl ;

  /* quantites exploitees */
  strcpy(r[0].text,"h_r") ; r[0].n = 1 ;
  r[0].v[0] = p_v/p_vs;
  strcpy(r[1].text,"tener en eau") ; r[1].n = 1 ;
  r[1].v[0] = s_w*phi;
  strcpy(r[2].text,"Saturation") ; r[2].n = 1 ;
  r[2].v[0] = s_w;
  strcpy(r[3].text,"p_w") ; r[3].n = 1 ;
  r[3].v[0] = p_l;
  strcpy(r[4].text,"flux eau") ; r[4].n = 1 ;
  r[4].v[0] = W_W;
  strcpy(r[5].text,"flux vapeur") ; r[5].n = 1 ;
  r[5].v[0] = W_V;
  strcpy(r[6].text,"Cl libre") ; r[6].n = 1 ;
  r[6].v[0] = c_cl;
  strcpy(r[7].text,"NaCl") ; r[7].n = 1 ;
  r[7].v[0] = s_nacl;
  strcpy(r[8].text,"Cl total") ; r[8].n = 1 ;
  r[8].v[0] = phi*s_w*c_cl+s_nacl;
  strcpy(r[9].text,"phi") ; r[9].n = 1 ;
  r[9].v[0] = phi;
  strcpy(r[10].text,"Flux Cl") ; r[10].n = 1 ;
  r[10].v[0] = W_Cl+WA_Cl;
  return(nso) ;
}

void flux(double **x,double **u,double *f,double *va,elem_t el,int dim,geom_t geom)
/* Les variables donnees par la loi de comportement (f_1) */
{
  double grd_p_l,grd_p_v,grd_cl,grd_na,grd_psi ;
  double S_Dcz2 ;
  double dx = x[1][0] - x[0][0] ;
  
  /* Gradients */
  grd_cl  = (C_Cl(1) - C_Cl(0))/dx ;
  grd_p_l = (P_l(1)  - P_l(0) )/dx ;
  grd_p_v = (P_v(1)  - P_v(0) )/dx ;

  grd_na  = grd_cl ; 

  S_Dcz2 = KF_Cl*z_cl*z_cl + KF_Na*z_na*z_na ;  
  grd_psi = -(z_cl*(KF_Cl*grd_cl - WA_Cl) + z_na*(KF_Na*grd_na - WA_Na))/S_Dcz2 ;
 
  /* Flux */
  W_W    = - KD_W*grd_p_l ;
  W_V    = - KF_V*grd_p_v ;
  W_Cl   = - KD_Cl*grd_p_l - KF_Cl*grd_cl - KF_Cl*z_cl*grd_psi ;
}

#undef NEQ 

#undef E_eau
#undef E_Cl

#undef I_Pv
#undef I_ZS


#undef P_v
#undef ZS

#undef N_W
#undef N_V
#undef N_Cl

#undef W_W
#undef W_V
#undef W_Cl

#undef KD_W
#undef KF_V

#undef KF_Cl
#undef KF_Na      

#undef KD_Cl 
#undef KD_Na 

#undef WA_Cl 
#undef WA_Na 

#undef C_W
#undef LNA_W


#undef z_cl
#undef z_na

#undef do_cl
#undef do_na

#undef FARADAY
#undef T 
#undef RT

#undef v_h2o
#undef v_na 
#undef v_cl

#undef K_nacl

#undef mu_g
#undef mu_l
#undef p_atm
#undef p_g

#undef M_h2o 
#undef M_air 

#undef P_VS

double activite(double c_cl,double c_na,double c_w,double T,double *lna)
/* L'activite chimique de l'eau d'une solution de NaCl */
{
#define lna_cl    (lna[0])
#define lna_na    (lna[1])

/* valences */
#define z_cl   (-1.)
#define z_na   (+1.)

/* masse molaire */
#define M_h2o   (18.e-3)

  double m_cl,m_na,m_T ;
  double I,A,lna_w,epsi ;

  double T_0 = 273.15 ;
  double b0 = sqrt(M_h2o),S0 = pow(M_h2o,1.29) ; /* references */
  double b_na = 4.352/b0,b_cl = 1.827/b0 ; /* donnees intrinseques */
  double S_na = 26.448/S0,S_cl = 19.245/S0 ;

  double zero = 0. ;

  /* molarites */
  if(c_cl < zero) c_cl = zero ;
  if(c_na < zero) c_na = zero ;
  
  epsi = 0.0007*(T - T_0)*(T - T_0) - 0.3918*(T - T_0) + 87.663 ;
  A = 1398779.816/pow(epsi*T,1.5)/b0 ;
  
  /* molalites*M_h2o (en moles/mole) */
  m_cl = c_cl/c_w ;
  m_na = c_na/c_w ;

  /* la force ionique */
  I = 0.5*(z_cl*z_cl*m_cl + z_na*z_na*m_na) ;
  
  if (I > zero) {
    m_T =  m_cl + m_na ;

    lna_w = m_cl*lna_i(T,I,z_cl,b_cl,S_cl,A)
          + m_na*lna_i(T,I,z_na,b_na,S_na,A) ;

    /* selon Lin & Lee */
    lna_cl = lng_LinLee(T,I,z_cl,b_cl,S_cl,A) ;
    lna_na = lng_LinLee(T,I,z_na,b_na,S_na,A) ;

    /* selon TQN */
    /*
    lna_cl = lng_TQN(T,I,z_cl,b_cl,S_cl,A,lna_w,m_T) ;
    lna_na = lng_TQN(T,I,z_na,b_na,S_na,A,lna_w,m_T) ;
    */

  }  else {
    lna_cl = 0.;
    lna_na = 0.;
    lna_w  = 0.;
  }

  return(lna_w) ;

#undef lna_cl
#undef lna_na

#undef z_cl
#undef z_na

#undef M_h2o
}



void ecrit_courbe(char *line)
{ /* Ecriture des courbes materiaux dans un fichier (T.Q. Nguyen) */
  int    i,n,n1 ;
  FILE   *fic ;
  char   nom[MAX_NOM] ;
  int    n_pa ;
  double para[10];
  
  sscanf(line,"%s",nom) ;

  /* le lexeme suivant */
  strtok(line," ") ;
  line = strtok(NULL," ") ;
  if(!line) arret("ecrit_courbe(2) : aucune donnee") ;

  sscanf(line,"%d",&n_pa) ;

  for(i=0;i<n_pa;i++) {
    /* le lexeme suivant */
    line = strtok(NULL," ") ;
    if(!line) arret("ecrit_courbe(2) : aucune donnee") ;
    sscanf(line,"%lf",para+i);
  }


  fic = fopen(nom,"w") ;
  
  if(!strncmp(nom,"freundlich",3) && n_pa == 5) {
    double c_cl1,c_cl2,c_cl,dc_cl,s_cl ;
    double anpha,beta ;
    c_cl1  =para[0];			c_cl2  =para[1];
    n	 =para[2];			anpha  =para[3];
    beta	 =para[4];
    fprintf(fic,"#Isotherme de fixation de type freundlich\n");
    fprintf(fic,"#c_cl(1) s_cl(2)\n");
    n1 = n-1 ;
    dc_cl = (c_cl2-c_cl1)/n1 ;
    for(i=0;i<n;i++){
      c_cl = c_cl1 + i*dc_cl ;
      s_cl = anpha*pow(c_cl,beta);
      fprintf(fic,"%e %e\n",c_cl,s_cl); 	
    }
  } else if(!strncmp(nom,"NewIsotherme",3) && n_pa == 6) {
    double c_cl1,c_cl2,c_cl,dc_cl,s_cl ;
    double anpha,beta,gamma ;
    c_cl1  =para[0];			c_cl2  =para[1];
    n	 =para[2];			anpha	 =para[3];
    beta  =para[4];                       gamma    =para[5];
    fprintf(fic,"#Isotherme de fixation de type New\n");
    fprintf(fic,"#c_cl(1) s_cl(2)\n");
    n1 = n-1 ;
    dc_cl = (c_cl2-c_cl1)/n1 ;
    for(i=0;i<n;i++){
      c_cl = c_cl1 + i*dc_cl ;
      s_cl = anpha*pow(c_cl,beta)+gamma;
      fprintf(fic,"%e %e\n",c_cl,s_cl);
    }
  } else if(!strncmp(nom,"langmuir",3) && n_pa == 5) {
    double c_cl1,c_cl2,c_cl,dc_cl,s_cl ;
    double anpha,c_eq ;
    c_cl1  =para[0];			c_cl2  =para[1];
    n	 =para[2];			c_eq	 =para[3];
    anpha  =para[4]; 
    fprintf(fic,"#Isotherme de fixation de type langmuire\n");
    fprintf(fic,"#c_cl(1) s_cl(2)\n");
    n1 = n-1 ;
    dc_cl = (c_cl2-c_cl1)/n1 ;
    for(i=0;i<n;i++){
      c_cl = c_cl1 + i*dc_cl ;
      s_cl = c_eq*c_cl/(1+anpha*c_cl);
      fprintf(fic,"%e %e\n",c_cl,s_cl);
    }
  } else if(!strncmp(nom,"lineaire",3) && n_pa == 4){
    double c_cl1,c_cl2,c_cl,dc_cl,s_cl ;
    double K ;
    c_cl1  =para[0];	c_cl2  =para[1];			
    n	 =para[2];	K 	 =para[3];
    fprintf(fic,"#Isotherme de fixation de type linéaire\n");
    fprintf(fic,"#c_cl(1) s_cl(2)\n");
    n1 = n-1 ;
    dc_cl = (c_cl2-c_cl1)/n1 ;
    for(i=0;i<n;i++)	{
      c_cl = c_cl1 + i*dc_cl ;
      s_cl = K*c_cl;
      fprintf(fic,"%e %e\n",c_cl,s_cl);
    }
  } else if(!strncmp(nom,"k_rwMoualem",5) && n_pa == 4){
    double s_w1,s_w2,s_w,ds_w,k_rw ;
    double m ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	m 	 =para[3];
    fprintf(fic,"#Permeabilite relative a l'eau (model Moualem)\n");
    fprintf(fic,"#s_w(1) k_rw(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      k_rw = pow(s_w,0.5)*pow(1-pow(1-pow(s_w,1./m),m),2.);
      fprintf(fic,"%e %e\n",s_w,k_rw);
    }
  } else if(!strncmp(nom,"k_rgMoualem",5) && n_pa == 4){
    double s_w1,s_w2,s_w,ds_w,k_rg ;
    double m ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	m 	 =para[3];
    fprintf(fic,"#Permeabilite relative au gaz (model Moualem)\n");
    fprintf(fic,"#s_w(1) k_rg(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      k_rg = pow(1-s_w,0.5)*pow(1-pow(s_w,1./m),2.*m);      fprintf(fic,"%e %e\n",s_w,k_rg);
    } 
  } else if(!strncmp(nom,"s_pcVan",5) && n_pa == 5){
    double p_c1,p_c2,p_c,dp_c,s_w ;
    double a,b ;
    p_c1  =para[0];	p_c2  =para[1];			
    n     =para[2];	a     =para[3];	b 	 =para[4];
    fprintf(fic,"#Pression capillaire (model Van Genuchten)\n");
    fprintf(fic,"#p_c(1) s_w(2)\n");
    n1 = n-1 ;
    dp_c = (p_c2-p_c1)/n1 ;
    for(i=0;i<n;i++)	{
      p_c = p_c1 + i*dp_c ;
      s_w = pow(pow(p_c/a,b/(b-1))+1.,-1./b);
      fprintf(fic,"%e %e\n",p_c,s_w);
    }
  } else if(!strncmp(nom,"pc_sVan",5) && n_pa == 5){
    double s_w1,s_w2,s_w,ds_w,p_c ;
    double a,b ;
    s_w1  =para[0];	s_w2  =para[1];			
    n     =para[2];	a 	 =para[3];	b 	 =para[4];
    fprintf(fic,"#Pression capillaire (model Van Genuchten)\n");
    fprintf(fic,"#s_w(1) p_c(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      p_c = a*pow(pow(s_w,-b)-1,1.-1./b);
      fprintf(fic,"%e %e\n",s_w,p_c);
    }
  } else if(!strncmp(nom,"pc_sBar",5) && n_pa == 7){
    double s_w1,s_w2,s_w,ds_w,p_c ;
    double hr,a,b,v,mu ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	a 	 =para[3];	b 	 =para[4];
    v	 =para[5];	mu 	 =para[6];
    fprintf(fic,"#Pression capillaire (model de Baroghel)\n");
    fprintf(fic,"#s_w(1) p_c(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      hr = a*pow(s_w,v)+(1-a)*(1+pow(b,mu))*pow(s_w,mu)/(pow(s_w,mu)+pow(b,mu));
      p_c = -1.372e8*log(hr);
      fprintf(fic,"%e %e\n",s_w,p_c);
    }
  } else if(!strncmp(nom,"k_rwFrancy",5) && n_pa == 4){
    double s_w1,s_w2,s_w,ds_w,k_rw ;
    double s_r ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	s_r   =para[3];
    fprintf(fic,"#Permeabilite relative a l'eau (model Francy)\n");
    fprintf(fic,"#s_w(1) k_rw(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      if(s_w>s_r)   k_rw = pow((s_w-s_r)/(1-s_r),3.); else k_rw = 0.;
      fprintf(fic,"%e %e\n",s_w,k_rw);
    } 
  } else if(!strncmp(nom,"k_reFrancy",5) && n_pa == 4){
    double s_w1,s_w2,s_w,ds_w,k_re ;
    double s_r ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	s_r   =para[3];
    fprintf(fic,"#Permeabilite relative des ions (model Francy)\n");
    fprintf(fic,"#s_w(1) k_re(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      if(s_w>s_r) k_re = 1./(1+pow(-3.*log((s_w-s_r)/(1-s_r)),2.)); else k_re = 0.;
      fprintf(fic,"%e %e\n",s_w,k_re);
    }
  } else if(!strncmp(nom,"k_reP",5) && n_pa == 4){
    double s_w1,s_w2,s_w,ds_w,k_re ;
    double a ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	a   =para[3];
    fprintf(fic,"#Permeabilite relative des ions (model puissance)\n");
    fprintf(fic,"#s_w(1) k_re(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w = s_w1 + i*ds_w ;
      k_re = pow(s_w,a); 
      fprintf(fic,"%e %e\n",s_w,k_re);
    }
  } else if(!strncmp(nom,"k_slBarry",5) && n_pa == 4){
    double s_w1,s_w2,s_w,ds_w,k_sl ;
    double a ;
    s_w1  =para[0];	s_w2  =para[1];			
    n	 =para[2];	a     =para[3];
    fprintf(fic,"#Coefficient de reduction la surface specifique (model Barry)\n");
    fprintf(fic,"#s_w(1) k_sl(2)\n");
    n1 = n-1 ;
    ds_w = (s_w2-s_w1)/n1 ;
    for(i=0;i<n;i++)	{
      s_w  = s_w1 + i*ds_w ;
      k_sl = 1./(1+a*pow(1.-s_w,4.)); 
      fprintf(fic,"%e %e\n",s_w,k_sl);
    }
  } else {
    arret("ecrit_courbe : courbe non connue") ;
  }

  fclose(fic) ;
}
