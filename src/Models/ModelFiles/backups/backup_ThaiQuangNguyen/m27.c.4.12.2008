/*
	Sel NaCl
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include "../defs.h"
#include "../lib.h"

#define TITLE "Sechage isotherme avec sels (T.Q. Nguyen) (nov. 2008)"
/* Macros */
#define NEQ 	(2)
#define NVI     (10)
#define NVE     (10)

#define E_eau	(0)
#define E_Cl	(1)

#define I_Pv    (0)
#define I_ZS    (1)

#define P_v(n)      (u[(n)][I_Pv])
#define ZS(n)       (u[(n)][I_ZS])

#define M_W(n)      (f[(n)])
#define N_Cl(n)     (f[(n+2)])

#define W_W         (f[4])
#define W_Cl        (f[5])

#define C_Cl(n)     (f[(6+n)])
#define P_l(n)      (f[(8+n)])

#define KD_W        (va[(0)])
#define KF_V        (va[(1)])

#define KF_Cl       (va[(2)])
#define KF_Na       (va[(3)])

#define KD_Cl       (va[(4)])
#define KD_Na       (va[(5)])

#define C_W(n)      (va[(6+n)])
#define LNA_W(n)    (va[(8+n)])

/* valences */
#define z_cl      (-1.)
#define z_na      (1.)

/* volumes molaires partiels liquide (moles/m3) */
#define v_h2o     (1.80e-5)
#define v_na      (1.87e-5)
#define v_cl      (2.52e-6)

/* volumes molaires solides (moles/m3) */
#define v_nacl    (0.) /* (24.5e-6) */

/* coefficients de diffusion moleculaire (m2/s) */
#define do_cl     (2.032e-9)
#define do_na     (1.334e-9)
#define do_va     (2.17e-5)

/* constante d'equilibre */
#define K_nacl    (6.e3)      /* Solubilite de NaCl (moles/m3) */

/* constante physique */
#define FARADAY   (9.64846e4) /* Faraday (C/mole) */
#define T         (293.)      /* Temperature (K) */
#define RT        (2436.)     /* Produit R = 8.3143 et T = 293. (J/mole) */

/* viscosites (Pa.s) */
#define mu_g      (1.8e-5)
#define mu_l      (1.002e-3)

/* Masses molaires (kg/mole) */
#define M_h2o     (1.8e-2)
#define M_air     (2.896e-2)

/* autres */
#define p_atm     (1.01325e5) /* Pression atmospherique (Pa) */
#define p_g       (p_atm)     /* Pression du gaz (Pa) */

/* Pression de vapeur (Pa) */
#define P_VS(T)	  (609.14*pow(10.,7.45*(T - 273.)/(T - 38.)))

/* Fonctions */
static int    pm(char *s) ;
static double activite(double,double,double,double) ;
extern double lna_i(double,double,double,double,double,double) ;
/*
extern double lng_LinLee(double,double,double,double,double,double) ;
extern double lng_TQN(double,double,double,double,double,double,double,double) ;
*/
static double tortuosite_l(double) ;
static void   flux(double**,double**,double*,double*,elem_t,int,geom_t) ;


/* Parametres */
static double phio,r_d,k_int ;
static double s_naclrf ;
static double d_cl ;

int pm(char *s)
{
  if(strcmp(s,"porosite") == 0) return (0) ;
  else if(strcmp(s,"D_Cl") == 0) return (1);  
  else if(strcmp(s,"r_d") == 0) return (2);
  else if(strcmp(s,"k_int") == 0) return (3);
  else if(strcmp(s,"s_srf") == 0) return (4) ;
  else if(strcmp(s,"courbes") == 0) return (5);
  else {
    printf("donnee \"%s\" non connue (pm27)\n",s) ; exit(0) ;
  }
}

int dm27(int dim,mate_t *mat,FILE *ficd)
/* Lecture des donnees materiaux dans le fichier ficd */
{
  int    n_donnees = 6 ;

  if(dim > 1) arret("dm27 : dimension > 1 non prevue") ;

  mat->neq = NEQ ;

  strcpy(mat->eqn[E_eau],"liq") ;
  strcpy(mat->eqn[E_Cl],"sel") ;

  strcpy(mat->inc[I_Pv],"p_v") ;
  strcpy(mat->inc[I_ZS],"x_s") ;

  dmat(mat,ficd,pm,n_donnees) ;

  return(mat->n) ;
}

int qm27(int dim,FILE *ficd)
/* Saisie des donnees materiaux */
{
  printf(TITLE) ;
  
  if(!ficd) return(NEQ) ;

  printf("\n\n\
Le systeme est forme de 2 equations :\n\
\t 1. Conservation de la masse d\'eau (p_v)\n\
\t 2. Conservation de la masse de sel (x_s)\n") ;
  
  printf("\n\
Exemple de donnees\n\n") ;

  fprintf(ficd,"porosite = 0.12  # Porosite\n") ;
  fprintf(ficd,"k_int = 1.e-20   # Permeabilite intrinseque (m2)\n") ;
  fprintf(ficd,"D_Cl = 6.25e-12  # Diffusion effective de Cl (m2/s)\n") ;
  fprintf(ficd,"r_d = 1.         # Rapport des tortuosites anions/cations\n") ;
  fprintf(ficd,"s_srf = 1.       # Contenu en sel de reference (mol/m3)\n") ;
  fprintf(ficd,"courbes = myfile # nom du fichier : p_c S_l k_rl tau_l\n") ;

  return(NEQ) ;
}

void tb27(elem_t *el,inte_t *fi,int *n_fi,int dim,int geom,int *nv)
{
  el->n_vi = (el->dim < dim) ? 0 : NVI ; /* implicite */
  el->n_ve = (el->dim < dim) ? 0 : NVE ; /* explicite */
}

void ch27(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t,char_t cg)
/* Residu du aux chargements (r) */
{
  int    i ;

  chsurf(x,r,dim,geom,dt,t,cg,el) ;
  for(i=0;i<NEQ*el.nn;i++) r[i] = -r[i] ;

}

void in27(double **x,double **u,double *f,double *va,elem_t el,int dim,int geom)
/* Initialise les variables du systeme (f,va) */ 
{
  int    i ;

  if(el.dim < dim) return ;
  /*
    Donnees
  */
  phio     = el.mat->pr[pm("porosite")] ;
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  s_naclrf = el.mat->pr[pm("s_srf")] ;

  /* Contenus molaires */
  for(i=0;i<el.nn;i++) {
    /* Variable z = s/s_rf + P/K - 1 */
    double zs   = ZS(i) ;  
    double p_v  = P_v(i) ;
    double p_vs = P_VS(T) ;
    double c_cl,c_na,s_nacl,c_w ;
    double s_w,s_g ;
    double p_l,p_c ;
    double phi ;
    double lna_w ;
    double rho_v,rho_w ;
    double un = 1. ;

    /* teneurs en solide */
    s_nacl  = 0.5*(zs + fabs(zs))*s_naclrf ;

    /* concentrations */
    c_cl    = K_nacl*(1. + 0.5*(zs - fabs(zs))) ;
    c_cl    = K_nacl*exp(0.5*(zs - fabs(zs))) ;
    c_na    = c_cl ;
    c_w     = (un - (c_cl*v_cl + c_na*v_na))/v_h2o ;   
  
    /* activite de l'eau */ 
    lna_w = activite(c_cl,c_na,c_w,T) ;

    /* pressions */
    p_l = RT*c_w*(log(p_v/p_vs) - lna_w) + p_g ;
    p_c = p_g - p_l ;

    rho_v = M_h2o/RT*p_v ;
    rho_w = M_h2o*c_w ;

    /* saturations */
    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un - s_w ;
        
    /* porosite */
    phi  = phio - s_nacl*v_nacl ;

    /* contenus molaires */
    N_Cl(i)  = c_cl*phi*s_w + s_nacl ;
    M_W(i)   = rho_w*phi*s_w + rho_v*phi*s_g ;

    /* sauvegarde */
    C_Cl(i)  = c_cl ;
    P_l(i)   = p_l ;
  }

  /* Coefficients de transfert */
  {
    ex_t ex27 ;
    ex27(x,u,f,va,el,dim,geom,0.) ; 
  }

  /* Flux */
  flux(x,u,f,va,el,dim,geom) ;
}


int ex27(double **x,double **u,double *f,double *va,elem_t el,int dim,geom_t geom,double t) 
/* Termes explicites (va)  */
{
  int i ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  phio     = el.mat->pr[pm("porosite")] ;
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d      = el.mat->pr[pm("r_d")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  s_naclrf = el.mat->pr[pm("s_srf")] ;

  for(i=0;i<NVE;i++) va[i] = 0. ;

  /* Contenus molaires */
  for(i=0;i<el.nn;i++) {
    double zs   = ZS(i) ;  
    double p_v  = P_v(i) ;
    double p_vs = P_VS(T) ;
    double c_cl,c_na,s_nacl,c_w ;
    double s_w,s_g ;
    double p_l,p_c ;
    double phi ;
    double lna_w ;
    double k_rl,tau_g,tau_l,tau_ani,tau_cat ;
    double un = 1. ;

    /* concentrations */
    c_cl = K_nacl*(1. + 0.5*(zs - fabs(zs))) ;
    c_cl = K_nacl*exp(0.5*(zs - fabs(zs))) ;
    c_na = c_cl ;
    c_w  = (un - (c_cl*v_cl + c_na*v_na))/v_h2o ;   
  
    /* teneurs en solide */
    s_nacl  = 0.5*(zs + fabs(zs))*s_naclrf ;

    /* activite de l'eau */ 
    lna_w = activite(c_cl,c_na,c_w,T) ;	
	 
    /* pressions */
    p_l = RT*c_w*(log(p_v/p_vs) - lna_w) + p_g ;
    p_c = p_g - p_l ;

    /* saturations */
    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un - s_w ;

    /* porosite */
    phi  = phio - s_nacl*v_nacl ;
	
    /* permeabilite relative */
    k_rl    = courbe(p_c,el.mat->cb[1]) ;

    /* tortuosites gaz et liquide*/
    tau_g   = pow(phi,4./3.)*pow(s_g,10./3.) ;
    tau_l   = tortuosite_l(phi)*courbe(p_c,el.mat->cb[2]) ;
  
    /* tortuosites anions et cations */
    tau_ani = tau_l*d_cl/(tortuosite_l(phio)*do_cl) ;
    tau_cat = tau_ani/r_d ;
  
    /* sauvegarde */
    KD_W   += M_h2o*c_w*k_int/mu_l*k_rl ;
    KD_Cl  += c_cl*k_int/mu_l*k_rl ;
    KD_Na  += c_na*k_int/mu_l*k_rl ;
    
    KF_V   += tau_g*do_va*M_h2o/RT/p_g ;
    KF_Cl  += tau_ani*do_cl ;
    KF_Na  += tau_cat*do_na ;

    C_W(i)   = c_w ;
    LNA_W(i) = lna_w ;
  }

  KD_W  /= el.nn ;
  KD_Cl /= el.nn ;
  KD_Na /= el.nn ;

  KF_V  /= el.nn ;
  KF_Cl /= el.nn ;
  KF_Na /= el.nn ;

  return(0) ;
}

int ct27(double **x,double **u,double **u_n,double *f,double *f_n,double *va,elem_t el,int dim,int geom,double dt,double t)
/* Les variables donnees par la loi de comportement (f_1) */
{
  int    i ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */

  phio     = el.mat->pr[pm("porosite")] ;
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d	   = el.mat->pr[pm("r_d")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  s_naclrf = el.mat->pr[pm("s_srf")] ;
   
  /* Contenus molaires */

  for(i=0;i<el.nn;i++) {
    /* Variable z = s/s_rf + Ln(P/K) */
    double zs  = ZS(i) ; 
    double p_v = P_v(i) ;
    double p_vs = P_VS(T) ;
    double c_cl,c_na,c_w,s_nacl ;
    double s_w,s_g ;
    double p_c,p_l ;
    double phi ;
    double lna_w ;
    double rho_v,rho_w ;
    double un = 1. ;

    /* teneurs en solide */
    s_nacl  = 0.5*(zs + fabs(zs))*s_naclrf ;

    /* concentrations */
    c_cl    = K_nacl*(1. + 0.5*(zs - fabs(zs))) ;
    c_cl    = K_nacl*exp(0.5*(zs - fabs(zs))) ;
    c_na    = c_cl ;
    c_w     = (un - (c_cl*v_cl + c_na*v_na))/v_h2o ;  
    c_w     = C_W(i) ; 
  
    /* activite de l'eau */ 
    lna_w = activite(c_cl,c_na,c_w,T) ;
    lna_w = LNA_W(i) ;

    /* pressions */
    p_l = RT*c_w*(log(p_v/p_vs) - lna_w) + p_g ;
    p_c = p_g - p_l ;

    rho_v = M_h2o/RT*p_v ;
    rho_w = M_h2o*c_w ;

    /* saturations */
    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un - s_w ;
        
    /* porosite */
    phi  = phio - s_nacl*v_nacl ;

    /* contenus molaires */
    N_Cl(i)  = c_cl*phi*s_w + s_nacl ;
    M_W(i)   = rho_w*phi*s_w + rho_v*phi*s_g ;

    /* sauvegarde */
    C_Cl(i)  = c_cl ;
    P_l(i)   = p_l ;

    if(p_v <= 0|| phi <= 0.) {
      printf("\n\
x       = %e\n\
p_v     = %e\n\
s_w     = %e\n\
x_s     = %e\n\
phi     = %e\n",x[i][0],p_v,s_w,zs,phi) ;
      return(-1) ;
    }
  }
  
  /* Flux */
  flux(x,u,f,va,el,dim,geom) ;
  
  return(0) ;
}

int mx27(double **x,double **u,double **u_n,double *f,double *f_n,double *va,double *k,elem_t el,int dim,int geom,double dt,double t)
/* Matrice (k) */
{
#define K(i,j)    (k[(i)*el.nn*NEQ+(j)])

  double tr,S_Dcz2 ;
  double dc_clsdzs[2],dp_lsdp_v[2],dpsisdc_cl,c[2] ;
  double trd_w,trd_cl,trf_v,trf_cl,tre_cl ;
  double dx,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;
  
  /* initialisation */
  for(i=0;i<el.nn*el.nn*NEQ*NEQ;i++) k[i] = zero ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  
  phio     = el.mat->pr[pm("porosite")] ; 
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d	   = el.mat->pr[pm("r_d")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  s_naclrf = el.mat->pr[pm("s_srf")] ;

  /*
    CALCUL DE volume ET DE surf 
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;

  /* termes d'accumulation */
  for(i=0;i<2;i++) {
    double zs   = ZS(i) ; 
    double p_v  = P_v(i) ;
    double p_vs = P_VS(T) ;
    double p_c,p_l ;
    double s_w,s_g ;
    double c_cl,c_na,c_w,s_nacl ;
    double phi ;
    double lna_w ;
    double rho_v,rho_w ;
    double ds_wsdp_c,ds_wsdp_v,ds_gsdp_v ;
    double drho_vsdp_v ;
    double ds_naclsdzs,dphisdzs ;

    /* teneurs en solide */
    s_nacl  = 0.5*(zs + fabs(zs))*s_naclrf ;

    /* concentrations */
    c_cl    = K_nacl*(1. + 0.5*(zs - fabs(zs))) ;
    c_cl    = K_nacl*exp(0.5*(zs - fabs(zs))) ;
    c_na    = c_cl ;
    c_w     = (un - (c_cl*v_cl + c_na*v_na))/v_h2o ;  
    c_w     = C_W(i) ;  
  
    /* activite de l'eau */ 
    lna_w = activite(c_cl,c_na,c_w,T) ;
    lna_w = LNA_W(i) ;

    /* pressions */
    p_l = RT*c_w*(log(p_v/p_vs) - lna_w) + p_g ;
    p_c = p_g - p_l ;

    rho_v = M_h2o/RT*p_v ;
    rho_w = M_h2o*c_w ;

    /* saturations */
    s_w  = courbe(p_c,el.mat->cb[0]) ;
    s_g  = un - s_w ;

    /* porosite */
    phi  = phio - s_nacl*v_nacl ;

    /* derivees */
    ds_wsdp_c = dcourbe(p_c,el.mat->cb[0]) ;
    /* ... par rapport a p_v */	
    dp_lsdp_v[i] = RT*c_w/p_v ; 
    ds_wsdp_v    = -ds_wsdp_c*dp_lsdp_v[i] ;
    drho_vsdp_v  = M_h2o/RT ;
    ds_gsdp_v    = -ds_wsdp_v ;
    /* ... par rapport a zs */
    dc_clsdzs[i] = (zs > 0.) ? 0. : K_nacl ;
    dc_clsdzs[i] = (zs > 0.) ? 0. : c_cl ;
    ds_naclsdzs  = (zs > 0.) ? s_naclrf : 0. ;
    dphisdzs     = -v_nacl*ds_naclsdzs ;

    /*
      Conservation de Cl : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
    */
    K(i*NEQ+E_Cl,i*NEQ+I_ZS) += volume[i]*(phi*s_w*dc_clsdzs[i] 
					   + ds_naclsdzs 
					   + dphisdzs*s_w*c_cl) ;
    K(i*NEQ+E_Cl,i*NEQ+I_Pv) += volume[i]*phi*c_cl*ds_wsdp_v ;

    /*
      Conservation de l'eau : (n_w1 - n_wn) + dt * div(w_w) = 0
    */
    K(i*NEQ+E_eau,i*NEQ+I_Pv) += volume[i]*phi*(drho_vsdp_v*s_g 
						+ rho_v*ds_gsdp_v
						+ rho_w*ds_wsdp_v) ;
    K(i*NEQ+E_eau,i*NEQ+I_ZS) += volume[i]*dphisdzs*(rho_v*s_g
						     + rho_w*s_w) ;
  }

  /* termes d'ecoulement */
  S_Dcz2  = KF_Cl*z_cl*z_cl + KF_Na*z_na*z_na ; 
  dpsisdc_cl = -(z_cl*KF_Cl + z_na*KF_Na)/S_Dcz2 ;

  tr  = dt*surf/dx ;

  trd_cl = tr*KD_Cl ;
  trd_w  = tr*KD_W ;

  trf_cl = tr*KF_Cl ;
  trf_v  = tr*KF_V ;

  tre_cl = tr*KF_Cl*z_cl ;  

  /*
    Conservation de Cl : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
  for(i=0;i<2;i++) {
    c[i] = (trf_cl + tre_cl*dpsisdc_cl)*dc_clsdzs[i] ;
  }
  K(E_Cl,I_ZS)              += + c[0] ;
  K(E_Cl,I_ZS+NEQ)          += - c[1] ;
  K(E_Cl+NEQ,I_ZS)          += - c[0] ;
  K(E_Cl+NEQ,I_ZS+NEQ)      += + c[1] ;

  for(i=0;i<2;i++) {
    c[i] = trd_cl*dp_lsdp_v[i] ;
  }
  K(E_Cl,I_Pv)              += + c[0] ;
  K(E_Cl,I_Pv+NEQ)          += - c[1] ;
  K(E_Cl+NEQ,I_Pv)          += - c[0] ;
  K(E_Cl+NEQ,I_Pv+NEQ)      += + c[1] ;
  
  /*
    Conservation de l'eau : (n_w1 - n_wn) + dt * div(w_w) = 0
  */
  for(i=0;i<2;i++) {
    c[i] = trd_w*dp_lsdp_v[i] + trf_v ;
  }
  K(E_eau,I_Pv)             += + c[0] ;
  K(E_eau,I_Pv+NEQ)         += - c[1] ;
  K(E_eau+NEQ,I_Pv)         += - c[0] ;
  K(E_eau+NEQ,I_Pv+NEQ)     += + c[1] ;
 
  return(0) ;

#undef K
}

void rs27(double **x,double **u,double **u_n,double *f,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t)
/* Residu (r) */
{
#define N_Cln(n)     (f_n[(n+2)])
#define M_Wn(n)      (f_n[(n)])

#define R(n,i)    (r[(n)*NEQ+(i)])

  double dx ,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;

  /* initialisation */
  for(i=0;i<el.nn*NEQ;i++) r[i] = zero ;

  if(el.dim < dim) return ;

  /*
    CALCUL DE volume ET DE surf
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;

  /*
    Conservation de Cl  : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
  R(0,E_Cl) -= volume[0]*(N_Cl(0) - N_Cln(0)) + dt*surf*W_Cl ;
  R(1,E_Cl) -= volume[1]*(N_Cl(1) - N_Cln(1)) - dt*surf*W_Cl ;

  /*
    Conservation de H2O : (n_w1 - n_wn) + dt * div(w_V) = 0
  */
  R(0,E_eau) -= volume[0]*(M_W(0) - M_Wn(0)) + dt*surf*W_W ;
  R(1,E_eau) -= volume[1]*(M_W(1) - M_Wn(1)) - dt*surf*W_W ;

#undef N_Cln
#undef M_Wn

#undef R
}

int so27(double **x,double **u,double *f,double *va,double *s,resu_t *r,elem_t el,int dim,int geom,double t)
/* Les valeurs exploitees (s) */
{
  int    i,j,nso ;
  double phi,c_w,lna_w;
  double s_w,s_g,p_v,p_l,p_c,zs,c_cl,c_na,s_nacl ;
  double w_wl,w_v,w_cl ;
  double h_s[MAX_NOEUDS],dh_s[3*MAX_NOEUDS] ;
  double zero = 0.,un = 1. ;
  double p_vs = P_VS(T) ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */

  phio     = el.mat->pr[pm("porosite")] ; 
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d	   = el.mat->pr[pm("r_d")] ;
  k_int	   = el.mat->pr[pm("k_int")] ;
  s_naclrf = el.mat->pr[pm("s_srf")] ;
 
  /* initialisation */
  nso = 11;
  for(i=0;i<nso;i++) for(j=0;j<9;j++) r[i].v[j] = zero ;

  /* fonctions d'interpolation en s */
  fint_abs(dim,el.nn,x,s,el.dim,h_s,dh_s) ;

  /* concentrations */
  zs    = param(u,h_s,el.nn,I_ZS) ;
  c_cl  = K_nacl*(1. + 0.5*(zs - fabs(zs))) ;
  c_cl  = K_nacl*exp(0.5*(zs - fabs(zs))) ;
  c_na  = c_cl ;
  c_w   = (un - (c_cl*v_cl + c_na*v_na))/v_h2o ; 

  /* activite de l'eau */ 
  lna_w = activite(c_cl,c_na,c_w,T) ;  
  
  /* pression */
  p_v   = param(u,h_s,el.nn,I_Pv) ;
  p_l   = RT*c_w*(log(p_v/p_vs) - lna_w) + p_g ;
  p_c   = p_g - p_l ;
  
  /* saturations */
  s_w   = courbe(p_c,el.mat->cb[0]) ;
  s_g   = un - s_w ;

  /* teneurs en solide */
  s_nacl  = 0.5*(zs + fabs(zs))*s_naclrf ;	 		

  /* porosite */
  phi = phio - s_nacl*v_nacl ;

  {
    double dx = x[1][0] - x[0][0] ;
    /* Gradients */
    double grd_cl  = (C_Cl(1) - C_Cl(0))/dx ;
    double grd_na  = grd_cl ; 
    double grd_p_l = (P_l(1)  - P_l(0) )/dx ;
    double grd_p_v = (P_v(1)  - P_v(0) )/dx ; 
    double S_Dcz2  = KF_Cl*z_cl*z_cl + KF_Na*z_na*z_na ;  
    double grd_psi = -(z_cl*KF_Cl*grd_cl + z_na*KF_Na*grd_na)/S_Dcz2 ;

    /* Flux */
    w_wl   = - KD_W*grd_p_l ;
    w_v    = - KF_V*grd_p_v ;
    w_cl   = - KD_Cl*grd_p_l - KF_Cl*grd_cl - KF_Cl*z_cl*grd_psi ;
  }

  /* quantites exploitees */
  strcpy(r[0].text,"h_r") ; r[0].n = 1 ;
  r[0].v[0] = p_v/p_vs ;
  strcpy(r[1].text,"teneur en eau") ; r[1].n = 1 ;
  r[1].v[0] = s_w*phi ;
  strcpy(r[2].text,"Saturation") ; r[2].n = 1 ;
  r[2].v[0] = s_w ;
  strcpy(r[3].text,"pression liquide") ; r[3].n = 1 ;
  r[3].v[0] = p_l ;
  strcpy(r[4].text,"flux eau") ; r[4].n = 1 ;
  r[4].v[0] = w_wl ;
  strcpy(r[5].text,"flux vapeur") ; r[5].n = 1 ;
  r[5].v[0] = w_v ;
  strcpy(r[6].text,"Cl libre") ; r[6].n = 1 ;
  r[6].v[0] = c_cl ;
  strcpy(r[7].text,"NaCl solide") ; r[7].n = 1 ;
  r[7].v[0] = s_nacl ;
  strcpy(r[8].text,"Cl total") ; r[8].n = 1 ;
  r[8].v[0] = phi*s_w*c_cl + s_nacl ;
  strcpy(r[9].text,"porosite") ; r[9].n = 1 ;
  r[9].v[0] = phi ;
  strcpy(r[10].text,"Flux Cl") ; r[10].n = 1 ;
  r[10].v[0] = w_cl ;
  return(nso) ;
}

void flux(double **x,double **u,double *f,double *va,elem_t el,int dim,geom_t geom)
/* Les variables donnees par la loi de comportement (f_1) */
{
  double grd_p_l,grd_p_v,grd_cl,grd_na,grd_psi ;
  double S_Dcz2 ;
  double dx = x[1][0] - x[0][0] ;
  
  /* Gradients */
  grd_cl  = (C_Cl(1) - C_Cl(0))/dx ;
  grd_p_l = (P_l(1)  - P_l(0) )/dx ;
  grd_p_v = (P_v(1)  - P_v(0) )/dx ;

  grd_na  = grd_cl ; 

  S_Dcz2 = KF_Cl*z_cl*z_cl + KF_Na*z_na*z_na ;  
  grd_psi = -(z_cl*KF_Cl*grd_cl + z_na*KF_Na*grd_na)/S_Dcz2 ;
 
  /* Flux */
  W_W    = - KD_W*grd_p_l  - KF_V*grd_p_v ;
  W_Cl   = - KD_Cl*grd_p_l - KF_Cl*grd_cl - KF_Cl*z_cl*grd_psi ;
}

#undef NEQ 

#undef E_eau
#undef E_Cl

#undef I_Pv
#undef I_ZS


#undef P_v
#undef ZS

#undef N_Cl
#undef M_W

#undef W_W
#undef W_Cl

#undef KD_W
#undef KF_V

#undef KF_Cl
#undef KF_Na      

#undef KD_Cl 
#undef KD_Na

#undef C_W
#undef LNA_W


#undef z_cl
#undef z_na

#undef do_cl
#undef do_na
#undef do_va

#undef FARADAY
#undef T 
#undef RT

#undef v_h2o
#undef v_na 
#undef v_cl

#undef K_nacl

#undef mu_g
#undef mu_l
#undef p_atm
#undef p_g

#undef M_h2o 
#undef M_air 

#undef P_VS

double activite(double c_cl,double c_na,double c_w,double T)
/* L'activite chimique de l'eau d'une solution de NaCl */
{
/* valences */
#define z_cl   (-1.)
#define z_na   (+1.)

/* masse molaire */
#define M_h2o   (18.e-3)

  double lna_w ;
  double m_cl,m_na,m_T ;
  double I,A,epsi ;

  double T_0 = 273.15 ;
  double b0 = sqrt(M_h2o),S0 = pow(M_h2o,1.29) ; /* references */
  double b_na = 4.352/b0,b_cl = 1.827/b0 ; /* donnees intrinseques */
  double S_na = 26.448/S0,S_cl = 19.245/S0 ;

  double zero = 0. ;

  /* molarites */
  if(c_cl < zero) c_cl = zero ;
  if(c_na < zero) c_na = zero ;
  
  epsi = 0.0007*(T - T_0)*(T - T_0) - 0.3918*(T - T_0) + 87.663 ;
  A = 1398779.816/pow(epsi*T,1.5)/b0 ;
  
  /* molalites*M_h2o (en moles/mole) */
  m_cl = c_cl/c_w ;
  m_na = c_na/c_w ;

  /* la force ionique */
  I = 0.5*(z_cl*z_cl*m_cl + z_na*z_na*m_na) ;
  
  if (I > zero) {
    m_T =  m_cl + m_na ;

    lna_w = m_cl*lna_i(T,I,z_cl,b_cl,S_cl,A)
          + m_na*lna_i(T,I,z_na,b_na,S_na,A) ;

    /* selon Lin & Lee */
    /*
    lna_cl = lng_LinLee(T,I,z_cl,b_cl,S_cl,A) ;
    lna_na = lng_LinLee(T,I,z_na,b_na,S_na,A) ;
    */

    /* selon TQN */
    /*
    lna_cl = lng_TQN(T,I,z_cl,b_cl,S_cl,A,lna_w,m_T) ;
    lna_na = lng_TQN(T,I,z_na,b_na,S_na,A,lna_w,m_T) ;
    */

  } else {
    /*
    lna_cl = 0. ;
    lna_na = 0. ;
    */
    lna_w  = 0. ;
  }

  return(lna_w) ;

#undef z_cl
#undef z_na

#undef M_h2o
}

double tortuosite_l(double phi)
{
  double phi0 = 0.18 ;
  double dphi = (phi > phi0) ? phi - phi0 : 0. ;
  return(phi*(0.001 + 0.07*phi*phi + 1.8*dphi*dphi)) ;
}
