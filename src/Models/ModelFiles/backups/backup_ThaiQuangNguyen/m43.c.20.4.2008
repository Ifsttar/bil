/*
	(ancien 66)
	4 especes ionique Cl-, Na+, K+, OH-, H+
	Diffusion: Loi de Frick + Migration + reaction chimique (H2O = H+ + OH-)
	Isotherme de fixation: Freundlich
	D est calculee D_oh=D_cl/Do_cl*Do_oh
	Tenir en compte: Activitee de la solution 
	electroneutralise + Isotherm Dangla
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include "../defs.h"
#include "../lib.h"

/* Macros */

#define TITLE "Chlorures dans les betons satures (version simplifiee)(T.Q. Nguyen)"

#define NEQ     (4)

#define NVI     (12)
#define NVE     (10)

#define E_Cl    (0)
#define E_OH    (1)
#define E_Na    (2)
#define E_K     (3)

#define I_c_cl  (0)
#define I_c_oh  (1)
#define I_c_na  (2)
#define I_psi   (3)

/* valences */
#define z_cl    (-1.)
#define z_oh    (-1.)
#define z_na    (1.)
#define z_k     (1.)
#define z_h     (1.)

/* coefficients de diffusion dans l'eau dilue*/
#define do_cl   (2.032e-9)
#define do_oh   (5.273e-9)
#define do_na   (1.334e-9)
#define do_k    (1.957e-9)
#define do_h    (9.310e-9)

/* constantes d'equilibre */
#define k_e     (1.e-8)

/* constantes physiques */
#define R_g	(8.3143)    /* cste des gaz parfait (J/K/mol) */
#define F   	(9.64846e4) /* Faraday (C/mole) */
#define T       (293.)      /* temperature (K) */
#define RT      (2436.)     /* produit de R et T */

/* Densite initiale de radicaux hydroxyles (valeur arbitraire) */
#define s_oh0    (0.)

/* Fonctions */
static int    pm(char *s) ;
static double concentration_oh(double,double) ;
extern double activite(double,double,double,double,double,int,double *) ;
extern void   ecrit_courbe(char*) ;

/* Parametres */
static double phi,d_cl,r_d ;
static double s_csh,s_c3aeq,alpha,beta ;

int pm(char *s)
{
  if(strcmp(s,"porosite") == 0) return (0) ;
  else if(strcmp(s,"D_Cl") == 0) return (1);
  else if(strcmp(s,"r_d") == 0) return (2);
  else if(strcmp(s,"T") == 0) return (3);
  else if(strcmp(s,"activite") == 0) return (4);
  else if(strcmp(s,"s_c3aeq") == 0) return (5) ;
  else if(strcmp(s,"s_csh") == 0) return (6) ;
  else if(strcmp(s,"anpha") == 0) return (7);
  else if(strcmp(s,"beta") == 0) return (8); 
  else {
    printf("donnee \"%s\" non connue (pm93)\n",s) ; exit(0) ;
  }
}

int dm93(int dim,mate_t *mat,FILE *ficd)
/* Lecture des donnees materiaux dans le fichier ficd */
{
  int n_donnees = 9 ;

  if(dim > 1) arret("dm93 : dimension > 1 non prevue") ;

  mat->neq = NEQ ;
  strcpy(mat->eqn[E_Cl],"E_Cl") ;
  strcpy(mat->eqn[E_OH],"E_OH") ;
  strcpy(mat->eqn[E_Na],"E_Na") ;
  strcpy(mat->eqn[E_K],"E_K") ;

  strcpy(mat->inc[I_c_cl],"c_cl") ;
  strcpy(mat->inc[I_c_oh],"c_oh") ;
  strcpy(mat->inc[I_c_na],"c_na") ;
  strcpy(mat->inc[I_psi],"si") ;

  dmat(mat,ficd,pm,n_donnees) ;

  return(mat->n) ;
}


int qm93(int dim,FILE *ficd)
/* Saisie des donnees materiaux */
{
  
  printf(TITLE) ;
  
  if(!ficd) return(NEQ) ;
  
  printf("\n\n\
Le systeme est forme de 4 equations :\n\
\t 1. Conservation de la masse de Cl (c_cl)\n\
\t 2. Conservation de la masse de OH (c_oh)\n\
\t 3. Conservation de la masse de Na (c_na)\n\
\t 4. Conservation de la masse de K  (psi)\n") ;

  printf("\n\
Exemple de donnees\n\n") ;

  fprintf(ficd,"porosite = 0.121 # Porosite\n") ;
  fprintf(ficd,"D_Cl = 2.6e-12   # Diffusion effective de Cl\n") ;
  fprintf(ficd,"T = 293.         # Temperature\n") ;
  fprintf(ficd,"r_d = 1.         # Rapport des tortuosites des anions et des cations\n") ;
  fprintf(ficd,"s_c3aeq = 8.43   # Contenu en C3A equivalents\n") ;
  fprintf(ficd,"s_csh = 635.     # Contenu en CSH\n") ;
  fprintf(ficd,"anpha = 0.12     # Coef. de l\'isotherme\n") ;
  fprintf(ficd,"beta = 2.66      # Coef. de l\'isotherme\n") ;
  fprintf(ficd,"activite = 0     # Model de calcul activite de la solution\n") ;

  return(NEQ) ;

}

void tb93(elem_t el,int dim,int geom,int *nv)
{
  nv[0] = NVI ; /* implicite */
  nv[1] = NVE ; /* explicite */
}

void ch93(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t,char_t cg)
/* Residu du aux chargements (r) */
{

#define C_Cl(n)     (u_n[(n)][I_c_cl])
#define C_OH(n)     (u_n[(n)][I_c_oh])
#define C_Na(n)     (u_n[(n)][I_c_na])

#define W_Cl        (f_n[8])
#define W_OH        (f_n[9])
#define W_Na        (f_n[10])
#define W_K         (f_n[11])

#define R(n,i)     (r[(n)*NEQ+(i)])

  int    i,ieq ;
  double It;

 /* initialisation */
  for(i=0;i<el.nn*NEQ;i++) r[i] = 0.; 

  phi     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d	  = el.mat->pr[pm("r_d")] ; 
/* 
  if(cg.ieq == E_OH) {
    if(cg.fn != NULL) ft = fonction(t,*cg.fn)/F;  else ft = 1./F;
    if (x[0][0] != 0.) 
      R(1,E_OH) = - dt*ft*champ(x[0],dim,*cg.ch); 
    else  
      R(0,E_OH) = - dt*ft*champ(x[0],dim,*cg.ch);
  } else {printf("\nchargement non prevu (ch93)\n") ; exit(0) ;}


*/
  /* on calcule le numero de l'equation */
  if(isdigit(cg.eqn[0])) { /* donne sous forme numerique */
    ieq  = atoi(cg.eqn) - 1 ;
  } else {                 /* donne sous forme alphabetique */
    for(ieq=0;ieq<NEQ;ieq++) if(!strcmp(cg.eqn,el.mat->eqn[ieq])) break ;
    if(ieq == NEQ) arret("ch26 (1) : equation non connue") ;
  }

  if(ieq == E_OH) {
    It = (z_cl*W_Cl + z_na*W_Na + z_k*W_K + z_oh*W_OH) ;
    if (x[0][0] != 0.) 
      R(1,E_OH) = - dt*It*champ(x[0],dim,*cg.ch); 
    else  
      R(0,E_OH) = - dt*It*champ(x[0],dim,*cg.ch);
  } else {printf("\nchargement non prevu (ch93)\n") ; exit(0) ;}


 
#undef C_Cl
#undef C_OH
#undef C_Na

#undef W_Cl 
#undef W_OH 
#undef W_Na 
#undef W_K 

#undef R

}

void in93(double **x,double **u,double *f,double *va,elem_t el,int dim,int geom)
/* Initialise les variables du systeme (f,va) */ 
{
#define C_Cl(n)     (u[(n)][I_c_cl])
#define C_OH(n)     (u[(n)][I_c_oh])
#define C_Na(n)     (u[(n)][I_c_na])
#define PSI(n)      (u[(n)][I_psi])

#define N_Cl(n)     (f[(n)])
#define N_OH(n)     (f[(n+2)])
#define N_Na(n)     (f[(n+4)])
#define N_K(n)      (f[(n+6)])

#define W_Cl        (f[8])
#define W_OH        (f[9])
#define W_Na        (f[10])
#define W_K         (f[11])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])

#define KM_Cl       (va[(5)])
#define KM_OH       (va[(6)])
#define KM_Na       (va[(7)])
#define KM_K        (va[(8)])
#define KM_H        (va[(9)])

  double c_cl,c_oh,c_na,c_k,c_h,C_K[2] ;
  double grd_cl,grd_oh,grd_na,grd_k,grd_h,grd_psi ;
  double s_cl ;
  double dx,ton,top ;
  int    i ;
  double deux = 2. ;

  if(el.dim < dim) return ;

  /*
    Donnees
  */
  phi     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d	  = el.mat->pr[pm("r_d")] ;

  s_c3aeq = el.mat->pr[pm("s_c3aeq")] ;
  s_csh   = el.mat->pr[pm("s_csh")] ;
  alpha   = el.mat->pr[pm("anpha")] ;
  beta    = el.mat->pr[pm("beta")] ;
  
  /* Contenus molaires */
  for(i=0;i<el.nn;i++) {
    c_cl   = C_Cl(i) ;
    c_oh   = C_OH(i) ;
    c_na   = C_Na(i) ;
    c_h	   = k_e/c_oh ;
    c_k    = -(z_cl*c_cl + z_oh*c_oh + z_na*c_na + z_h*c_h)/z_k ;
    C_K[i] = c_k ;
    
    s_cl     = alpha*s_csh*c_cl*beta/(c_oh+beta*c_cl) + 2*s_c3aeq ;

    N_Cl(i)  = phi*c_cl + s_cl ;
    N_OH(i)  = phi*(c_oh - c_h) + s_oh0 - s_cl ;
    N_Na(i)  = phi*c_na ;
    N_K(i)   = phi*c_k ;
  }

  /* Coefficient de transfert */
  c_cl     = (C_Cl(0) + C_Cl(1))/deux ;
  c_oh     = (C_OH(0) + C_OH(1))/deux ;
  c_na     = (C_Na(0) + C_Na(1))/deux ;
  c_h      =  k_e/c_oh ;
  c_k      = -(z_cl*c_cl + z_oh*c_oh + z_na*c_na + z_h*c_h)/z_k ;
  
  ton = d_cl/do_cl ;
  top = ton/r_d ;
  
  KF_Cl  = ton*do_cl;
  KF_OH  = ton*do_oh ;
  KF_Na  = top*do_na;
  KF_K   = top*do_k;
  KF_H   = top*do_h;
  
  KM_Cl  = z_cl*KF_Cl*c_cl*F/RT;	
  KM_OH  = z_oh*KF_OH*c_oh*F/RT;
  KM_Na  = z_na*KF_Na*c_na*F/RT;
  KM_K   = z_k*KF_K*c_k*F/RT;	
  KM_H   = z_h*KF_H*c_h*F/RT;	

  /* Gradients */
  dx      = x[1][0] - x[0][0] ;
  
  grd_cl  = (C_Cl(1) - C_Cl(0))/dx ;
  grd_oh  = (C_OH(1) - C_OH(0))/dx ;
  grd_na  = (C_Na(1) - C_Na(0))/dx ;
  grd_k   = (C_K[1] - C_K[0])/dx ;
  grd_h   = (k_e/C_OH(1) - k_e/C_OH(0))/dx ;
  grd_psi = (PSI(1) - PSI(0))/dx ;
  
  /* Flux */
  W_Cl   = - KF_Cl*grd_cl - KM_Cl*grd_psi ;
  W_OH   = - KF_OH*grd_oh + KF_H*grd_h - (KM_OH - KM_H)*grd_psi ;
  W_Na   = - KF_Na*grd_na - KM_Na*grd_psi ;
  W_K    = - KF_K*grd_k   - KM_K*grd_psi ;

#undef C_Cl
#undef C_OH
#undef C_Na
#undef PSI

#undef N_Cl
#undef N_OH
#undef N_Na
#undef N_K

#undef W_Cl 
#undef W_OH 
#undef W_Na 
#undef W_K  

#undef KF_Cl
#undef KF_OH
#undef KF_Na      
#undef KF_K  
#undef KF_H  

#undef KM_Cl 
#undef KM_OH 
#undef KM_Na 
#undef KM_K
#undef KM_H
}


int ex93(double **x,double **u,double *f,double *va,elem_t el,int dim,int geom,double t) 
/* Termes explicites (va)  */
{
#define C_Cl(n)     (u[(n)][I_c_cl])
#define C_OH(n)     (u[(n)][I_c_oh])
#define C_Na(n)     (u[(n)][I_c_na])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])

#define KM_Cl       (va[(5)])
#define KM_OH       (va[(6)])
#define KM_Na       (va[(7)])
#define KM_K        (va[(8)])
#define KM_H        (va[(9)])

  double c_cl,c_oh,c_na,c_k,c_h ;
  double ton,top ;
  double deux = 2. ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  phi     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d	  = el.mat->pr[pm("r_d")] ;

  s_c3aeq = el.mat->pr[pm("s_c3aeq")] ;
  s_csh   = el.mat->pr[pm("s_csh")] ;
  alpha   = el.mat->pr[pm("anpha")] ;
  beta    = el.mat->pr[pm("beta")] ;
  
  c_cl     = (C_Cl(0) + C_Cl(1))/deux ;
  c_oh     = (C_OH(0) + C_OH(1))/deux ;
  c_na     = (C_Na(0) + C_Na(1))/deux ;
  c_h      =  k_e/c_oh ;
  c_k      = -(z_cl*c_cl + z_oh*c_oh + z_na*c_na + z_h*c_h)/z_k ;
  
  ton = d_cl/do_cl ;
  top = ton/r_d ;
  
  KF_Cl  = ton*do_cl ;
  KF_OH  = ton*do_oh ;
  KF_Na  = top*do_na ;
  KF_K   = top*do_k ;
  KF_H   = top*do_h ;
  
  KM_Cl  = z_cl*KF_Cl*c_cl*F/RT ;	
  KM_OH  = z_oh*KF_OH*c_oh*F/RT ;
  KM_Na  = z_na*KF_Na*c_na*F/RT ;
  KM_K   = z_k*KF_K*c_k*F/RT ;	
  KM_H   = z_h*KF_H*c_h*F/RT ;

  return(0) ;

#undef C_Cl
#undef C_OH
#undef C_Na

#undef KF_Cl
#undef KF_OH
#undef KF_Na      
#undef KF_K  
#undef KF_H  

#undef KM_Cl 
#undef KM_OH 
#undef KM_Na 
#undef KM_K
#undef KM_H
}

int ct93(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,elem_t el,int dim,int geom,double dt,double t)
/* Les variables donnees par la loi de comportement (f_1) */
{
#define C_Cl(n)     (u_1[(n)][I_c_cl])
#define C_OH(n)     (u_1[(n)][I_c_oh])
#define C_Na(n)     (u_1[(n)][I_c_na])
#define PSI(n)      (u_1[(n)][I_psi])

#define N_Cl(n)     (f_1[(n)])
#define N_OH(n)     (f_1[(n+2)])
#define N_Na(n)     (f_1[(n+4)])
#define N_K(n)      (f_1[(n+6)])

#define W_Cl        (f_1[(8)])
#define W_OH        (f_1[(9)])
#define W_Na        (f_1[(10)])
#define W_K         (f_1[(11)])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])

#define KM_Cl       (va[(5)])
#define KM_OH       (va[(6)])
#define KM_Na       (va[(7)])
#define KM_K        (va[(8)])
#define KM_H        (va[(9)])

  double c_cl, c_oh, c_na, c_k, c_h, C_K[2] ;
  double grd_cl,grd_oh, grd_na, grd_k,grd_h,grd_psi ;
  double s_cl ;
  double dx ;
  int    i ;

  
  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
  phi     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;
  r_d	  = el.mat->pr[pm("r_d")] ;

  s_c3aeq  = el.mat->pr[pm("s_c3aeq")] ;
  s_csh    = el.mat->pr[pm("s_csh")] ;
  alpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;
   
  /* Contenus molaires */

 for(i=0;i<2;i++) {
    c_cl     = C_Cl(i) ;
    c_oh     = C_OH(i) ;
    c_na     = C_Na(i) ;
    c_h	     = k_e/c_oh ;
    c_k      = -(z_cl*c_cl + z_oh*c_oh + z_na*c_na + z_h*c_h)/z_k ;
    C_K[i]   = c_k ;
    /*
      if(c_cl <0. || c_oh <= 0. || c_na <0. || c_k < 0.|| c_h <= 0.) {
      printf("\n\en x  = %e\n\
      c_cl    = %e\n\
      c_oh    = %e\n\
      c_na    = %e\n\
      c_k     = %e\n",x[i][0],c_cl,c_oh,c_na,c_k) ;
      return(-1) ;
      }
    */
    
    /* clorures fixes sur les CSH et les sels de Friedel */
    s_cl     = alpha*s_csh*c_cl*beta/(c_oh+beta*c_cl) + 2*s_c3aeq ;
   
    N_Cl(i)  = phi*c_cl + s_cl ;
    N_OH(i)  = phi*(c_oh - c_h) + s_oh0 - s_cl ;
    N_Na(i)  = phi*c_na ;
    N_K(i)   = phi*c_k ;
 }

 /* Gradients */	
 dx      = x[1][0] - x[0][0] ;
 
 grd_cl  = (C_Cl(1) - C_Cl(0))/dx ;
 grd_oh  = (C_OH(1) - C_OH(0))/dx ;
 grd_na  = (C_Na(1) - C_Na(0))/dx ;
 grd_k   = (C_K[1] - C_K[0])/dx ;
 grd_h   = (k_e/C_OH(1) - k_e/C_OH(0))/dx ;
 grd_psi = (PSI(1) - PSI(0))/dx ;

 /* Flux */
 W_Cl   = - KF_Cl*grd_cl - KM_Cl*grd_psi ;
 W_OH   = - KF_OH*grd_oh + KF_H*grd_h - (KM_OH - KM_H)*grd_psi ;
 W_Na   = - KF_Na*grd_na - KM_Na*grd_psi ;
 W_K    = - KF_K*grd_k   - KM_K*grd_psi ;
 
 return(0);

#undef C_Cl
#undef C_OH
#undef C_Na
#undef PSI

#undef N_Cl
#undef N_OH
#undef N_Na
#undef N_K

#undef W_Cl 
#undef W_OH 
#undef W_Na 
#undef W_K  

#undef KF_Cl
#undef KF_OH
#undef KF_Na      
#undef KF_K  
#undef KF_H  

#undef KM_Cl 
#undef KM_OH 
#undef KM_Na 
#undef KM_K
#undef KM_H
}

int mx93(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *k,elem_t el,int dim,int geom,double dt,double t)
/* Matrice (k) */
{
#define C_Cl(n)    (u_1[(n)][I_c_cl])
#define C_OH(n)    (u_1[(n)][I_c_oh])
#define C_Na(n)    (u_1[(n)][I_c_na])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])

#define KM_Cl       (va[(5)])
#define KM_OH       (va[(6)])
#define KM_Na       (va[(7)])
#define KM_K        (va[(8)])
#define KM_H        (va[(9)])

#define K(i,j)    (k[(i)*el.nn*NEQ+(j)])
  
  double c_cl,c_oh,c_h,c_na,c_k ;
  double dc_hsdc_oh[2],dc_ksdc_cl[2],dc_ksdc_oh[2],dc_ksdc_na[2] ;
  double ds_clsdc_cl,ds_clsdc_oh ;
  double tr ;
  double trf_cl,trf_oh,trf_h,trf_na,trf_k ;
  double tre_cl,tre_oh,tre_h,tre_na,tre_k ;
  double c[2] ;
  double dx,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;
  
  /* initialisation */
  for(i=0;i<el.nn*el.nn*NEQ*NEQ;i++) k[i] = zero ;

  if(el.dim < dim) return(0) ;

  /*
    Donnees
  */
 
  phi     = el.mat->pr[pm("porosite")] ;
  d_cl    = el.mat->pr[pm("D_Cl")] ;

  s_c3aeq  = el.mat->pr[pm("s_c3aeq")] ;
  s_csh    = el.mat->pr[pm("s_csh")] ;
  alpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;
  
  /*
    CALCUL DE volume ET DE surf 
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;

  /* termes d'accumulation */
  for(i=0;i<2;i++) {
    c_cl     = C_Cl(i) ;
    c_oh     = C_OH(i) ;
    c_na     = C_Na(i) ;
    c_h      = k_e/c_oh ;
    c_k      = -(z_cl*c_cl + z_oh*c_oh + z_na*c_na + z_h*c_h)/z_k ;

    /* derivees */
    dc_hsdc_oh[i] = -c_h/c_oh ;

    dc_ksdc_cl[i] = -z_cl/z_k ;
    dc_ksdc_oh[i] = -(z_oh + z_h*dc_hsdc_oh[i])/z_k ;
    dc_ksdc_na[i] = -z_na/z_k ;

    ds_clsdc_cl =  alpha*s_csh*beta*c_oh/((c_oh + beta*c_cl)*(c_oh + beta*c_cl)) ;
    ds_clsdc_oh = -alpha*s_csh*beta*c_cl/((c_oh + beta*c_cl)*(c_oh + beta*c_cl)) ;

    /*
      Conservation de Cl : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
    */
    K(i*NEQ+E_Cl,i*NEQ+I_c_cl) += volume[i]*(phi + ds_clsdc_cl) ;
    K(i*NEQ+E_Cl,i*NEQ+I_c_oh) += volume[i]*(ds_clsdc_oh) ;
    /*
      Conservation de OH (hydroxy-hydro) : [(n_OH1 - n_OHn)-(n_H1 - n_Hn)] + dt * div(w_OH-w_H) = 0
    */
    K(i*NEQ+E_OH,i*NEQ+I_c_cl) += volume[i]*(-ds_clsdc_cl) ;
    K(i*NEQ+E_OH,i*NEQ+I_c_oh) += volume[i]*(phi*(1. - dc_hsdc_oh[i]) - ds_clsdc_oh) ;
    /*
      Conservation de Na : (n_Na1 - n_Nan) + dt * div(w_Na) = 0
    */
    K(i*NEQ+E_Na,i*NEQ+I_c_na) +=  volume[i]*(phi) ;
    /*
      Conservation de K : (n_K1 - n_Kn) + dt * div(w_K) = 0
    */
    K(i*NEQ+E_K,i*NEQ+I_c_cl) += volume[i]*(phi*dc_ksdc_cl[i]) ;
    K(i*NEQ+E_K,i*NEQ+I_c_oh) += volume[i]*(phi*dc_ksdc_oh[i]) ;
    K(i*NEQ+E_K,i*NEQ+I_c_na) += volume[i]*(phi*dc_ksdc_na[i]) ;
    }

  /* termes d'ecoulement */
  tr     = dt*surf/dx ;

  trf_cl    = tr*KF_Cl ;
  trf_oh    = tr*KF_OH ;
  trf_h     = tr*KF_H ;
  trf_na    = tr*KF_Na ;
  trf_k     = tr*KF_K ;

  tre_cl    = tr*KM_Cl ;
  tre_oh    = tr*KM_OH ;
  tre_h     = tr*KM_H ;
  tre_na    = tr*KM_Na ;
  tre_k     = tr*KM_K ;
   
 /*
    Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
      
  K(E_Cl,I_c_cl)             += + trf_cl ;
  K(E_Cl,I_c_cl+NEQ)         += - trf_cl ;
  K(E_Cl+NEQ,I_c_cl)         += - trf_cl ;
  K(E_Cl+NEQ,I_c_cl+NEQ)     += + trf_cl ;

  K(E_Cl,I_psi)              += + tre_cl ;
  K(E_Cl,I_psi+NEQ)          += - tre_cl ;
  K(E_Cl+NEQ,I_psi)          += - tre_cl ;
  K(E_Cl+NEQ,I_psi+NEQ)      += + tre_cl ;

  /*
    Conservation de OH (hydroxy-hydro) : [(n_OH1 - n_OHn)-(n_H1 - n_Hn)] + dt * div(w_OH-w_H) = 0
  */
  for(i=0;i<2;i++) {
    c[i] = trf_oh - trf_h*dc_hsdc_oh[i] ;
  }
  K(E_OH,I_c_oh)             += + c[0] ;
  K(E_OH,I_c_oh+NEQ)         += - c[1] ;
  K(E_OH+NEQ,I_c_oh)         += - c[0] ;
  K(E_OH+NEQ,I_c_oh+NEQ)     += + c[1] ;

  K(E_OH,I_psi)              += + (tre_oh - tre_h) ;
  K(E_OH,I_psi+NEQ)          += - (tre_oh - tre_h) ;
  K(E_OH+NEQ,I_psi)          += - (tre_oh - tre_h) ;
  K(E_OH+NEQ,I_psi+NEQ)      += + (tre_oh - tre_h) ;

  /*
    Conservation de Na (Natri) : (n_Na1 - n_Nan) + dt * div(w_Na) = 0
  */
  K(E_Na,I_c_na)             += + trf_na ;
  K(E_Na,I_c_na+NEQ)         += - trf_na ;
  K(E_Na+NEQ,I_c_na)         += - trf_na ;
  K(E_Na+NEQ,I_c_na+NEQ)     += + trf_na ;

  K(E_Na,I_psi)              += +tre_na ;
  K(E_Na,I_psi+NEQ)          += -tre_na ;
  K(E_Na+NEQ,I_psi)          += -tre_na ;
  K(E_Na+NEQ,I_psi+NEQ)      += +tre_na ; 

  /*
    Conservation de K (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
  */
  for(i=0;i<2;i++) {
    c[i] = trf_k*dc_ksdc_cl[i] ;
  }
  K(E_K,I_c_cl)              += + c[0] ;
  K(E_K,I_c_cl+NEQ)          += - c[1] ;
  K(E_K+NEQ,I_c_cl)          += - c[0] ;
  K(E_K+NEQ,I_c_cl+NEQ)      += + c[1] ;

  for(i=0;i<2;i++) {
    c[i] = trf_k*dc_ksdc_oh[i] ;
  }
  K(E_K,I_c_oh)              += + c[0] ;
  K(E_K,I_c_oh+NEQ)          += - c[1] ;
  K(E_K+NEQ,I_c_oh)          += - c[0] ;
  K(E_K+NEQ,I_c_oh+NEQ)      += + c[1] ;

  for(i=0;i<2;i++) {
    c[i] = trf_k*dc_ksdc_na[i] ;
  }
  K(E_K,I_c_na)              += + c[0] ;
  K(E_K,I_c_na+NEQ)          += - c[1] ;
  K(E_K+NEQ,I_c_na)          += - c[0] ;
  K(E_K+NEQ,I_c_na+NEQ)      += + c[1] ;

  K(E_K,I_psi)               += + tre_k ;
  K(E_K,I_psi+NEQ)           += - tre_k ;
  K(E_K+NEQ,I_psi)           += - tre_k ;
  K(E_K+NEQ,I_psi+NEQ)       += + tre_k ;

  return(0) ;
 
#undef C_Cl
#undef C_OH
#undef C_Na

#undef KF_Cl
#undef KF_OH
#undef KF_Na
#undef KF_K 
#undef KF_H 

#undef KM_Cl
#undef KM_OH
#undef KM_Na
#undef KM_K
#undef KM_H
 
#undef K
}

void rs93(double **x,double **u_1,double **u_n,double *f_1,double *f_n,double *va,double *r,elem_t el,int dim,int geom,double dt,double t)
/* Residu (r) */
{
#define N_Cln(n)    (f_n[(n)])
#define N_OHn(n)    (f_n[(n+2)])
#define N_Nan(n)    (f_n[(n+4)])
#define N_Kn(n)     (f_n[(n+6)])

#define N_Cl1(n)    (f_1[(n)])
#define N_OH1(n)    (f_1[(n+2)])
#define N_Na1(n)    (f_1[(n+4)])
#define N_K1(n)     (f_1[(n+6)])

#define W_Cl        (f_1[8])
#define W_OH        (f_1[9])
#define W_Na        (f_1[10])
#define W_K         (f_1[11])

#define R(n,i)    (r[(n)*NEQ+(i)])

  double dx ,xm ;
  double volume[2],surf ;
  int    i ;
  double zero = 0.,un = 1.,deux = 2. ;

  /* initialisation */
  for(i=0;i<el.nn*NEQ;i++) r[i] = zero ;

  if(el.dim < dim) return ;

  /*
    CALCUL DE volume ET DE surf
  */
  dx = x[1][0] - x[0][0] ;
  xm = (x[1][0] + x[0][0])/deux ;
  for(i=0;i<2;i++) {
    volume[i] = fabs(dx)/deux ; 
    if(geom == 1) volume[i] *= M_PI*(x[i][0] + xm) ; 
  }
  if(geom == 1) surf = deux*M_PI*xm ; else surf = un ;
  /*
    Conservation de Cl (chlore) : (n_Cl1 - n_Cln) + dt * div(w_Cl) = 0
  */
  R(0,E_Cl) -= volume[0]*(N_Cl1(0) - N_Cln(0)) + dt*surf*W_Cl ;
  R(1,E_Cl) -= volume[1]*(N_Cl1(1) - N_Cln(1)) - dt*surf*W_Cl ;
  /*
      Conservation de OH (hydroxy-hydro) : [(n_OH1 - n_OHn)-(n_H1 - n_Hn)] + dt * div(w_OH-w_H) = 0
    */
  R(0,E_OH) -= volume[0]*(N_OH1(0) - N_OHn(0)) + dt*surf*W_OH ;
  R(1,E_OH) -= volume[1]*(N_OH1(1) - N_OHn(1)) - dt*surf*W_OH ;
  /*
    Conservation de Na (natrie) : (n_Na1 - n_Nan) + dt * div(w_Na) = 0
  */
  R(0,E_Na) -= volume[0]*(N_Na1(0) - N_Nan(0)) + dt*surf*W_Na ;
  R(1,E_Na) -= volume[1]*(N_Na1(1) - N_Nan(1)) - dt*surf*W_Na ;
 /*
    Conservation de K (kali) : (n_K1 - n_Kn) + dt * div(w_K) = 0
  */
  R(0,E_K) -= volume[0]*(N_K1(0) - N_Kn(0)) + dt*surf*W_K ;
  R(1,E_K) -= volume[1]*(N_K1(1) - N_Kn(1)) - dt*surf*W_K ;

#undef N_Cln
#undef N_OHn
#undef N_Nan
#undef N_Kn

#undef N_Cl1
#undef N_OH1
#undef N_Na1
#undef N_K1

#undef W_Cl
#undef W_OH
#undef W_Na
#undef W_K

#undef R
}

int so93(double **x,double **u,double *f,double *va,double *s,resu_t *r,elem_t el,int dim,int geom,double t)
/* Les valeurs exploitees (s) */
{
#define C_Cl(n)   (u[(n)][I_c_cl])
#define C_OH(n)   (u[(n)][I_c_oh])
#define C_Na(n)   (u[(n)][I_c_na])
#define PSI(n)     (u[(n)][I_psi])

#define W_Cl        (f[8])
#define W_OH        (f[9])
#define W_Na        (f[10])
#define W_K         (f[11])

#define KF_Cl       (va[(0)])
#define KF_OH       (va[(1)])
#define KF_Na       (va[(2)])
#define KF_K        (va[(3)])
#define KF_H        (va[(4)])

#define KM_Cl       (va[(5)])
#define KM_OH       (va[(6)])
#define KM_Na       (va[(7)])
#define KM_K        (va[(8)])
#define KM_H        (va[(9)])

  int    i,j,nso ;
  double h_s[MAX_NOEUDS],dh_s[3*MAX_NOEUDS] ;
  double c_cl,s_cl,c_oh,c_na,c_k,psi,c_h ;
  double grd_psi ;
  double dx ;
  double zero = 0. ;
  
  /*
    Donnees
  */
  phi      = el.mat->pr[pm("porosite")] ;
  d_cl     = el.mat->pr[pm("D_Cl")] ;
  r_d	   = el.mat->pr[pm("r_d")] ;

  s_c3aeq  = el.mat->pr[pm("s_c3aeq")] ;
  s_csh    = el.mat->pr[pm("s_csh")] ;
  alpha    = el.mat->pr[pm("anpha")] ;
  beta     = el.mat->pr[pm("beta")] ;

  
  /* initialisation */
  nso = 11;
  for(i=0;i<nso;i++) for(j=0;j<9;j++) r[i].v[j] = zero ;

  /* fonctions d'interpolation en s */
  fint_abs(dim,el.nn,x,s,el.dim,h_s,dh_s) ;

  /* concentration */
  c_cl    = param(u,h_s,el.nn,I_c_cl) ;
  c_na    = param(u,h_s,el.nn,I_c_na) ;
  c_oh    = param(u,h_s,el.nn,I_c_oh) ;  

  psi     = param(u,h_s,el.nn,I_psi) ;

  c_h     = k_e/c_oh ;
  c_k     = -(z_cl*c_cl + z_oh*c_oh + z_na*c_na + z_h*c_h)/z_k ;

  s_cl    = alpha*s_csh*c_cl*beta/(c_oh + beta*c_cl) + 2*s_c3aeq ;
  
  dx      = x[1][0] - x[0][0] ;
  grd_psi = (PSI(1) - PSI(0))/dx ;

  /* quantites exploitees */
  strcpy(r[0].text,"Cl libre") ; r[0].n = 1 ;
  r[0].v[0] = c_cl ;
  strcpy(r[1].text,"Cl totaux") ; r[1].n = 1 ;
  r[1].v[0] = s_cl + phi*c_cl; 
  strcpy(r[2].text,"c_OH") ; r[2].n = 1 ;
  r[2].v[0] = c_oh ;
  strcpy(r[3].text,"c_Na") ; r[3].n = 1 ;
  r[3].v[0] = c_na ;
  strcpy(r[4].text,"c_K") ; r[4].n = 1 ;
  r[4].v[0] = c_k ;
  strcpy(r[5].text,"c_H") ; r[5].n = 1 ;
  r[5].v[0] = k_e/c_oh ; 
  strcpy(r[6].text,"flux elctrique") ; r[6].n = 1 ;
  r[6].v[0] = (z_cl*W_Cl + z_na*W_Na + z_k*W_K + z_oh*W_OH)*F;
  strcpy(r[7].text,"potentiel electrique") ; r[7].n = 1 ;
  r[7].v[0] = psi;
  strcpy(r[8].text,"Flux de Cl") ; r[8].n = 1 ;
  r[8].v[0] = W_Cl ;
  strcpy(r[9].text,"Flux de diffusion") ; r[9].n = 1 ;
  r[9].v[0] =  W_Cl + KM_Cl*grd_psi ;
  strcpy(r[10].text,"Flux de Migration") ; r[10].n = 1 ;
  r[10].v[0] = -KM_Cl*grd_psi ;

  return(nso) ;

#undef C_Cl
#undef C_OH
#undef C_Na
#undef C_K
#undef PSI

#undef W_Cl
#undef W_OH
#undef W_Na
#undef W_K

#undef KF_Cl
#undef KF_OH
#undef KF_Na
#undef KF_K 
#undef KF_H 

#undef KM_Cl
#undef KM_OH
#undef KM_Na
#undef KM_K
#undef KM_H
}

double concentration_oh(double q,double k_eau)
{
  return (0.5*(q + sqrt(q*q + 4*k_eau))) ;
}


#undef NEQ

#undef NVE
#undef NVI

#undef E_Cl
#undef E_OH
#undef E_Na
#undef E_K

#undef s_oh0 

#undef I_c_cl
#undef I_c_oh
#undef I_c_na
#undef I_psi

#undef z_cl
#undef z_oh
#undef z_na
#undef z_k
#undef z_h

#undef do_cl
#undef do_oh
#undef do_na
#undef do_k 
#undef do_h 

#undef k_e
#undef F  
#undef R_g
#undef T
#undef RT
